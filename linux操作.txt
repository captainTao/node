Q&A:
ios性能测试开源框架：
MTHawkeye

exsi,PVE

BGP
IPLC专线

原型图： Axure
ios沙盒数据库查看软件：realm studio
Documents/DBRealm/..realm

读取iOS沙盒里面的数据库，用realm studio
路径： app/Documents/DBRealm

查看沙盒：iexplorer
iOS同一个局域网，查看层级视图工具： Reveal
查看OOM的文件：jetsam

获取tube视频： tubeget 或者 you-get

视频中搬瓦工VPS：http://bit.ly/3ckoUov
自用搬瓦工机场：http://bit.ly/387YRNP

BBR一键安装脚本：https://www.94ish.me/1635.html


1.ll 查看文件，过滤文件名
root@captain:~# ll /etc/sh
shadow            shadow-           shadowsocks.json  shells

2.ip addr 和ifconfig, ipconfig, curl ip.cn

3.chmod +x shadowsocksR.sh 与数字的区别
r:4
w:2
x:1

vpn: https://aff.ckh01.com/aff.php?aff=9124
CKH01


显示和隐藏隐藏文件：cmd+shift+.

pycharm格式化快捷键： cmd+alt+l

成都移动dns:
211.137.96.205
183.221.253.100

4.删除，文件名用正则表达式

删除当前目录下所有文件，r递归，f强制：
rm -rf *

5.查看一个文件夹文件的个数
6.移动一个文件夹下所有文件
mv    /usr/lib/*    /zone
mv    /usr/lib/*.txt    /zone

RAM，ROM
闪存：ROM, read-only memory
内存: RAM, random access memory
网关，子网掩码，ICMP,DNS

5.目前速度最快的还是SSR客户端加HAPROXY的服务器,国内的阿里云服务器架设haproxy再跳转到海外服务器
6.ss+GoQuiet:goquiet是ss一个插件，可以将ss流量混淆为普通的https

ios工程provisionProfile放的目录：
/Users/captain/Library/MobileDevice/Provisioning Profiles


低版本xcode支持高版本ios
---------------------
xcode本地路径：
/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/DeviceSupport
github获取地址：
https://github.com/iGhibli/iOS-DeviceSupport/tree/master/DeviceSupport
https://gitee.com/Han0/iOSDeviceSupport/tree/master/DeviceSupport

pgtools切换环境,进入到项目工程中
pkg -env xx.cfg
pkg -e toolchain_developer.cfg

不错的安装教程网站：
https://www.digitalocean.com/community/tutorials


画图软件：
ProcessON
visio

u盘制作工具：
https://www.balena.io/etcher/
balenaetcher


proxmox系统https://www.proxmox.com/en/

系统：
ESXI
Ikuai


配置安卓开发环境
-----------------
brew install android-ndk maven ant gradle
brew install --cask android-sdk android-platform-tools android-studio


> cp
------------------
拷贝一个文件夹下所有文件
cp -r /etc/asl/ test  推荐这种
cp -r /etc/asl/ ./test
cp -r /etc/asl/. ./test
cp -a : 留原文件属性的前提下复制文件


> rm
------------------
删除文件下的所有文件
rm *     文件夹下没有文件夹
rm -r *   文件夹下有文件夹


mv
------
mv A B  重命名
mv cc /A/bb 移动并重命名

///////////////////////////////////////////////////////////////////

谷歌DNS:
8.8.8.8
8.8.4.4:53


127.0.0.1
114.114.114.114，1.2.4.8
114.114.114.114,208.67.222.222:443,8.8.8.8

国内：114.114.114.114 / 114.114.115.115
openDNS:
208.67.220.220:443,208.67.220.222:443,208.67.222.222:443

腾讯dns:
119.29.29.29,182.254.116.116

如果需要备用dns,在dns栏目填入两个dns,并用逗号隔开


ipk文件用opkg install来安装


homebrew
---------
安装brew services
curl -o /usr/local/bin/brew-services.rb https://gist.githubusercontent.com/lwe/766293/raw/75a7907004bbff0eb3b072d1d951be2cfe7e5020/brew-services.rb
chmod +x /usr/local/bin/brew-services.rb

brew services list  #查看服务的启动状态
brew services run mysql # 启动mysql 服务
brew services start mysql # 启动 mysql 服务，并注册开机自启
brew services stop mysql # 停止 mysql 服务，并取消开机自启
brew services restart mysql # 重启 mysql 服务，并注册开机自启
brew services cleanup # 清除已卸载应用的无用配置

launchctl list也是开机启动的服务，brew services 是 launchctl 的一个子集

替换homebrew安装源
-----------------
https://www.jianshu.com/p/b26c7bc14440

# 替换brew.git:
$ cd "$(brew --repo)"
# 中国科大:
$ git remote set-url origin https://mirrors.ustc.edu.cn/brew.git
# 清华大学:
$ git remote set-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/brew.git

# 替换homebrew-core.git:
$ cd "$(brew --repo)/Library/Taps/homebrew/homebrew-core"
# 中国科大:
$ git remote set-url origin https://mirrors.ustc.edu.cn/homebrew-core.git
# 清华大学:
$ git remote set-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-core.git

# 替换homebrew-bottles:
# 中国科大:
$ echo 'export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.ustc.edu.cn/homebrew-bottles' >> ~/.bash_profile
$ source ~/.zshrc
# 清华大学:
$ echo 'export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles' >> ~/.bash_profile
$ source ~/.zshrc

# 应用生效:
$ brew update


重置为官方源：
# 重置brew.git:
$ cd "$(brew --repo)"
$ git remote set-url origin https://github.com/Homebrew/brew.git

# 重置homebrew-core.git:
$ cd "$(brew --repo)/Library/Taps/homebrew/homebrew-core"
$ git remote set-url origin https://github.com/Homebrew/homebrew-core.git


mac dnsmasq
---------------
https://www.jianshu.com/p/3dd22d7d86b2
https://blog.csdn.net/hekewangzi/article/details/81077546
https://blog.csdn.net/wangzhen_csdn/article/details/79791023

1.brew install dnsmqsq

2.brew services start(restart) dnsmasq

/*
重启：
sudo launchctl stop homebrew.mxcl.dnsmasq
sudo launchctl start homebrew.mxcl.dnsmasq

开机启动：
sudo cp -fv /usr/local/opt/dnsmasq/*.plist /Library/LaunchDaemons
sudo lauchctl load /Library/LaunchDaemons/homebrew.mxcl.dnsmasq.plist

cp /usr/local/opt/dnsmasq/dnsmasq.conf.example /usr/local/etc/dnsmasq.conf
测试应该没有这个example文件,有对应的dnsmasq文件
*/

3.sudo vim /etc/dnsmasq.hosts   //新建host文件，不会影响本机的host
127.0.0.1        localhost
255.255.255.255  broadcasthost
::1              localhost
192.168.3.234    salad, salad.com

4.vim /usr/local/etc/resolv.dnsmasq.conf  //指定上级dns服务器
nameserver  114.114.114.114

5.vim /usr/local/etc/dnsmasq.conf
#no-hosts
addn-hosts=/etc/dnsmasq.hosts                        //指定需要解析的hosts文件位置
resolv-file=/usr/local/etc/resolv.dnsmasq.conf    //指定上级dns文件
strict-order
listen-address=127.0.0.1,x.x.x.x                  //监听需要解析域名的地址,xxx为本机内网地址
address=/salada.com/192.168.3.234
#cache-size=0  # 默认为150条,这个是禁用
#no-negcache  # 不缓存未知域名缓存，默认情况下dnsmasq缓存未知域名并直接返回为客户端
#clear-on-reload  # 重启后清空缓存

6.强制刷新dns,随系统版本而不一样
sudo killall -HUP mDNSResponder
sudo killall mDNSResponderHelper
sudo dscacheutil -flushcache


dnsmasq:
-------------
功能强大的dns服务器还有BIND9
https://wzyboy.im/post/874.html      //dnsmasq的作用
https://blog.51cto.com/longlei/2065967    // 详细配置
https://www.cnblogs.com/taoyuxuan/p/11205491.html
https://www.cnblogs.com/studio313/p/6278698.html

验证dnsmasq配置：
dnsmasq工作在53端口

修改/etc/dnsmasq.conf, 在文件末尾追加conf-dir=/etc/dnsmasq.d
/etc/dnsmasq.d目录下有两个文件：
accelerated-domains.china.conf  dnsmasq_gfwlist.conf

/etc/resolv.conf    //设置本地DNS
nameserver 127.0.0.1


dns解析流程：
------------
/etc/hosts => /etc/dnsmasq.d/xx.conf => /etc/dnsmasq.conf => 上游dns resolv.dnsmasq.conf

dnsmasq先去解析hosts文件， 再去解析/etc/dnsmasq.d/下的*.conf文件，并且这些文件的优先级要高于dnsmasq.conf，我们自定义的resolv.dnsmasq.conf中的DNS也被称为上游DNS，这是最后去查询解析的；

如果不想用hosts文件做解析，我们可以在/etc/dnsmasq.conf中加入no-hosts这条语句，这样的话就直接查询上游DNS了，
如果我们不想做上游查询，就是不想做正常的解析，我们可以加入no-reslov这条语句。



查看dns配置文件语法是否正确：
dnsmasq --test


自定义dns格式：（可以屏蔽广告，也可以自定义局域网ip解析）
--------------
address=/ad.youku.com/127.0.0.1



dnsmasq参数说:
--------------
resolv-file=/etc/resolv.dnsmasq.conf
定义dnsmasq从哪里获取上游DNS服务器的地址， 默认从/etc/resolv.conf获取。

strict-order
表示严格按照resolv-file文件中的顺序从上到下进行DNS解析，直到第一个解析成功为止。

listen-address=129.168.x.x,127.0.0.1
定义dnsmasq监听的地址，默认是监控本机的所有网卡上。

address=/long.com/192.168.115.10
启用泛域名解析，即自定义解析a记录，
例如：address=/long.com/192.168.115.10 访问long.com时的所有域名都会被解析成192.168.115.10

bogus-nxdomain
对于任何被解析到此 IP 的域名，将响应 NXDOMAIN 使其解析失效，
可以多次指定通常用于对于访问不存在的域名，禁止其跳转到运营商的广告站点

server=/cn/114.114.114.114
server=/taobao.com/114.114.114.114
server=/taobaocdn.com/114.114.114.114
#国外指定DNS
server=/google.com/223.5.5.5

指定使用哪个DNS服务器进行解析，对于不同的网站可以使用不同的域名对应解析。
例如：server=/google.com/8.8.8.8 #表示对于google的服务，使用谷歌的DNS解析。



pdnsd:
-------------
将UDP的DNS请求转换为TCP进行发送；----替代方案：dnsforwarder


vpn:tinc ZeroTier
通道：obfs proxy
防火墙链路：network-->firewall
需要安装：loading balance



trojan
-----------
A: trojan更新1.15.1了支持透明代理，目前配置文件增加了（”run_type”: “nat”,）nat模式。
https://trojan-gfw.github.io/trojan/config.html 这个模式和ss很相似，并且恩山上面有人出了一篇教程，是基于这个nat模式的，我尝试配置了一下路由器（OP19.07.2）目前手机端已经成功（使用的是大佬的gfwlist to dnsmasq rule file with ipset），我想大佬可以尝试出一下教程吗！或者优化一下恩山的教程，有个时候没有luci也是可以的。
附上恩山地址： https://www.right.com.cn/forum/thread-3708391-1-1.html

B: 找到了一个功能非常完整的透明代理的配置脚本，
目前研究中：https://github.com/zfl9/ss-tproxy
配合https://github.com/zfl9/chinadns-ng

A: 大佬编译了几个常见的IPK:链接：https://share.weiyun.com/59BH9Tt 密码：g69uwc
大佬好像有人（openwrt-chinadns-ng和luci）https://github.com/pexcn/openwrt-chinadns-ng/tree/luci


trojan本质上就是将加密流量伪装成TLS流量，gost/v2ray等好几种软件已经早已支持此模式了，不过trojan是C++写的，这是它的优势，非常适合路由器；而且甚至有shadowsocks的SIP003插件版本，可以说是挺不错的方案了。

///////////////////////////////////////////////////////////////////  ssr开始

------------------------------------------------知识储备
ss-server、ss-local(socks5)、ss-tunnel(udp relay)、ss-redir(ss) 解释
https://www.zfl9.com/ss-redir.html

浅谈vpn,ss,proxy的区别：
https://medium.com/@thomas_summon/%E6%B5%85%E8%B0%88vpn-vps-proxy%E4%BB%A5%E5%8F%8Ashadowsocks%E4%B9%8B%E9%97%B4%E7%9A%84%E8%81%94%E7%B3%BB%E5%92%8C%E5%8C%BA%E5%88%AB-b0198f92db1b

ss与ssr区别扫盲：https://doub.io/ss-jc10/
ss故障排除： https://doub.io/ss-jc39/


设计师用的网址：
https://www.behance.net/
https://dribbble.com/
https://www.shutterstock.com/home


refer websties link:
https://www.diycode.cc/topics/738        // vultr vps搭建
https://blog.dreamtobe.cn/ss-and-vps/    // vultr vps优化

VPS和ECS的区别：https://www.diycode.cc/topics/738
VPS提供商：Vultr.com
节点：洛杉矶，东京

putty客户端
ss安装：
Chrome插件——SwitchyOmega

优化：
加速软件： 锐速+centos

网络进阶：
BBR脚本
FinalSpeed: 双边加速
Snapshot

-------------------

路由器软件包括两部分：

处理TCP：
ssr, ss-libev

处理UDP
dnsforwarder, dnscrypt-proxy
dnsforwarder相当于DNS的隧道,
而dnscrypt-proxy相当于UDP的shadowsocksr-libev

--------------------
答疑：
https://cokebar.info/archives/850
google.com是响应ping操作的。ping不通是因为ping是ICMP协议，不是TCP/UDP；ss只代理TCP和UDP，所以ping是直连了。想要测试延迟可以用TCP ping工具，比如说PsPing(windows, 支持tcp、udp),PaPing(linux,只支持tcp,不支持udp)。
https://docs.azure.cn/zh-cn/articles/azure-operations-guide/virtual-network/aog-virtual-network-tcp-psping-paping-connectivity

其他网友解答：
第一项“让路由器本身走shadowsocks”设置好以后路由自身还是可能无法翻墙。我看了一下感觉是这样，虽然在WAN口设置里面已经把DNS修改为127.0.0.1，但是默认查询的端口是53且无法指定，而路由自身访问53端口的请求并没有转发到5353端口，所以不能返回正确的结果。
这个问题造成的直接后果是无法访问openwrt-dist.sourceforge.net源更新软件包。一个简单的解决办法是修改/etc/dnsmasq.conf文件，在最后增加：
server=/sourceforge.net/127.0.0.1#5353
这样更新就没问题了。楼上有朋友说路由器ping google.com会受到污染，同样的道理，在/etc/dnsmasq.conf最后增加：
server=/google.com/127.0.0.1#5353
就可以了。只不过这个办法需要一条一条手工写进去，费点事。好在路由平时需要配置访问的也就那么几个被墙的站点，差哪个自己填上去就好了。

------------------------------------------------  参考网址
编译固件
佐大论坛：http://www.openwrt.pro/
https://github.com/coolsnowwolf

op视频：
https://blog.csdn.net/XinAncao_/article/details/89813406


dnsforwarder+SSR:
https://nwindy.moe/lede-shadowsocksr/

luci-ssr.ipk:
https://github.com/ywb94/openwrt-ssr


ss+ChnRoute:
https://cokebar.info/archives/664           // ss+chnRout
https://cokebar.info/archives/962           // ss+gfw

https://blog.csdn.net/lvshaorong/article/details/53230545          // openwrt无线中继，桥接，信号放大，访客网络
1.有线转有线NAT-网络选LAN
2.有线转有线中继-网络选WAN
3.无线转无线中继-wifi scan
4.无线转有线-从方式三种来中转
.....


5.wifi中继/wifi reptear:
https://openwrt.org/docs/guide-user/network/wifi/relay_configuration
opkg update && opkg install relayd luci-proto-relay

------------------------------------------------  搭建参考

https://suiyuanjian.com/124.html                // google vps搭建（主）-ssr
http://godjose.com/2017/06/14/new-article/      // google vps（参考）
https://teddysun.com/486.html                   // SS一键四选一安装脚本：

https://cokebar.info/archives/664               // Shadowsocks + ChnRoute路由设置（主）
https://teddysun.com/511.html                   // 秋水libev simple-obfs



明月参考：
-------------
明月更新历史：http://www.right.com.cn/forum/thread-139399-1-1.html
明月官方：https://www.myopenwrt.org/
ssr路由安装: https://github.com/rapistor/
ssr路由配置: https://github.com/ywb94/openwrt-ssr


------------------------------------------------ 开始搭建


vps进入准备工作：
/***********************************/  更新常用软件
sudo –i
更新系统（两行命令分开执行，第二步等待时间较长，会出现####和进度百分百，耐心等）

apt update
apt upgrade
查看当前内核版本

uname -a
然后你会发现发现版本低于 4.9
安装新内核

apt install linux-image-4.10.0-20
卸载旧内核

apt autoremove
启用新内核

update-grub
重启

Reboot
验证内核版本

uname –r
看到如下类似如下回显，版本号为4.10.0-20-generic

sudo apt-get update

ssh非22端口访问：
ssh -p xx user@ip
https://www.cnblogs.com/cloudiest/p/8485612.html


/***********************************/  配置ssh

google vps默认配置的密码登录和root登录为关闭状态，默认只能使用ssh，如需要开启，需要配置：https://mapgun.com/archives/2235

1.生成ssh key;
ssh-keygen -t [rsa|dsa]                      // 默认用此方法  refer: https://blog.csdn.net/dongwuming/article/details/9705595
ssh-keygen -t rsa -f gcloud                  // 生成gcloud 名字的钥匙
ssh-keygen -t rsa -C "578628438@qq.com"      // 使用


2.在服务器中添加 public key, 并chmod 600 和 设置.ssh目录权限
$ echo "" > ~/.ssh/authorized_keys   // server key location,非root用户下
$ chmod 600 authorized_keys
$ chmod 700 .ssh    //可选


3.ssh登录：
> ssh wangsirlemon@35.229.253.255    // 默认公钥登录
> ssh -p 8989 wangsirlemon@35.229.253.255   // 用端口号登录

> ssh -i gcloud wangsirlemon@335.197.144.67  // 使用指定公钥登录

4.ssh问题排查：
如果ping通了仍然不能使用SSH进行连接
在虚拟机终端运行
service iptables stop  //关闭防火墙
service sshd start     //启动 SSHD 服务

如果出现Service不存在的情况，说明sshd服务未安装。
安装并启用sshd
sudo apt-get install openssh-server
service sshd start
再次连接即可


XShell连接服务器
--------------------
https://51.ruyo.net/2144.html

首先使用自动SSH连接上去，然后 sudo -i切换到 root

vi /etc/ssh/sshd_config
#修改以下内容即可

#允许密码登录 将注释去掉
PermitRootLogin yes

#修改成 yes
PasswordAuthentication no

#重启SSH即可
/etc/init.d/sshd restart


-------------------------------------
wangsirlemon@instance-static:~/.ssh$                 // 在server生成 glocoud key
> echo "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDVH6uhFMGlFKoN7XUdTHKEus77mCOvpkfz3rbXkee9WLPjpY1rBgDMhqZcco7Klmwoy1CaOmdBRlvs70ySX
ok72937hLvUshHoGqevwW+hpu3/5P+5fQXXMfNnFxkj7PE08pk8EkDoYUsu/JnN7qex3IH7Ps4iRQHuePdgFe/eUzLqHgzsTtsuEIYL64rDG2qs/jfWHqWeRvmxMiTr/bSm2uA9CJ/ebSW5N9rcEcJt+G/78cF+efUYC
Nz3pRQ5iimsp2aH5mUkDoWOOWNPh9j7biaZoN6fjleDMx9V6nxtEHmdwUN8JexUI74z/76hQOiqA4wGSTL0BMjJpfTitM3T captain@wanghaitao-MacBook.local" > authorized_keys


mine:
echo "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQChXavIw8d9R9WDc25aaHeR9CMHXtr5UT4lgUH0tthFLh3M4/T7F16eDKIm98Ax33VtSecRqJSk3IF9VlYdcn9sWKNg8Nb0REtv1NQgHdKwOj1t+RqyMVxr9eLgdgCTYxpsWhP5Cnx55sOLsXE1xHw9AbFkE+yeflaHcZ3Nv+vwxpSEXJhKJkLG/Z/e7PMEAB5nyWffhtKVxFonrEhB69fiKm1FiZs0ly/QpWcaXfmyIgasiNUe+Rm/6IMz2qhTrFzr2YUqFKAvslvODMUlPf3/RRXbBUr6YJb0ci68aMBhLVUb2GnNMXH6WtfJGpg/r1IW8PCtGg0RyAg4YNvUbLNF 578628438@qq.com" > ~/.ssh/authorized_keys

echo "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQChXavIw8d9R9WDc25aaHeR9CMHXtr5UT4lgUH0tthFLh3M4/T7F16eDKIm98Ax33VtSecRqJSk3IF9VlYdcn9sWKNg8Nb0REtv1NQgHdKwOj1t+RqyMVxr9eLgdgCTYxpsWhP5Cnx55sOLsXE1xHw9AbFkE+yeflaHcZ3Nv+vwxpSEXJhKJkLG/Z/e7PMEAB5nyWffhtKVxFonrEhB69fiKm1FiZs0ly/QpWcaXfmyIgasiNUe+Rm/6IMz2qhTrFzr2YUqFKAvslvODMUlPf3/RRXbBUr6YJb0ci68aMBhLVUb2GnNMXH6WtfJGpg/r1IW8PCtGg0RyAg4YNvUbLNF 578628438@qq.com" > authorized_keys

wangsirlemon@instance-static:~/.ssh$ chmod 600 authorized_keys


/***********************************/ 安装ss,bbr

1.切换用户：
sudo -i    // sudo su

2.安装ss,四选一，可以安装多个
wget --no-check-certificate -O shadowsocks-all.sh https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks-all.sh
chmod +x shadowsocks-all.sh
./shadowsocks-all.sh 2>&1 | tee shadowsocks-all.log

3.bbr加速
wget --no-check-certificate https://github.com/teddysun/across/raw/master/bbr.sh && chmod +x bbr.sh && ./bbr.sh


验证ss,obfs,udp
--------------------
netstat -lntpu
ps -ef | grep -v grep | grep "server"

验证bbr：
--------------------
https://teddysun.com/489.html/comment-page-7

uname -r:
一般显示为最新版就ok

sysctl net.ipv4.tcp_available_congestion_control        // bbr状态检测
返回值出现：
net.ipv4.tcp_available_congestion_control = bbr cubic reno
或者为：
net.ipv4.tcp_available_congestion_control = reno cubic bbr

sysctl net.core.default_qdisc
返回值为：
net.core.default_qdisc = fq

lsmod | grep bbr
返回值有 tcp_bbr 模块即说明 bbr 已启动。注意：并不是所有的 VPS 都会有此返回值，若没有也属正常。

查询当前使用的 TCP 拥塞控制算法
sysctl net.ipv4.tcp_congestion_control


ss,ssr问题排查：
--------------------------------------
netstat -lntp   // root用户

ss 服务端配置:
cat /etc/shadowsocks.json
cat /etc/shadowsocks-libev/config.json

ssr路由配置文件：
cat /etc/config/shadowsocksr
cat /etc/config/shadowsocks

ip模式数据：/etc/china_ssr.txt
GFW模式数据：/etc/dnsmasq.ssr/gfw_list.conf


ss问题排查：
https://doub.io/ss-jc39/         //排查

①启动Shadowsocks服务端：service supervisord start
②关闭Shadowsocks服务端：service supervisord stop
③重启shadowsocks服务端：service supervisord restart


/etc/init.d/shadowsocks status  // ss状态
/etc/init.d/shadowsocks start   // start
/etc/init.d/shadowsocks restart  // 重启ss
./shadowsocks-libev.sh uninstall   //卸载ss,需要在root中


UDP Relay
--------------------------------------
确认服务端是否开始UDP Relay:
https://github.com/icymind/VRouter/wiki/%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%BC%80%E5%90%AF-UDP-Relay
方法1: 在命令行启动 ss-server 时加上 -u 参数
方法2: 在 ss-server 的配置文件中添加"mode": "tcp_and_udp"
验证：
netstat -lnup
iptables -A INPUT -p udp --dport 3389 -j ACCEPT

/***********************************/ 安装ipsec(手机端4g用)

https://github.com/hwdsl2/setup-ipsec-vpn

apt-get update && apt-get dist-upgrade
wget https://git.io/vpnsetup -O vpnsetup.sh && sudo sh vpnsetup.sh


/***********************************/ 安装outliner(手机端4g用)
outline配置IOS客户端 server:
https://steemit.com/cn/@zhijun/outline

git: https://github.com/Jigsaw-Code/outline-server

server run:
bash -c "$(wget -qO- https://raw.githubusercontent.com/Jigsaw-Code/outline-server/master/src/server_manager/install_scripts/install_server.sh)"


===============================================================


http://openwrt-dist.sourceforge.net/
---------------------------------------------------------------路由终端翻墙

1.更新openwrt / lede固件
2.路由设置ssh,更改lan口网域，确保正常上网


3.路由安装ipk

a.方法一：一键脚本 （网络直连sourceforge.net和downloads.lede-project.org没有问题，可以试试ping不丢包）

wget -qO- http://openwrt-dist.sourceforge.net/auto_install.sh | sh
上面如果报错，则执行下面：
wget -qO- http://openwrt-dist.sourceforge.net/auto_install.sh | ash
#下面为我自己写的：
wget -qO- 'https://raw.githubusercontent.com/captainTao/node/master/3800/auto_install.sh' | sh
# 执行此步骤时候按照提示，选择安装shadowsocks,chinadns以及dns-forwarder
opkg install ip-full iptables-mod-tproxy

op资源下载出错的时候：
-----------------------
*** Failed to download the package list from http://openwrt-dist.sourceforge.net/packages/luci/Packages.gz
删除或者注释掉 /etc/opkg.conf 中的 `option check_signature 1`然后重启


此一键脚本的手动步骤：
首先添加 a65535 的 gpg key，只有这样，第三方的包才能通过签名验证：
wget -qO /tmp/openwrt-dist.pub http://openwrt-dist.sourceforge.net/openwrt-dist.pub
opkg-key add /tmp/openwrt-dist.pub
rm /tmp/openwrt-dist.pub

打开Luci，定位到“系统”-“软件包”-“配置”选项卡，在“自定义feeds”末尾加入两行并点击“提交”：
请根据自己的CPU架构（可以执行 opkg print-architecture 查看，或者参考“发行版软件源”里的URL里的文本），将mips_24kc替换成相应的文本，最后点击提交。
src/gz openwrt_dist http://openwrt-dist.sourceforge.net/packages/base/mips_24kc
src/gz openwrt_dist_luci http://openwrt-dist.sourceforge.net/packages/luci

路由执行：
opkg update
opkg install ip-full ipset iptables-mod-tproxy libpthread
opkg install shadowsocks-libev luci-app-shadowsocks
opkg install ChinaDNS luci-app-chinadns
opkg install dns-forwarder luci-app-dns-forwarder


b.方法二：手动安装,先安装依赖包，然后安装ipk

依赖列表：
libgcc # target/cpu型号/package目录下
libpthread # 同上
ip-full # base
ipset # base 无此包不能使用luci-app-shadowsocks
      #      只能使用luci-app-shadowsocks-without-ipset 性能会下降
iptables-mod-tproxy # base 无此包将无法代理UDP流量
zlib # base


对应下载地址：
查看CPU型号：
opkg print-architecture | awk '{print $2}'
或者：
opkg print-architecture | awk '{print $2}' | grep -v all | grep -v noarch

打印结果为：cpu架构-cpu型号


依赖ipk：
http://downloads.openwrt.org/releases/18.06.1/packages/mips_24kc/base/
http://downloads.openwrt.org/releases/18.06.1/targets/ar71xx/generic/packages/

应用ipk:
http://openwrt-dist.sourceforge.net/packages/
http://openwrt-dist.sourceforge.net/

路由开始：
opkg update
opkg install ip-full ipset iptables-mod-tproxy libpthread
（备注：自己看依赖中libgcc，zlib没有安装，网址说会自动从仓库安装）

root@OpenWrt:~# opkg install ip-full ipset iptables-mod-tproxy libpthread
Installing ip-full (4.16.0-8) to root...
Downloading http://downloads.openwrt.org/releases/18.06.1/packages/mips_24kc/base/ip-full_4.16.0-8_mips_24kc.ipk
Installing libmnl (1.0.4-1) to root...
Downloading http://downloads.openwrt.org/releases/18.06.1/packages/mips_24kc/base/libmnl_1.0.4-1_mips_24kc.ipk
Installing ipset (6.34-1) to root...
Downloading http://downloads.openwrt.org/releases/18.06.1/packages/mips_24kc/base/ipset_6.34-1_mips_24kc.ipk
Installing kmod-nfnetlink (4.9.120-1) to root...
Downloading http://downloads.openwrt.org/releases/18.06.1/targets/ar71xx/generic/packages/kmod-nfnetlink_4.9.120-1_mips_24kc.ipk
Installing kmod-ipt-ipset (4.9.120-1) to root...
Downloading http://downloads.openwrt.org/releases/18.06.1/targets/ar71xx/generic/packages/kmod-ipt-ipset_4.9.120-1_mips_24kc.ipk
Installing libipset (6.34-1) to root...
Downloading http://downloads.openwrt.org/releases/18.06.1/packages/mips_24kc/base/libipset_6.34-1_mips_24kc.ipk
Installing iptables-mod-tproxy (1.6.2-1) to root...
Downloading http://downloads.openwrt.org/releases/18.06.1/targets/ar71xx/generic/packages/iptables-mod-tproxy_1.6.2-1_mips_24kc.ipk
Installing kmod-ipt-tproxy (4.9.120-1) to root...
Downloading http://downloads.openwrt.org/releases/18.06.1/targets/ar71xx/generic/packages/kmod-ipt-tproxy_4.9.120-1_mips_24kc.ipk
Package libpthread (1.1.19-1) installed in root is up to date.
Configuring libmnl.
Configuring ip-full.
Configuring kmod-nfnetlink.
Configuring kmod-ipt-tproxy.
Configuring kmod-ipt-ipset.
Configuring libipset.
Configuring ipset.
Configuring iptables-mod-tproxy.

note:上面依赖安装完成后，我进行手动上传了依赖，然后安装了ligbcc和zlib

上面依赖装完后，需要下载下面的主程序：然后winscp上传路由,opkg install安装
shadowsocks-libev_x.x.x-x_xxxx.ipk
dns-forwarder_x.x.x-x_xxxx.ipk
ChinaDNS_x.x.x-x_xxxx.ipk
luci-app-shadowsocks_x.x.x-x_all.ipk
luci-app-chinadns_x.x.x-x_all.ipk
luci-app-dns-forwarder_x.x.x-x_all.ipk
我这儿还需要安装obfs.


建议的加密算法
------------
chacha20-ietf-poly1305、xchacha20-ietf-poly1305
加速 aes-128-gcm、aes-192-gcm、aes-256-gcm

obfs:tls

4.禁用ipv6
vim /etc/sysctl.conf
net.ipv6.conf.all.disable_ipv6=1
net.ipv6.conf.default.disable_ipv6=1

sysctl -p

4.luci-ss, chinadns, tcp fast open配置：

a.luci-ss添加服务器
obfs-local
obfs=http;obfs-host=www.bing.com

https://www.meirenji.info/2019/03/19/%E5%AE%89%E8%A3%85-shadowsocks-libev%E5%90%AF%E7%94%A8-obfs-%E6%B7%B7%E6%B7%86/
混淆网址选择下面一个即可
tse3.mm.bing.net
tse2.mm.bing.net
tse1.mm.bing.net
cloudfront.com
cloudflare.com
itunes.apple.com
www.icloud.com
ajax.microsoft.com
apps.bdimg.com
www.bing.com

b.luci-ss设置访问控制

c.更新chinadns
wget -O- 'http://ftp.apnic.net/apnic/stats/apnic/delegated-apnic-latest' | awk -F\| '/CN\|ipv4/ { printf("%s/%d\n", $4, 32-log($5)/log(2)) }' > /etc/chinadns_chnroute.txt

d.更新完成后，记得重启ss

e.配置代理(本地端口1080)
f.额外优化：开启tcp fast open
修改 /etc/sysctl.conf ，加入如下一行：
net.ipv4.tcp_fastopen = 3
然后执行如下命令生效：
sysctl -p

g.勾选服务器tcp fast open

5.dns配置
a.dns forwarder:
port:5311
address:127.0.0.1
server:8.8.8.8

b.chinadns:
enable bidirectional filter
port:5353
address:0.0.0.0
server: 114.114.114.114,127.0.0.1#5311

c.dhcp/dns
(TAB:general settings)dns forwardings: 127.0.0.1#5353
(TAB:resolve and hosts files)enable ingnore resolve file (old path: /tmp/resolv.conf.auto)

d.wan
network-->interface-->wan-->edit-->advanced
disable Use DNS servers advertised
Use custom DNS servers 127.0.0.1

--------------至此已经能科学上网了
6.dnsmasq
gfwlist,china-list

mkdir /etc/dnsmasq.d

uci get dhcp.@dnsmasq[0].confdir
如果返回值为 uci: Entry not found 或者其他非  /etc/dnsmasq.d 的值，则执行：
uci add_list dhcp.@dnsmasq[0].confdir=/etc/dnsmasq.d
uci commit dhcp

对应的删除操作为：
uci del_list dhcp.@dnsmasq[0].confdir=/etc/dnsmasq.d
uci commit dhcp

uci get dhcp.@dnsmasq[0].cachesize  //获取缓存条数
如果返回值为 uci: Entry not found ，则执行（缓存条数酌情设置）：
uci add_list dhcp.@dnsmasq[0].cachesize=10000
uci commit dhcp
如果返回值是一个数字，说明设置过该选项，但如果感觉小了，运行如下命令修改该值：
uci set dhcp.@dnsmasq[0].cachesize=10000
uci commit dhcp

# 正常使用dns更新脚本
opkg install coreutils-base64 ca-certificates ca-bundle curl
# opkg install libustream-mbedtls wget #如果要用https,就需要tls

cd ~
# China-List
curl -L -o generate_dnsmasq_chinalist.sh https://github.com/cokebar/openwrt-scripts/raw/master/generate_dnsmasq_chinalist.sh
chmod +x generate_dnsmasq_chinalist.sh
# GfwList
curl -L -o gfwlist2dnsmasq.sh https://github.com/cokebar/gfwlist2dnsmasq/raw/master/gfwlist2dnsmasq.sh
chmod +x gfwlist2dnsmasq.sh

# China-list  114可以换成ISP的dns,这样运营商分配最近的服务器
sh generate_dnsmasq_chinalist.sh -d 114.114.114.114 -p 53 -o /etc/dnsmasq.d/accelerated-domains.china.conf
# GfwList
sh gfwlist2dnsmasq.sh -d 127.0.0.1 -p 5311 -o /etc/dnsmasq.d/dnsmasq_gfwlist.conf
# Restart dnsmasq
/etc/init.d/dnsmasq restart
完成后可自行查看 /etc/dnsmasq.d/accelerated-domains.china.conf 和文件，如有不需要的域名，注释掉或者删除即可

PS：路由性能不好的，慎用China-List。

---------------------------------
note:如果遇到gfwlist下载不下来请参考：https://github.com/cokebar/gfwlist2dnsmasq
OpenWRT Usage
( For LEDE 17.01/ OpenWrt 18.06 and later)
To download gfwlist curl or wget is needed. Because the connection is HTTPS, if you use busybox wget, you need to install libustream-openssl or libustream-mbedtls to support it, otherwise use GNU wget.
Because gfwlist is encoded by BASE64, base64 is needed to decode.

# curl
opkg update
opkg install curl coreutils-base64
# busybox wget (default by OpenWrt)
opkg update
opkg install libustream-mbedtls coreutils-base64
# GNU wget
opkg update
opkg install wget coreutils-base64
#https certificate
opkg update
opkg install ca-certificates ca-bundle
--------------------------------至此已经够用了
后面部分为自定义chinalist和gfwlist
这部分需要用dnsmasq-full替换掉dnsmasq

安装full依赖
opkg install dnsmasq-full
手动下载dnsmasq-full
https://downloads.openwrt.org/releases/packages-18.06/arm_cortex-a9_vfpv3/base/dnsmasq-full_2.80-1_arm_cortex-a9_vfpv3.ipk

https://downloads.openwrt.org/releases/19.07.9/packages/x86_64/base/dnsmasq-full_2.80-16.3_x86_64.ipk

opkg remove dnsmasq && opkg install dnsmasq-full
# 使用ipset,用了dnsmasq-full:
sh generate_dnsmasq_chinalist.sh -d 114.114.114.114 -p 53 -s ss_spec_dst_bp -o /etc/dnsmasq.d/accelerated-domains.china.conf
# 使用ipset,用了dnsmasq-full:
sh gfwlist2dnsmasq.sh -d 127.0.0.1 -p 5311 -s ss_spec_dst_fw -o /etc/dnsmasq.d/dnsmasq_gfwlist.conf

dnsmasq.d目录下自定义：
自定义：custom_bypass.conf
server=/example.com/114.114.114.114
ipset=/example.com/ss_spec_dst_bp

自定义custom_forward.conf
server=/example.com/127.0.0.1#5311
ipset=/example.com/ss_spec_dst_fw

/etc/init.d/dnsmasq restart

验证dnsmasq配置以及其他优化：
------------------------------
修改/etc/dnsmasq.conf, 在文件末尾追加conf-dir=/etc/dnsmasq.d (这一句之前有命名，应该不用设置了)
可知直接在/etc/dnsmasq.conf里添加一行设置这个值，单位是秒：
min-cache-ttl=3600
建议不要过大，3600以内吧，否则可能会有副作用

这儿可以自定义局域网域名：
address=/gitlab.camera360.com/10.1.12.42
// 双向解析,待确认
ptr-record=192.168.111.113.in-addr.arps,www.lyh1.com

/etc/dnsmasq.d目录下有两个文件：
accelerated-domains.china.conf  dnsmasq_gfwlist.conf

/etc/resolv.conf    //设置本地DNS
nameserver 127.0.0.1

我的router是这样设置的：
# Interface cmcc
nameserver 192.168.2.200
nameserver 119.29.29.29
# Interface wan
nameserver 127.0.0.1
~


openwrt网络配置：
/etc/config/network
重启网络配置： /etc/init.d/network restart

安装最新的19.07 op的时候luci报错，
You can solve the issue in the meanwhile by installing luci-compat

uci show dhcp可以查看上述的uci配置

luci UI报错
-----------
opkg update
opkg install luci luci-base luci-compat


其他配置
-----------------
1.设置wifi定时任务 // 见模块：openwrt wifi toggle scheduled
2.设置更新ipk定时任务
3.设置更新chinadns,gfwlist等定时任务
4.脚本记得加执行权限chmod +x /root/ss_watchdog.sh
5.添加mwan
6.添加usb printer
7.添加ftp服务器
8.添加Aria2配置
9.添加eMule设置
10.VPN:N2N-v2-vpn,openvpn,Ipsecvpn,pptpvpn
11.添加去除广告的插件或者host
12.对未格式化磁盘进行扩容
13.添加samba局域网共享
14.配置静态路由
15.设置动态ddns
16.启动socks5代理
17.内网穿透



mwan:
-----------------
mwan3 ping的ip:
208.67.222.222
208.67.220.220


多线多拨：
https://www.jianshu.com/p/9b00b7cfbd88
https://www.right.com.cn/forum/thread-147109-1-1.html
https://blog.csdn.net/lvshaorong/article/details/61916525
https://www.polarxiong.com/archives/%E8%AE%B0%E4%B8%80%E6%AC%A1%E6%8A%98%E8%85%BE%E8%8B%8F%E5%B7%9E%E7%A7%BB%E5%8A%A8%E5%AE%BD%E5%B8%A6%E5%A4%9A%E6%8B%A8%E7%9A%84%E8%BF%87%E7%A8%8B.html
opkg update
opkg install mwan3 luci-app-mwan3    #多线多拨
mwan3 status

单线多拨：
https://blog.csdn.net/lvshaorong/article/details/70568791
http://www.360doc.com/content/18/0814/06/21175922_778090733.shtml
opkg update
opkg install kmod-macvlan mwan3 luci-app-mwan3    #单线多拨
mwan3 status


ip link add link eth1 name vth0 type macvlan
ifconfig vth0 up

ip link add link eth1 name vth1 type macvlan
ifconfig vth1 up

把上面的命令放入到开机启动中： /etc/rc.local


usb printer:
-----------------
opkg update
opkg install kmod-usb-printer
opkg install luci-app-p910nd
opkg install luci-app-usb-printer //或者(这个的界面友好,https://www.right.com.cn/forum/thread-142071-1-1.html)


定时更新ipk的脚本：
autoupgrade.sh
-----------------
http://www.dammit.hk/opkg-%E5%85%A8%E9%83%A8%E6%9B%B4%E6%96%B0
opkg update && opkg list-upgradable | awk -F ' - ' '{print $1}' | xargs opkg upgrade > /tmp/upgrade.log

https://cokebar.info/archives/930
#!/bin/sh
opkg update
for ipk in $(opkg list-upgradable | awk '$1!~/^kmod|^Multiple/{print $1}'); do
  opkg upgrade $ipk
done



ss重连接脚本：
ss_watchdog.sh
-----------------
https://cokebar.info/archives/850
#!/bin/sh

LOGTIME=$(date "+%Y-%m-%d %H:%M:%S")
wget --spider --quiet --tries=1 --timeout=10 https://www.facebook.com/
if [ "$?" == "0" ]; then
	echo '['$LOGTIME'] No Problem.'
	exit 0
else
	wget --spider --quiet --tries=1 --timeout=10 https://www.baidu.com/
	if [ "$?" == "0" ]; then
		echo '['$LOGTIME'] Problem decteted, restarting shadowsocks.'
		/etc/init.d/shadowsocks restart >/dev/null
	else
		echo '['$LOGTIME'] Network Problem. Do nothing.'
	fi
fi


关闭led 路由器openwrt LED脚本
------------------------
https://blog.csdn.net/weixin_34034670/article/details/89770540
#!/bin/ash
for i in `ls /sys/class/leds`
do
cd /sys/class/leds
cd $i
echo 0 > brightness
done

保存为：/etc/rc.d/S99turnoffled
添加执行权限


添加cisco anyconnetc vpn
-----------------------
https://openwrt.org/docs/guide-user/services/vpn/openconnect
ocserv
luci-app-ocserv



去广告host
-----------
https://www.right.com.cn/forum/thread-336281-1-1.html

输入 cp /etc/hosts /etc/hosts.bak 备份原有 Hosts
输入 wget https://raw.githubusercontent.com/vokins/yhosts/master/hosts -O /etc/hosts --no-check-certificate 下载屏蔽广告 Hosts
输入 /etc/init.d/dnsmasq restart 重启 Dnsmasq 使 Hosts 生效
浏览器打开路由器管理页面，依次点击 [系统] → [计划任务]，在新的一行填写 0 4 * * * wget https://raw.githubusercontent.com/vokins/yhosts/master/hosts -O /etc/hosts --no-check-certificate && /etc/init.d/dnsmasq restart # 每天4点自动更新 Hosts

另去广告插件，效果不太好：
KoolProxyR plus+、广告屏蔽大师plus+、AdGuard Home


openwrt对未格式化磁盘进行扩容
-----------------------
https://blog.csdn.net/ls0111/article/details/128769859
https://forum.openwrt.org/t/howto-resizing-root-partition-on-x86/140631
https://blog.kobin.cn/blog/network/n2/1603.html

这里以x86 squashfs系统为例：
opkg update
opkg install lsblk fdisk losetup f2fs-tools

# opkg install block-mount kmod-fs-ext4 kmod-usb-storage kmod-usb-ohci kmod-usb-uhci e2fsprogs fdisk

fdisk -l  #查看磁盘信息
fdisk /dev/sda  #查看对应未分区磁盘, 注意fdisk后参数是磁盘名称，是要根据实际情况填写
# 删除第2个分区，输入d
d
# 选择第2个分区，根据实际情况填写
2
# 输入n创建新分区
n
# 选择primary分区类型
p
# 分区编号选择2，一般默认即可
2
# 输入分区起始位置，该位置要与删除分区的起始位置相同,起始位置可以在fdisk -l中查看到
# 输入创建分区大小，例如+3G，也可以直接回车默认最大
# 不要删除标识！不要删除标识！不要删除标识！选择n！
n
# 输入w写入磁盘
w

fdisk -l #查看分区效果
这里不用重新设置losetup和resize2fs

#调整根文件系统的大小，一行一行执行
LOOP="$(losetup -n -O NAME | sort | sed -n -e "1p")"
ROOT="$(losetup -n -O BACK-FILE ${LOOP} | sed -e "s|^|/dev|")"
OFFS="$(losetup -n -O OFFSET ${LOOP})"
LOOP="$(losetup -f)"
losetup -o ${OFFS} ${LOOP} ${ROOT}
fsck.f2fs -y -f ${LOOP}
mount ${LOOP} /mnt
umount ${LOOP}
resize.f2fs ${LOOP}
#重启生效
reboot



openwrt添加samba局域网共享
-----------------------
https://doc.embedfire.com/openwrt/user_manal/zh/latest/User_Manual/openwrt/samba.html

opkg update
opkg install shadow-useradd luci-app-samba4

useradd samba #添加名为samba的用户
smbpasswd -a samba #为用户samba创建smb服务的密码

mkdir -p /mnt/smbfs #创建一个文件夹用于samba共享
chown -R samba:samba /mnt/smbfs #使用户samba获得文件夹权限

网络中添加配置


samba用户操作
------------

useradd samba #添加名为samba的用户

smbpasswd -a samba #为用户samba创建smb服务的密码

查看samba服务器中已拥有哪些用户：
pdbedit -L

删除samba服务中的某个用户
smbpasswd -x   用户名


配置静态路由：
-------------
https://cloud.tencent.com/developer/article/1631304
https://openwrt.org/docs/guide-user/network/routing/routes_configuration
network -static routers -add
     路由的网段                     路由的ip地址
lan, 192.168.3.0/24 255.255.255.0 192.168.2.207


设置动态DNS
----------
opkg update
opkg install ddns-scripts
opkg install ddns-scripts_xxxxx     //供应商指定的ddns包
opkg install wget ca-certificates
opkg install curl ca-bundle


设置为socks5 server
-----------------
opkg install socksify
opkg install srelay 3proxy goproxy


sockd
-------
http://www.inet.no/dante/doc/1.4.x/config/server.html
opkg update
opkg install sockd


vim /etc/sockd.conf
-----------------
internal: eth0 port = 1080
external: eth0

socksmethod: username

user.unprivileged: nobody
user.privileged: root

client pass {
from: 0.0.0.0/0 to: 0.0.0.0/0
log: error
}

socks pass {
from: 0.0.0.0/0 to: 0.0.0.0/0
command: connect
log: error
socksmethod: username
}

运行：
sockd -D
可以把此命令写入到开机命令中去

加入开机启动项：
/etc/init.d/中加入脚本 vim sockd：

#!/bin/sh /etc/rc.common
START=95
STOP=15

start() {
    sockd -D
}

创建软连接，加入到/etc/rc.d目录
> /etc/init.d/sockd enable
启动
> /etc/init.d/sockd start



用microsocks
------------
这个里面有microsocks的包
https://github.com/xiaorouji/openwrt-passwall/releases/download/4.63-5/passwall_packages_ipk_x86_64.zip

命令直接执行
> microsocks -p 都口号 -u 用户名 -P 密码 &>/dev/null &

加入开机启动项：
/etc/init.d/中加入脚本 vim socks5：

#!/bin/sh /etc/rc.common
START=95
STOP=15

start() {
microsocks -p 1788 -u open -P socks5 &>/dev/null &
}

创建软连接，加入到/etc/rc.d目录
> /etc/init.d/socks5 enable
启动
> /etc/init.d/socks5 start

也可以直接把开机启动命令放/etc/rc.local


内网穿透
-----------
DingTalk Design CLI、花生壳、Natap 等工具


花生壳
https://service.oray.com/question/20547.html
https://hsk.oray.com/download
安装软件程序：
opkg install phtunnel.ipk

安装界面程序：
opkg install phtunnel-luci-app.ipk

///////////////////////////////////////////////////////////////////  ssr结束



///////////////////////////////////////////////////////////////////  linux操作

linux常用：
--------------------------------

root@captain:~#
cat /etc/shadowsocks.json     // ss json配置
vim /etc/shadowsocks.json

!cat  :上次的cat命令
cat id_rsa.pub | pbcopy       // copy 对应文件内容

查看ssh的服务是否开启
netstat -lntp | grep -i sshd
获取sshd
apt-get install openssh-server  //apt, wget:下载

/etc/init.d/shadowsocks start   // start ss
/etc/init.d/shadowsocks restart  // 重启ss
/etc/init.d/iptables stop    //关闭防火墙（iptables）
service firewalld stop     // 关闭防火墙


查看系统版本：
------------
lsb_release -a

cat /etc/issue


操作系统位数：
--------------
getconf LONG_BIT   #输出64即为64位
uname -a   #输出x86_64则为64位
arch  #输出x86_64则为64位


查看内存:
--------
free
free -m
cat /proc/meminfo


查看cpu使用率：
------------
top

Mem: 93228K used, 1945084K free, 728K shrd, 18592K buff, 14824K cached
CPU:   0% usr   0% sys   0% nic  99% idle   0% io   0% irq   0% sirq

cpu状态：
1、0.0% us — 用户空间占用CPU的百分比。
2、0.1% sy — 内核空间占用CPU的百分比。
3、0.0% ni — 改变过优先级的进程占用CPU的百分比
4、99.8% id — 空闲CPU百分比
5、0.0% wa — IO等待占用CPU的百分比
6、0.0% hi — 硬中断（Hardware IRQ）占用CPU的百分比
7、0.0% si — 软中断（Software Interrupts）占用CPU的百分比
8、0.0% st— 实时百分比


查看cpu型号
-----------
cat /proc/cpuinfo



查看文件属性：
-------------
> ll
> ll /etc/sh    // 类似ls


> du
-------------------
查看文件的可视大小：-h可视， -a:所有
> du -ah :个别文件的值
> du -sh :加和的总值


> virsh list --all: //查看运行的虚拟机


> curl
------------
https://www.cnblogs.com/zxqblogrecord/p/8900219.html
获取页面内容
curl http://www.baidu.com
显示http头
curl -I http://www.baidu.com
显示头和内容
curl -i http://www.baidu.com
内容输出到本地
curl https://www.baidu.com > index.html
curl 自带的 -o/-O 选项将内容保存到文件中。
-o（小写的 o）：结果会被保存到命令行中提供的文件名
-O（大写的 O）：URL 中的文件名会被用作保存输出的文件名
curl -o index.html https://www.baidu.com
curl -O http://www.hbygxh.org/html/2018/gyzxx_0309/857.html #结果，文件名为857.html 的文件里保存着内容
指定多个链接
curl -O http://www.baidu.com/page/2/ -O http://www.baidu.com/page/3/
-L获取重定向的内容
curl -L http://codebelief.com
-A自定义agent
curl -A "Mozilla/5.0 (Android; Mobile; rv:35.0) Gecko/35.0 Firefox/35.0" https://www.baidu.com
-H自定义header
curl -H "Referer: www.example.com" -H "User-Agent: Custom-User-Agent" http://www.baidu.com
-H可以传递header
curl -H "Cookie: JSESSIONID=D0112A5063D938586B659EF8F939BE24" http://www.example.com
-c可以save cookie
curl -c "cookie-saved-name" http://www.example.com
-b发送自定义cookie
curl -b "JSESSIONID=D0112A5063D938586B659EF8F939BE24" http://www.example.com
-b可以读取本地cookie
curl -b "cookie-local-name" http://www.example.com
-d 发送post
在使用 -d 的情况下，如果省略 -X，则默认为 POST 方式
curl -d "userName=tom&passwd=123456" http://www.example.com/login
get请求
curl -d "somedata" -X GET http://www.example.com/api
get也可以直接用-G
curl -d "somedata" -G http://www.example.com/api
从文件中读取 data
curl -d "@data.txt" http://www.example.com/login

带cookie登录
curl -c "cookie-login" -d "userName=tom&passwd=123456" http://www.example.com/login
curl -b "cookie-login" http://www.example.com/login



shell sleep：
-------------------
https://blog.csdn.net/tiwoo/article/details/51094913
#!/bin/sh
command 1
output=`command 2`
command 3


ip地址：
-------------------
ip addr  :ip地址。ifconfig    // mac
curl ip.cn : 当前ip地址
curl cip.cc

设置终端番墙
-----------
https://double-c.github.io/2018/10/17/mac-ss-cmd/index.html
http://locke.ink/post/Mac-Ternimal-Shadowsocks-fanqiang-kexueshangwang/


vim .zshrc
开启控制台翻墙
alias proxy='export all_proxy=socks5://127.0.0.1:1086'
alias unproxy='unset all_proxy'


> watch
-------------------
http://www.cnblogs.com/peida/archive/2012/12/31/2840241.html
watch -n 1 -d netstat -ant  // 每隔1s高亮显示网络链接数的变化情况
切换终端: ctrl + x
退出watch: ctrl + g
watch -n 1 -d 'pstree|grep http' // 每隔一秒高亮显示http链接数的变化情况,监听内容用引号括起来
watch 'netstat -an | grep:21 | \ grep<模拟攻击客户机的IP>| wc -l'  // 实时查看模拟攻击客户机建立起来的连接数
watch -d 'ls -l|grep scf'  // 监测当前目录中 scf' 的文件的变化
watch -n 10 'cat /proc/loadavg' //10秒一次输出系统的平均负载


wangsirlemon@c77:~$ watch -h

Usage:
 watch [options] command

Options:
  -b, --beep             beep if command has a non-zero exit
  -c, --color            interpret ANSI color and style sequences
  -d, --differences[=<permanent>]
                         highlight changes between updates
  -e, --errexit          exit if command has a non-zero exit
  -g, --chgexit          exit when output from command changes
  -n, --interval <secs>  seconds to wait between updates
  -p, --precise          attempt run command in precise intervals
  -t, --no-title         turn off header
  -x, --exec             pass command to exec instead of "sh -c"

 -h, --help     display this help and exit
 -v, --version  output version information and exit


> netstat
-----------------------
tcp：电话
udp: 发短信

netstat -tlun ：查看监听的端口
netstat -an  ：查看正在建立连接的端口
netstat -rn  :查看网关地址

https://linux.cn/article-2434-1.html

netstat -tnlup | grep 端口号         //查看tcp,udp端口和进程业务
netstat -lntp          //查看正在监听端口情况
netstat -nltp
netstat –apn | grep 8080  // 8080为端口号
netstat -lntpu
netstat -ltpe   //tcp监听的拥有者
netstat -rn     //禁用路由解析的路由信息, -r为路由,查看本机路由表
netstat -i     //打印网络接口信息
netstat -atnp | grep ESTA  //获得active状态的链接
watch -d -n0 "netstat -atnp | grep ESTA"  //配合watch命令监听active状态的链接

端口号位1024以上的端口都是随机分配的端口

/*
netstat - 打印网络连接、路由表、连接的数据统计、伪装连接以及广播域成员。
-a: 所有
-u: udp
-t: tcp
-l: listen,正在监听
-n: 禁用域名解析，即：查找每个ip地址对应主机名
-p: 进程名pid
-e: 进程拥有者，相比查看进程，进程拥有者更有用 user ,
-ep: e一般配合p使用
note: -n, -e一起使用，user列的属性是用户的id号，不是用户名
-r: 打印内核路由信息
-i: 打印网络接口信息
-ie： i一般配合e使用，可以输出用户友好的信息,信息和ifconfig内容一致；
-c: 持续输出信息
-g: 输出ipv4,ipv6的多播组信息

service network restart :重启网络服务
*/

mac:
sudo lsof -i -P | grep -i "listen"  #查看所有进程监听的端口

netstat -anp tcp | grep 80
lsof -i :80  #查看80端口
结束占用80端口的所有服务和进程：
lsof -P | grep ':80' | awk '{print $2}' | xargs kill -9

mac下使用netstat 命令区别于liunx
如果要查询tcp ,udp 协议的，必须加要加 tcp ,udp
netstat lnp tcp
netsta lnp udp

linux 下：
netstat lntp
netstat lnup

> ss
---------------
获取socket统计信息，输出跟netstat很像
类似还有 cat /proc/net/tcp

ss -ntulp
参数：
-t: tcp
-u: udp
-l: listen
-a: all
-n: number数字格式
-p: 显示pid
-m: 内存
-o: 计时器信息
-r: -resovle 把ip解释为域名，把端口解释为协议


> grep
-----------------------
cat vsftpd.conf | grep -v '^#'   // 查看xx.conf文件中首字符不是#的行

grep -v '^$' /etc/rsyslog.conf | grep -v '^#'
1、-v是grep排除的参数，例如查询除了包含ABC的行，例如cat a.txt|grep -v 'ABC'
2、^代表行首，$代表行尾。 ^$是空行的意思
3、^#表示首字母为#的行，linux里的文件，#号开头一般都是注释内容
4、grep -v '^$' /etc/rsyslog.conf | grep -v '^#'
查询/etc/rsyslog.conf文件，但是不包含空行和注释行
5、-n输出行号
6、--color==auto  搜索出的关键词用颜色显示
7、-i标识不区分大小写
grep -i multiuser /etc/inittab      grep是在文件的内容中查找，查找multiuser， -i是不区分大小写，

-q的参数意思是：静默安装，quiet的意思

> grep lili /etc/passwd
lili:x:502:502::/home/lisi:/bin/bash    显示lili的ID为502

8、grep ".*" testfile 搜索所有字符
9、grep "a\{n,m\}" testfile 匹配a字符n到m次
10、grep "a\{n,\}"匹配至少n次
11、grep "a\{n\}"匹配n次
12、ls | grep  -n "a[b|d]b"  支持竖线
13、ls | grep  -n "^a\w"


grep正则表达式扩展
-----------------
https://www.cnblogs.com/pythonbz/p/6284190.html
-E, egrep
支持字符+,?
ls -a | grep -E "ab\w+"
ls -a | egrep  "abb+"    egrep不带高亮
ls -a | grep -E "a[d|c]"   egrep或者-E也支持竖线


> sed, awk, cut, xargs
---------------------------
https://blog.csdn.net/he643042156/article/details/53197516
adb shell ps | grep monkey
shell     13870 579   1905284 28952          0 7f9987c1c8 R com.android.commands.monke
adb shell ps | grep monkey | awk '{print $2}'| sed -n '1p'| cut -c 1-5 | xargs adb shell kill

sed '1d'删除第一行，展示其他行
sed '1!d'展示第一行
npm outdated | awk '{print $1}'|sed '1d'|xargs npm update

sed -n '2p' example.log  显示第二行
sed '/he/d' example.log  删除内容有he字符的行，这个是复制一个文件，然后删除，而不会删除原来的文件；

awk '{print $2}'是打印第2列的字符

echo $PATH| cut -d ':' -f 1,3  以：进行域分割，然后输出第1，第3个的域
/Library/Java/JavaVirtualMachines/jdk1.8.0_152.jdk/Contents/Home/bin:/usr/local/opt/python@2/bin

cut -d
cut -c 1-5 取字符串的第1到第5个字符串
cut -c 2- 取字符串第2个到之后的字符串

ps -ef | awk '{print $2}'| sed -n '1, 6p'  #展示1-6行pid
sed -n '5,10p' filename 查看文件5到10行内容



> xargs
-----------------------
http://man.linuxde.net/xargs
http://www.cnblogs.com/wangqiguo/p/6464234.html
-n
cat test.txt | xargs 多行输出为单行
cat test.txt | xargs -n3 每行为3个的多行，-n表示多行

-d
echo "nameXnameXnameXname" | xargs -dX  -d为自定义字符界，结果为name name name name
echo "nameXnameXnameXname" | xargs -dX -n2  的结果为：
name name
name name

-E/e
echo '11 22 33 44 55' | xargs -E '33' echo
输出:(-E或者-e,'33'以前的参数，不能与-d混用，不然无效)
11 22

-p
adb shell ps | grep "worker"|xargs -p adb shell kill  -p表示确认，输入y才继续执行，否则不执行
echo '11@22@33' | xargs -p -d '@'  echo

-I {}
复制所有图片文件到/data/images 目录下:
ls *.jpg | xargs -n1 -I cp {} /data/images

rm删除多文件，可能有错误信息，用xargs去避免，xargs -0将\0作为定界符。
find . -type f -name "*.log" -print0 | xargs -0 rm -f
统计一个源代码目录中所有php文件的行数：
find . -type f -name "*.php" -print0 | xargs -0 wc -l
查找所有的jpg 文件，并且压缩它们：
find . -type f -name "*.jpg" -print | xargs tar -czvf images.tar.gz
下载一个文件的所有连接
cat url-list.txt | xargs wget -c

-0
-0表示以 '\0' 为分隔符，即是在结尾追加'\0'，在一行中显示，一般与find结合使用
find . -name "*.txt"
输出：
./2.txt
./3.txt
./1.txt

find . -name "*.txt" -print0
输出：
./2.txt./3.txt./1.txt

删除文件路径中有空格的文件，比如a 3.txt, gg 4.txt, 因为空格会被rm拆分为两个两个文件。我们用\0来追加在字符的后面
find ./desktop/test -name '*.txt' -print0 | xargs -0 rm

find /Users/captain/Desktop/test -name '*.txt'|cut -c 29- |xargs  echo
输出
arg1.txt arg2.txt arg3.txt

xargs当做参数传递：
1.kill `ps -ef | grep 'ddd'`
2.for procid in $(ps -aux | grep "some search" | awk '{print $2}'); do kill -9 $procid; done
3.ps -ef | grep 'ddd' | xargs kill
xargs命令可以通过管道接受字符串，并将接收到的字符串通过空格分割成许多参数(默认情况下是通过空格分割) 然后将参数传递给其后面的命令，作为后面命令的命令行参数


ps查看进程：
-----------------------
https://www.cnblogs.com/liuzhengliang/p/4609632.html

1、ps 命令用于查看当前正在运行的进程。
grep 是搜索
例如： ps -ef | grep java
表示查看所有进程里 CMD 是 java 的进程信息
-e显示所有进程，-f为全格式显示


管道命令：
----------
who | tr 'a-z' 'A-Z' > who.out          #who的内容转换为大写，并输出到who.out
cat test.sh|tr 'a-z' 'A-Z'>test.out     #test.sh的内容转换为大写，并输出到test.out,需要先把原文内容cat出来

tr命令：
----------
echo {1..100}|tr ' ' '+'|bc
的结果为5050
echo {1..100}可以生成1 2 3 4 ... 100
tr为替换字符,这儿把空格替换为+号
bc为linux的一个计算器

2、ps -aux | grep java
ps-aux 显示所有状态
ps -aux | grep xx
ps -aux | grep java，或者直接：
ps -aux | grep pid 查看


3. kill 命令用于终止进程
例如： kill -9 [PID]
-9 表示强迫进程立即停止
通常用 ps 查看进程 PID ，用 kill 命令终止进程


> top
-----------------------
信息比ps更全
man top


> ps
-----------------------
https://www.cnblogs.com/fnng/archive/2012/05/20/2510641.html
-aux
-a：显示所有用户的进程
-u：显示用户名和启动时间
-x：显示 没有控制终端的进程
-e：显示所有进程，包括没有控制终端的进程
-l：长格式显示
-w：宽行显示，可以使用多个w进行加宽显示
PID :　    　进程号
PPLD：　　 父进程的进程号
TTY ：　　  进程启动的终端
STAT ：　　进程当前状态（S休眠状态，D不可中断的休眠状态，R运行状态，Z僵死状态，T停止）
NI ：　　      进程优先级
TIME：　　   进程自从启动以后启用CPU的总时间
COMMAND/CMD：进程的命令名
USER：　　  用户名
%CPU：　　 占用CPU时间和总时间的百分比
%MEM：　　占用内存与系统内存总量的百分比


> kill
-----------------------
kill -l

关闭进程：
kill -s 9 [进程号]　　（强行关闭）
kill -9   [进程号]　　（强行关闭）

重启进程：
kill -1  [进程号]　　（重启进程）
# kill -1 3567 　　 重启PID为3567的进程

关闭图形程序：

关闭图形程序： xkill
当你在终端下输入这个命令时，你的鼠标会变成一个小叉子，你只去点你想要关闭的窗口就可以关闭了

其它：
结束所有进程：    killall
查找服务进程号：  pgrep  [服务名称]
关闭进程：       pkill    [进程名称]



启动和关闭服务：
-----------------------
启动服务：(sudo下：)  https://www.cnblogs.com/Berryxiong/p/6193281.html
1.service+服务名称 + start/stop/restart     对服务进行启动
2.直接执行某个服务自己的管理脚本 + start/stop/restart

NO.1:
[berry@berry:practice] service vpnagentd status
vpnagentd is stopped
[berry@berry:practice] sudo service vpnagentd start
Starting up Cisco AnyConnect Secure Mobility Client Agent
[berry@berry:practice] service vpnagentd status
vpnagentd (pid 7000) is running
[berry@berry:practice] service vpnagentd restart
Shutting down Cisco AnyConnect Secure Mobility Client Agent
Starting up Cisco AnyConnect Secure Mobility Client Agent
[berry@berry:practice] service vpnagentd status
vpnagentd (pid 7020) is running


NO.2:
/etc/init.d/vpnagentd start
/etc/init.d/vpnagentd stop
/etc/init.d/vpnagentd restart


linux下：
/etc/rc.d/init.d/httpd start
service http start  // 红帽系统的专用

源码包用service管理
RPM包只能用绝对路径启动服务

停止apache2服务
service apache2 stop



> df
查看磁盘空间占用情况：
-----------------------
df
df -lh :可视图看大小
df -h :可视图看大小
df -ah: 全部文件系统的使用情况
df -i: 显示inode信息
df -k: 以字节显示区块的占用情况
df -m: 以MB来显示文件的系统信息
df -T: 查看文件类型-type
df -t ext4: 只查看ext4这种文件类型
df -x ext4: 查看排除ext4类型外的其他类型文件
df -T -x ext4
df -T -t ext4
df --help:


> scp
-----------------------
1、从服务器上下载文件
scp username@servername:/path/filename /var/www/local_dir（本地目录）

 例如scp root@192.168.0.101:/var/www/test.txt  把192.168.0.101上的/var/www/test.txt 的文件下载到/var/www/local_dir（本地目录）


2、上传本地文件到服务器
scp /path/filename username@servername:/path

例如scp /var/www/test.php  root@192.168.0.101:/var/www/  把本机/var/www/目录下的test.php文件上传到192.168.0.101这台服务器上的/var/www/目录中


3、从服务器下载整个目录
scp -r username@servername:/var/www/remote_dir/（远程目录） /var/www/local_dir（本地目录）

例如:scp -r root@192.168.0.101:/var/www/test  /var/www/


4、上传目录到服务器
scp  -r local_dir username@servername:remote_dir
例如：scp -r test  root@192.168.0.101:/var/www/   把当前目录下的test目录上传到服务器的/var/www/ 目录



ftp服务器搭建：
-----------------------
也可见：onenote笔记 /linux/ftp
win:  https://blog.csdn.net/EXLsunshine/article/details/29181465
linux:  http://www.cnblogs.com/chenmh/p/5365274.html
        https://www.jianshu.com/p/4f988e70e85b
centos:  https://blog.csdn.net/zyw_java/article/details/75212608
默认启动端口为21：

****安装ftp****
which vsftpd #检测是否已经安装vsftpd
sudo apt-get install vsftpd
或者：
yum install -y vsftpd

netstat -lntp | grep 21  // ftp启动后都在21端口监听

此时ftp已经可以访问了： ftp://35.234.7.119

****更改启动状态****
sudo service vsftpd start #开启ftp服务
service vsftpd status #查看FTP的状态
sudo service vsftpd stop #停止ftp服务
sudo service vsftpd restart #重启ftp服务
sudo /etc/init.d/vsftpd restart #倘若上面的不行就使用路径的形式直接执行
sudo pkill vsftpd #有时候停止失败就干掉吧


wangsirlemon@c77:/$ cat /etc/vsftpd.conf | grep -v '^#'
listen=NO
listen_ipv6=YES
anonymous_enable=NO   #允许匿名用户
local_enable=YES   #允许使用本地账号登录
dirmessage_enable=YES
use_localtime=YES
xferlog_enable=YES
connect_from_port_20=YES
secure_chroot_dir=/var/run/vsftpd/empty
pam_service_name=vsftpd
rsa_cert_file=/etc/ssl/certs/ssl-cert-snakeoil.pem
rsa_private_key_file=/etc/ssl/private/ssl-cert-snakeoil.key
ssl_enable=NO


root@c77:~# useradd ftpuser  //创建一个用户
root@c77:~# usermod -s /sbin/nologin ftpuser  // 限制该用户只能ftp服务器访问，不能直接登录服务器
root@c77:~# passwd ftpuser   // 设置用户的访问密码
Enter new UNIX password:
Retype new UNIX password:
passwd: password updated successfully
root@c77:~# mkdir -p /data/ftp/pub      // 在/data中创建相关的目录,/data/ftp 为主目录, 该目录不可上传文件;/data/ftp/pub 文件只能上传到该目录下
root@c77:~# echo "Welcome to wangsirlemon FTP service." > /data/ftp/welcome.txt  //创建登录欢迎文件
root@c77:~# chmod a-w /data/ftp && chmod 777 -R /data/ftp/pub   // 设置访问权限
root@c77:~# usermod -d /data/ftp ftpuser  // 设置为用户的主目录



查看用户
----------
查看用户
cat /etc/passwd

查看用户组
cat /etc/group

查看当前活跃的用户列表
w

#对于 cat /etc/passwd 的替换（cat的信息tai杂乱）
cat /etc/passwd|grep -v nologin|grep -v halt|grep -v shutdown|awk -F":" '{ print $1"|"$3"|"$4 }'|more


删除用户
--------
删除linux某个用户
userdel   用户名

删除linux中某个用户所有信息
userdel -r  用户名


> tee
--------
ls | tee /Users/captain/Desktop/i.txt
ls的内容输出并写到i.txt中（默认会覆盖）
-a参数会追加


> lsof
-----------------------
http://www.cnblogs.com/peida/archive/2013/02/26/2932972.html

lsof: 列出当前系统打开的文件的工具
lsof [参数][文件]   // root用户执行
lsof -n | grep deleted  // 查看已经删除的文件，空间有没有释放，没有的话kill掉pid   // kill -9 pid

-a 列出打开文件存在的进程
lsof -c mysql = lsof | grep myself
-c<进程名> 列出指定进程所打开的文件 command
-g  列出GID号进程详情
-d<文件号> 列出占用该文件号的进程
+d<目录>  列出目录下被打开的文件
+D<目录>  递归列出目录下被打开的文件
-n<目录>  列出使用NFS的文件
-i<条件>  列出符合条件的进程。（4、6、协议、:端口、 @ip ）
lsof -p 1       // 通过某个进程号显示该进行打开的文件
lsof -p 1,2,3   // 列出多个进程号对应的文件信息
lsof -p ^1      // 列出除了某个进程号，其他进程号所打开的文件信息
-p<进程号> 列出指定进程号所打开的文件 pid:
-u  列出UID号进程详情 user
-h 显示帮助信息
-v 显示版本信息
lsof -i: 端口号,列出所有的网络连接
lsof -i tcp: 列出所有tcp 网络连接信息
lsof -i udp: 列出所有udp 网络连接信息
lsof -i :3306: 列出谁在使用某个端口
lsof -i udp:55: 列出谁在使用某个特定的udp端口
lsof -a -u root -i: 列出某个用户的所有活跃的网络端口
lsof -N: 列出所有网络文件系统
lsof -u: 域名socket文件
lsof -g 5555: 某个用户组所打开的文件信息
lsof -d description(like 2): 根据文件描述列出对应的文件信息
例如： lsof  -d  txt      lsof  -d  1     lsof  -d  2
// 0表示标准输入，1表示标准输出，2表示标准错误，从而可知：所以大多数应用程序所打开的文件的 FD 都是从 3 开始
lsof -d 2-3     // 根据文件描述范围列出文件信息
lsof -c sshd -a -d txt     // 列出COMMAND列中包含字符串" sshd"，且文件描符的类型为txt的文件信息
lsof -i 4 -a -p 1234    // 列出被进程号为1234的进程所打开的所有IPV4 network files
lsof -i @peida.linux:20,21,22,25,53,80  -r  3
// 列出目前连接主机peida.linux上端口为：20，21，22，25，53，80相关的所有文件信息，且每隔3秒不断的执行lsof指令




/////////////////////////////////////////////////////////////////// 重拾linux

linux服务器踩点网站：
www.netcraft.com

必须分区：根分区，swap分区（最大为内存的2倍）
推荐分区：boot分区（200M左右）
给每个分区要分配挂载点
/dev/hd
/dev/sd
/dev/cdrom,sr0
/dev/fd：软盘
/dev/lp：打印机
/dev/usb/lp： usb打印机
/dev/mouse

ifconfig eth0 192.168.2.223 //配置eth0的ip

/bin/
/sbin/
/usr/bin/
/user/sbin/：超级用户
/boot/：启动文件
/dev/：设备文件
/etc/：配置文件
/home/
/lib/: 系统调用的函数库保存位置
/lost+found/:系统以外崩溃和关机，产生的碎片, fsck工具
/mnt/：挂载目录
/media/：挂载目录
/mnt/：挂载目录
/misc/：挂载目录
/opt/：三方安装软件保存位置，但一般放在/usr/local目录中
/proc/:虚拟文件系统，cpu,filesystem
/sys/:虚拟文件系统，内核相关的信息
/root/:超级用户目录
/srv/:服务数据目录
/tmp/:最好每次开机把改目录清空
/usr/: 类似于windows中windows目录
/var/:缓存，日志，

服务器：
1.不关机，只能重启，重启时应该关闭服务
2.访问高峰运行时，不要运行高负载命令
3.远程配置防火墙的时，不要把自己踢出服务器
4.ssh服务一般在22端口运行
5.密码规范并定期更新
6.合理分配权限
7.定期备份重要数据和日志


mkdir -p /tmp/little/bodu /tmp/little/cang: -p可以连续创建不存在的目录,可以连续跟进多个目录
mkdir -p tt/tt1
cd, pwd
..上一级目录，.是当前目录
rmdir:  删除空目录 (windows中的del )

cp -rp /tmp/bb  /tsd/kh:
-r为复制目录, -p为复制文件的属性，也可以同时复制多个目录；复制目录同时可以更名
mv 源 目的: 更名

清除屏幕： ctrl + r或者clear
rm -rf


查看文件：
---------------
touch "program files":创建文件最好不要空格，有空格则用引号引起来
nano:
cat -n
tac xx:倒序查看
more xx.txt:,q退出，只能往下翻，不能往回翻
less xx.txt:查看内容，也可以用向上，下，pageup,pagedown来查看，/来搜索关键词跟vi类似，q退出,n匹配下一个字符
head -n 10 xx.txt:前10行：默认查看10行
tail -n 7 xx.txt:后面10行:默认查看10行; -f:动态显示文件末尾内容
printenv
emacs
nano

locate .profile : 定位文件
df -lh
lsb_release -a
free -h:查看内存信息


> shutdown:
---------------
shutdown now  立刻关机
shutdown +5   5分钟后关机
shutdown 23:10  设置系统在23点10分时关机
shutdown -r now  立刻关闭系统并重新启动

shutdown -c :取消前一个关机命令
shutdown -h :关机
shutdown -r :重启    推荐使用shutdown 来重启

halt       关机
poweroff   直接断电
init 0     这些都是关机命令

shutdown now  立刻关机
shutdown +5   5分钟后关机
shutdown 23:10  设置系统在23点10分时关机
shutdown -r now  立刻关闭系统并重新启动


> reboot:
----------------
reboot  -f：强制重新开机，不调用shutdown指令的功能；
reboot  -i：在重开机之前，先关闭所有网络界面；
reboot  -n：重开机之前不检查是否有未结束的程序；
reboot  -w：仅做测试，并不真正将系统重新开机，只会把重开机的数据写入/var/log目录下的wtmp记录文件
init 6 :重启

openwrt关机命令： poweroff

系统运行级别：
---------------
cat /etc/inittab
0  关机
1  单用户（通win的安全模式，启动最小的服务）
2  不完全多用户，不含NFS（网络文件系统）服务，类似：文件共享
3  完全多用户
4  未分配
5  图形界面
6  重启

id:3:initdefault:     //修改系统默认的运行级别
runlevel              //查询系统运行级别
wangsirlemon@c77:~$ runlevel
N 5                   // N为上一次运行的级别，N标识null, 5表示当前的运行级别


> grep
----------------
ls -al | more  且
ls -al && less  接着
lskk || pwd  或者


输入输出重定向：
-----------------
输出重定向：
ls -l /tmp > /tmp.msg   >  为写入
data >> /tmp.msg        >> 为追加

输入重定向:
wall < /etc/motd 将motd文件信息进行广播

错误的输出重定向：
cp -R /usr /backup/usr.bak 2 >/back.error  将拷贝的错误信息存入到/back.error中


> file:
--------------------
判断文件类型
file test.test


> vi/vim
------------------------------
https://www.cnblogs.com/yangjig/p/6014198.html


visual模式：
-------------
按v/V键从normal模式进入；
使用j,k,h,l 或者方向箭头进行选择，9k或者9方向箭头移动9行，其他依次类推
ggVG 选中全部的文本， 其中gg为跳到行首，V选中整行，G末尾

h:左移动一位 j:下一行，k上一行，l右移一位
$ 跳转到行尾
0 跳到行行首
gg为跳到最开始第一行第一位
G末尾
:10 跳转到第10行

Ctrl + v   从光标当前位置开始，选中光标起点和终点所构成的矩形区域，再按一下Ｃtrl + v结束。

选中之后可以进行：
d删,
y复制,
ctrl+v粘贴系统剪切板
p粘贴,（不选中，默认一行）
"+y    复制到系统剪贴板(也就是vim的+寄存器）
"+p   从系统剪贴板粘贴
I  多行输入，按Esc生效


多行输入：
ctrl + v选择块，I进入编辑模式，输入字符，按esc生效

删除7-19行：
:7,19d

删除行最前面注释符号：
ctrl+v选中行头，按x进行删除


insert模式：
-------------
i :当前字符追加
o :下面另起一行
O :上面另起一行
a :当前字符后追加
A :当前行末追加
s :删除当前字符并进入insert
S :删除当前行并进入insert
:w filename  另存为
:wq!  文件所有者和root用户可以使用
:q!  丢弃所有修改并退出
:e! 丢弃所有修改并重新载入该文件
ZZ :保存当前文件并退出vim



光标定位:
--------
H,M,L  跳到第一行，中间行，结尾行
h,j,k,l,
9k,12j
使用j,k,h,l 或者方向箭头进行选择
9k或者9方向箭头移动9行，其他依次类推

0 行首 ^ 行首非空白字符, $行尾, 1$当前行, 2$下一行尾   ----单行
gg, G, XG   ---多行
(,)   ---句
{,}   ---段

fx 当前行上查找下一个字符x（向右方向）
Fx 当前行上查找下一个字符x（向左方向）
% 移动到与当前括号相匹配的括号
50% 跳到50%处， 90%跳到90%处
Ctrl + u/d/e/y   向上/下滚动半屏/一行

normal模式：
-------------
:set nu  行定位
:set number 行定位
:set ruler 右下角显示当前光标位置
:set nonu
:n      :定位到哪一行
nG      :定位到哪一行

ctrl + G 行定位
ctrl + g :统计行信息
g ctrl+g字数统计

u :撤销，U是撤销一行的全部操作
ctrl+r :重做
. :重复上一次动作


dd :删除行(准确为剪切),行内容
D :删除当前字符到行末的内容
33,56d  :删除33到56行
dG :删除当前行至文件尾的内容
dgg :删除当前行至文件头的内容
dd :剪切当前行
3dd :剪切当前行以下3行
p,P  :粘贴在当前光标所在行下或行上
pp :粘贴行

r : 改光标所在的字符
R : 一直处于替换模式,esc退出replace模式
x : 删除光标字符
X ：删除光标左边字符
S ：删除光标所在的列，并进入输入模式
J : 删除换行符


查找和替换：
---------------
https://harttle.land/2016/08/08/vim-search-in-file.html

/搜索   支持正则，/vim$ /vim\$
?搜索，往前搜
n:下一个；N:上一个  3n：后面第三个
注意查找回车应当用\n，而替换为回车应当用\r（相当于<CR>）
/Width\c  \c表示大小写不敏感，\C表示大小写敏感

set noignorecase 区分大小写

替换：
:s/foo/bar/g             :当前行
:%s/foo/bar/g            :全文，foo为搜索字符，bar为替换的值
:'<,'>s/foo/bar/g        :visual模式下选中的区域
:5,12s/foo/bar/g         :5到12行
:.,+2s/foo/bar/gci       :当前行.与接下来两行+2; g表示全局，c表示确认模式,i表示大小写不敏感，I表示大小写敏感

:1,4s/^/#/g         :为1-4添加#号
:1,4s/^#//g          :删除1-4行的行首的#号


replace with bar (y/n/a/q/l/^E/^Y)?
询问模式中：y表示替换，n表示不替换，a表示替换所有，q表示退出查找模式， l表示替换当前位置并退出。^E与^Y是光标移动快捷键


vim使用技巧：
--------------------------
:r /etc/issue/abc.txt       可以导入路径中abc的内容到光标的位置
:!which ls        在不退出vim的状况下查找命令,查找存放在哪一个目录下
:r !date          可以引入时间到文本中，可以直接导入命令的执行结果
:map ^P I#<esc>   定义快捷键，在每行的按ctrl+p可以用#注释这一行
:map ^B 0x        定义快捷键，在每行的按ctrl+b可以取消#注释
（格式：map 快捷键 触发命令）录制命令时，先按ctrl+v,再输入快捷键
同样可以定义快捷键插入邮箱等信息
:ab mymail sample@example.com     那么以后输入mymail回车之后都会用后面的邮箱地址进行替换（insert模式）


mac配置vim
--------------------------
https://blog.csdn.net/yuanmengong886/article/details/52914714
https://www.jianshu.com/p/9fa9bedc259a
主题：https://vimcolors.com/
cp  /usr/share/vim/vimrc  ~/.vimrc
cp  /usr/share/vim/vimrc  ~/.vimrc

.vimrc中是永久生效的，普通用户在用户名目录下，root用户在root用户下

"如下为自定义设置
set autoindent        " 自动对齐
set number            " 显示行号
set hlsearch          " 高亮搜索结果
set wrap              " 自动换行
set incsearch         " 立即高亮显示当前匹配
set ignorecase        " 忽略大小写
set smartcase         " 如果有一个大写字母，则切换到大小写敏感查找
set showmatch         " 高亮显示对应的括号
set ruler             " 设置右下坐标
set confirm           " 在处理未保存或只读文件的时候，弹出确认
set tabstop=4         " Tab键的宽度
set cursorline        " 突出显示当前行
set cursorcolumn      " 突出显示当前列
set clipboard+=unnamed   " 共享剪贴板

" 语法高亮
syntax on
set fileencodings=utf-8,gb2312,gbk,cp936,latin-1
set fileencoding=utf-8
set termencoding=utf-8
set fileformat=unix
set encoding=utf-8

" 配色方案
" default,delek,murphy
colorscheme default
" 指定配色方案是256色
set t_Co=256
set wildmenu

" C风格的对齐方式
set cindent
set completeopt=longest,menu

" 文件被改动时自动载入
set autoread
" 顶部底部保持3行距离
set scrolloff=3

" 代码补全
set completeopt=preview,menu
" 设置字体
set guifont=Menlo:h16:cANSI

"syntax enable         " 语法高亮
"set nu!               " 显示行号
"设置光标样式为竖线vertical bar
" Change cursor shape between insert and normal mode in iTerm2.app


> iptables
----------------------
防火墙：
http://man.linuxde.net/iptables
iptables -L -n -v: 查看已经添加的规则
INPUT链：处理输入数据包。
OUTPUT链：处理输出数据包。
PORWARD链：处理转发数据包。
PREROUTING链：用于目标地址转换（DNAT）。
POSTOUTING链：用于源地址转换（SNAT）。


> ln:
-----------------
link:
ln -s /etc/issue.bak issue.bak.soft
软连接：类似win的快捷方式,文件以l开头,权限为lrwxrwxrwx,所有用户可读写执行,字节大小为一个快捷方式大小，很小；

ln /etc/issue.bak issue.bak.hard
硬连接：就是程序的执行,类似拷贝，即使原文件删除，依然可以访问 ,不能跨分区，不能对目录进行使用，文件属性与原文件保持一致,类似cp -p，会同步更新：一般做备份用,


> echo:
-----------------
echo "xxx" > /etc/host   : 写入文件
echo "xxx" >> /etc/host   : 在文件末尾进行追加

wanghaitao:~$: echo -e 'ab\bc'       :\b删除, -e字符会对后面单引号的内容进行解释
ac
wanghaitao:~$: echo -e 'a\tb\tc\nd\te\tf'      :\t tab \n换行
a b c
d e f
wanghaitao:~$: echo -e '\x61\t\x62\t\x63\n\x64\t\x65\t\x66'
a b c
d e f
:\x表示16进制，后面可以跟两位16进制数； \0表示8进制,后面可以跟3位8进制数据

echo 'uname -a'   #单引号，只能单纯的输出
uname -a
echo `uname -a`   #uname -a 是个命令，所以要用反引号
Darwin wanghaitao-MacBook.local 17.7.0 Darwin Kernel Version 17.7.0: Thu Dec 20 21:47:19 PST 2018; root:xnu-4570.71.22~1/RELEASE_X86_64 x86_64


> echo
---------------------
echo $PATH
echo $env

临时：
新增环境变量（关闭终端失效）
export PATH=$PATH:新添加的路径
PATH=$PATH:新添加的路径

export PATH=$PATH:/usr/local/bin

删除环境变量（关闭终端失效）
重新赋值即可
echo $PATH
路径1:路径2:路径3:路径4
删除路径4：
export PATH=路径1:路径2:路径3

永久：
在当前shell中，如.bashrc中添加语句，然后source或者重启
export PATH=$PATH:新增路径


> ls -i:
-----------------
每一个文件有一个id, -i可以查看，如果是硬链接，则两个文件的id一致，更新一个文件的同时，也会更新另外一个文件


> chmod:
-----------------
chmod [ugoa][+-=][rwx] 文件目录： u:user, g:group, o:other, a:all
chmod g+w,o-r sys.bakfile: 同时操作多个权限
chmod g=rwx sys.bak
chmod 700 sys.bak ：一般操作习惯用数字来表示
532： r-x-wx-w-
chmod -R 700 /tmp: -R为递归，包括目录和目录中的文件

note:
1.删除一个文件不是对一个文件有写的权限，而是对这个文件所在的目录有写的权限
2.一般rx的权限是成对出现的；写和非写的权限
3.r: ls;                       cat/more/less/head/tail
  w: touch/mkdir/rmdir/rm;     vim/vi
  x: cd;                       script cmd


chmod u(g)+s /bin/touch :给/bin/touch命令 设置userid或者groupid


> chown:
----------------
-R：递归
改变所有者
useradd   谁创建这个文件，谁就是这个文件的拥有者，组的缺省值为创建者owner


> chgrp:
---------------
https://www.cnblogs.com/tan-y-q/p/10879133.html

改变所有者（chown）和用户组（chgrp）命令
chown xiaoming abc：改变abc的所有者为xiaoming
chgrp root abc：改变abc所属的组为root
chown root ./abc：改变abc这个目录的所有者是root
chown ‐R root ./abc：改变abc这个目录及其下面所有的文件和目录的所有者是root

改变所属组
groupadd


> umask:
---------------
$ :umask -S
u=rwx,g=rwx,o=rx    // linux默认文件创建权限：drwxr-xr-x
-rw-r--r--          // linux默认创建的文件是不具备执行的属性
$ :umask
0002    //777-002=755
umask 023        更改缺省值


> find:
-----------------
find[范围][条件]
find / -name init   //名字为init，为精准搜索， / 为根目录的意思
find /etc -name *init*    //文件名包含init，*为通配符，类正则
find /etc -name init？？？   //三个?代表三个字符，？为单个字符
find /etc -iname *init*    //-iname不区分大小写


find  /etc -size +204800
// 查找大于100M的文件，1个数据块为512字节，0.5k; 100M=102400KB=204800块，数据块为linux存储的最小字节；
// 数字前面+为大于，-为小于,等于前面没有符号

find /etc -user xxxx:按用户查找

find /etc -cmin -5  //查找5min内被修改过的文件和目录,-5为5分钟内，+5为超过5分钟
-amin   :访问时间access
-cmin   :文件属性changes
-mmin   :文件内容modify

find /etc -size +163840 -a -size -204800   : -a为连接符，且的关系；查找大于80M,小于100M的文件； -o为或

find /etc -name init -exec ls -l {} \;      :查看init文件并显示其详细信息
-exec/-ok为执行，-ok的区别是会询问是否操作，用y,n来确认    {} \;是固定格式,

find /etc -name init* -a -type d   :查看名字以init开头的目录
-type : 文件类型，f文件，d目录，l为链接文件

-inum: i节点查找
find . -inum 31531 -exec rm {} \; //以i节点查找然后删除，用于删除一些无法打印出来的奇怪字符的文件


> locate:
---------------------
updatedb    :更新文件数据库，除开/tmp等存放临时文件的目录，不会收录
locate xx.txt : 定期进行更新文件列表，如果需要查找刚刚创建的文件，则需要updatedb一下；find是现在立即查找‘
locate -i xx :-i表示不区分大小写


> which/whereis:
---------------------
$ which cp
/bin/cp  除了可以查看文件路径，还可以查看文件别名；/bin为普通权限，/sbin为root权限
alias   :查看别名
alias rm='rm -i'  :设置别名，当重启或者登陆后，别名被删除，永久生效需要在主目录下配置.bashrc
unalias 别名   :删除别名,

如果cp命令有一个别名，如果要使用自己本来的意义则前面加一斜杠 \cp

wangsirlemon@c77:~$ which cp
/bin/cp
wangsirlemon@c77:~$ whereis cp
cp: /bin/cp /usr/share/man/man1/cp.1.gz     //后面为帮助文档，帮助文档一般在/usr/share目录下


> man:
-------------
man ls
man date
man services: 查看配置文件的帮助信息；这儿不用输入绝对路径：/etc/services,输入配置文件名就可以了；
man查看文件,如果遇到命令和服务名字相同的，1为命令的帮助，5为配置文件的帮助,如果不输入数字则默认查看命令的帮助文档
~$ man 1 passwd
~$ man 5 passwd
~$ man passwd
~$ whereis passwd    ://列出了命令，服务，以及对应的帮助文档
passwd: /usr/bin/passwd /etc/passwd /usr/share/man/man5/passwd.5.gz /usr/share/man/man1/passwd.1ssl.gz /usr/share/man/man1/passwd.1.gz


> whatis:
--------------
简略查看帮助信息
wangsirlemon@c77:~$ whatis passwd
passwd (1ssl)        - compute password hashes
passwd (1)           - change user password
passwd (5)           - the password file
wangsirlemon@c77:~$ whatis ls
ls (1)               - list directory contents



> date:
--------------
date

date "+DATE: %Y-%m-%d%nTIME: %H:%M:%S"
#DATE: 2019-11-14
#TIME: 09:26:11

> apropos:
---------------
apropos services   :简略查看某个服务的帮助信息 //注意不用绝对路径


> --help:
---------------
touch --help


> info:
---------------
info info


> help:
---------------
help shell内置命令: ，如cd,umask
man cd/if/pwd: 可以查看内置的命令
help if
help umask


> history:
--------------
查看历史记录命令



查看当前用户
----------------
> who: 查看主机上的用户
> w: 查看当前用户 -----查看用户的详细信息，比who更详细
> whoami: 查看当前登录的用户是谁
> lastlog | head -n 5: 查看主机上的用户
> uptime :连续运行多长的时间


用户管理命令：
useradd yangmi
passwd yangmi  //root用户可以设置简单密码，普通用户不能设置简单的密码，管理员可以更改任何人的密码

$ who   //查看当前登录的用户； 登录终端，tty本地终端，pts远程终端，另外可以看到登录时间，还有登录的ip,没有则为本地
captain  console  Aug  6 08:56
captain  ttys000  Aug  6 14:36
captain  ttys001  Aug  6 17:26

wangsirlemon@c77:~$ who
wangsirlemon pts/0        2018-08-06 07:25 (182.150.28.13)

wangsirlemon@c77:~$ w
 09:30:25 up 6 days,  7:19,  1 user,  load average: 0.00, 0.00, 0.00
USER     TTY      FROM             LOGIN@   IDLE   JCPU   PCPU WHAT
wangsirl pts/0    182.150.28.13    07:25    1.00s  0.11s  0.00s w

//up通uptime，表示连续运行的时间，load average表示负载平均值，分别表示1min,5min,15min
//IDLE表示空闲多久了
//PCPU：cpu当前的占用时间
//WHAT: 当前CPU在执行什么命令



压缩和解压：
==============================
.gz        gzip        gunzip(gzip -d)
.tar       tar -cf     tar -xf
.tar.gz    tar-zcf     tar -zxf
.zip       zip -r      unzip
.bz2       bzip2       bunzip2
.tar.bz2   tar -cjf    tar -xjf
.rar       rar a filename *    unrar a filename.rar test


unzip -0 xx.zip -d path  //解压zip文件到制定目录

> gzip:
-----------------
.gz .zip(最古老的)

rm -rf *   ：删除当前目录下所有文件

gzip xx.tar  ：只能压缩文件,不能压缩目录，跟win不一样，且不保存原文件
gzip test.tar

解压缩：
gunzip  xxx.xx
gzip -d  xxx.xx


> tar:
-------------------------
压缩：
1.先用tar打包目录，再用gzip来打包
2.-z :打包和压缩一起做

tar -cvf 压缩后的名字.tar 目录    :-v表示详细信息，这个可以打包目录和文件,-c为打包的意思，-z就是打包和压缩一起做了
gzip  janpan.tar                :压缩janpan.tar，会生成一个压缩包

压缩：
tar -zcf janpan.tar.gz Japan : //打包和压缩一起做了,-v只能加在中间，不能加在末尾
tar -jcf janpan.tar.bz2 Japan  //用tar来压缩gz

解压：
tar -zxf xx.tar   :一般用这个命令比较多，不用显示详细信息
tar -zxf xx.tar.gz
tar -jxf janpan.tar.bz2   //用tar来解压gz


参数：
-x :解包
-c :打包
-f :指定解压文件
-z :打包/解包，压缩一起做
-v :详细信息
-j :打包成bzip2格式


.tar.xz格式：
tar xf


.tar.xz
------------------------
创建tar.xz文件：
只要先 tar cvf xxx.tar xxx/ 这样创建xxx.tar文件先，然后使用 xz -z xxx.tar 来将 xxx.tar压缩成为 xxx.tar.xz

解压tar.xz文件：
先 xz -d xxx.tar.xz 将 xxx.tar.xz解压成 xxx.tar 然后，再用 tar xf xxx.tar来解包。


> zip:
------------------------
win,linux,mac都兼容; 会保留原文件
zip [-r] [压缩后的文件名] [文件和目录]   : -r表示压缩目录；

unzip 文件目录名字  ：打包；zip文件也可以用tar来解压, 和进行压缩


> bzip2:
-------------------
gzip的升级，压缩率很高，大文件一般推荐这种
-k :相对于gzip多了一个-k的选项，意思是保留原文件

压缩：
bzip2 [-k] test.tar.gz  : //他是压缩一个打包好的文件，不是目录
tar -cjvf janpan.tar.bz2 Japan  //用tar来压缩gz

解压：
bunzip2 [-k] janpan.tar.bz2
tar -xjvf janpan.tar.bz2   //用tar来解压gz,只能解压tar压缩后的gz




.rar
--------
yum install rar
rar a filename *      //所有文件压缩为一个rar包，名为filename.rar
unrar a filename.rar test    // 将filename.rar文件解压到 ./test

centos7安装rar
wget --no-check-certificate  https://www.rarlab.com/rar/rarlinux-x64-621.tar.gz
tar -zxf rarlinux-x64-621.tar.gz
cd rar
make


网络管理命令：
===================================
域名解析：（把域名解析成一个ip）


> whois
-----------------
whois .baidu.com


> nslookup
-----------------
查询dns，解析结果,效果跟dig类似,
效果类似：ping/dig/host/nslookup来进行测试是否dns服务正常运行，
这里需要注意的一点是：
如果你本机使用了host，那么ping会先查询本机的/etc/hosts文件，然后才查询dns服务器；
而其他三个命令则是直接查询dns服务器，无视/etc/hosts的配置。

nslookup domain [dns-server]
nslookup facebook.com 8.8.8.8  //157.240.13.35
nslookup -vc facebook.com 8.8.8.8 // -vc是强制使用tcp来查询DNS服务器

或者直接输入nslookup
nslookup baidu.com    //域名
nslookup 220.181.57.216  //ip


强制dns服务器解析
dig @127.0.0.1 baidu.com
或nslookup baidu.com 127.0.0.1

> ping
查询dns响应时间以及稳定性
--------------------
ping 114.114.114.114


> arping
--------------------
brew install arping

查看ip的MAC地址及IP占用的问题, 类似ping,发送ARP报文
https://blog.csdn.net/wz_cow/article/details/80870876

查看某个IP的MAC地址
arping 192.168.131.155
arping www.salad.com


查看某个IP的MAC地址，并指定count数量
arping -c 1 192.168.131.155


查看某个MAC地址的IP，要在同一子网才查得到
arping -c 1 52:54:00:a1:31:89



> httping
--------------------
它不是发送ICMP请求，而是发送HTTP请求
http://www.360doc.com/content/16/0702/00/34585279_572396722.shtml
brew install httping

httping -g www.google.com
httping -l www.baidu.com
httping -K www.baidu.com
httping -g www.google.com -l -c 5 -Y

-g url： 测试的网址
-l ： 使用ssl连接
-c ： 跟ping一样，为请求数量
-K :  使用图形模式
-G ： GET（默认为HEAD）
-S :  将时间分开成连接和传输两部分显示
-Y :  启用颜色输出

> dig:
查询dns,解析结果，解析时间
--------------------
比nslookup好用
@<服务器地址>：指定进行域名解析的域名服务器；
-b<ip地址>：当主机具有多个IP地址，指定使用本机的哪个IP地址向域名服务器发送域名查询请求；
-f<文件名称>：指定dig以批处理的方式运行，指定的文件中保存着需要批处理查询的DNS任务信息；
-P：指定域名服务器所使用端口号；
-t<类型>：指定要查询的DNS数据类型；
-x<IP地址>：执行逆向域名查询；
-4：使用IPv4；
-6：使用IPv6；
-h：显示指令帮助信息。

dig www.facebook.com @8.8.8.8 +short  //通过指定DNS 8.8.8.8 来解析facebook的ip地址

dig +trace www.scnu.edu.com
// 跟踪域名解析； https://blog.csdn.net/a583929112/article/details/66499771
// https://blog.csdn.net/crazw/article/details/8986504
// https://blog.csdn.net/jiajiren11/article/details/80071312
当域名不存在的时候，返回一条SOA记录

dig www.baidu.com  // CNAME是别名；A是address,ip; NS是服务器的主机名;在AUTHORITY SECTION里面的服务器主机名，都会在ADDITIONAL SECTION里给出该主机的IP地址。
dig -t soa www.baidu.com  //解析域名的主从关系  soa:start of authority
dig youtube.com @8.8.8.8 +tcp    //使用tcp查询dns,但很多地方这种查询方式会被拦截
dig @192.168.10.1 -p 5353 google.com  //确认开启udp转发，ip为路由ip,端口为ss-tunnel端口

DNS 完美查询的流程就是： dnsmasq -> ChinaDNS -> ss-tunnel -> 国外DNS服务器(e.g: 8.8.8.8)。


> unixbench:
----------------
linux性能测试工具
https://teddysun.com/245.html
wget --no-check-certificate https://github.com/teddysun/across/raw/master/unixbench.sh
chmod +x unixbench.sh
./unixbench.sh


> hostname
----------------
查看主机hostname


> trace:
--------------------
源码位于：\kernel\trace\trace.c


> route -n:
--------------------
查看当前路由表


> 设置静态路由static router:
--------------------------
https://blog.csdn.net/csdn_T996/article/details/124111153
添加静态路由
route add -net 192.168.200.0/24 gw 192.168.190.1
删除静态路由
route del -net 192.168.200.0/24
添加默认网关
route add default gw 192.168.190.1
删除默认网关
route del default gw 192.168.190.1

查看网络信息
------------
netstat -alntpur
ping
ifconfig
ping -c 5 -i 0.5 192.168.190.1  #预设值为0.5s一次
nslookup


/etc/resolv.conf
-----------------
DNS配置信息，最多可以指定3个不同的，超过3个以上被忽略
nameserver 114.114.114.114
nameserver 19.168.190.1

/etc/hosts
--------------
主机网络映射文件
xx.xx.xx.xx  域名


> traceroute
-----------------------
http://man.linuxde.net/traceroute
traceroute www.baidu.com          // 默认参数为-q, 默认三次探测数据包向每个网关发送三个数据包，网关响应返回的时间，对于无法响应的结点，连接状态将显示为“*”

traceroute www.google.com

-d：使用Socket层级的排错功能；
-f<存活数值>：设置第一个检测数据包的存活数值TTL的大小；
-F：设置勿离断位；
-g<网关>：设置来源路由网关，最多可设置8个；
-i<网络界面>：使用指定的网络界面送出数据包；
-I：使用ICMP回应取代UDP资料信息；
-m<存活数值>：设置检测数据包的最大存活数值TTL的大小；
-n：直接使用IP地址而非主机名称； 禁用DNS解析，以ip格式输出数据。
-p<通信端口>：设置UDP传输协议的通信端口；
-r：忽略普通的Routing Table，直接将数据包送到远端主机上。
-s<来源地址>：设置本地主机送出数据包的IP地址；
-t<服务类型>：设置检测数据包的TOS数值；
-v：详细显示指令的执行过程；
-w<超时秒数>：设置等待远端主机回报的时间；
-x：开启或关闭数据包的正确性检验。

traceroute -q 4 www.58.com // 向每个网关发送四个数据包，网关响应返回的时间


> mtr, tracert:
--------------------
-n  不用主机解释
-c   发送多少个数据包
--report  结果显示，并不动态显示
mtr 35.187.145.66


通信命令：
write:
--------------------
write lingzhiling
给用户发信息，ctrl + D 结束，用户在线才能发信息,可以用w查看谁登陆了


> wall:
--------------------
(write all):发送广播信息
wall shengchao is a honest man!
给所有用户发信息，所有用户都能收到，包括自己。


> ping
-------------------
ping -c xxx
ifconfig

ifconfig eth0 192.168.2.223 //配置eth0的ip


> mail:
----------------
mail 用户: 发邮件，可以用户不在线,ctrl + D结束并发送
用户登陆，并输入mail可以查看邮件列表； 输入序列号查看邮件内容； 删除邮件：d 序列号；重查看邮件列表 h； 退出mail,q键
mail -s "help" root #给root用户发help的主题
echo -e 'Hello, I am '$USER ',The system version is here,please help me to check it,thanks!\n' `uname -a`|mail -s "help" root

> last, lastlog, history
----------------
last:查看所有用户的登陆信息
lastlog:知道每个用户(包括没有登录过的用户)的最后一次登陆的信息
lastlog -u uid(用户的uid):可以查看指定用户的信息


> setup:
---------------
在redhat系列的linux上面才可用，unix不能用


> mount:
---------------
mount [-t 文件系统] 设备文件名 挂载点
mkdir  /mnt/cdrom    :挂载的前一步一般会先在mnt目录下创建一个空目录
mount -t iso9660  /dev/sr0 /mnt/cdrom    ：光盘的系统一般都为iso9660
umount /dev/sr0    :退出挂载的目录，然后再执行卸载光盘


mkdir /mnt/cdrom
mount /dev/cdrom /mnt/cdrom
cd /mnt/cdrom


> logout:
-----------------
退出登录
服务器操作完或者远程登录后，一定要logout


> rpm,yum
------------------
一个为本地，一个为在线安装

1.先挂载安装镜像
2.进入目录：rpm -ivh xxxx.rpm
3.升级： rpm -Uvh xxxx.rpm
4.卸载： rpm -e  httpd(包名) //只写包名，不用写全名；不会卸载依赖
rpm -q httpd   //查看httpd安装没有，并列出信息
rpm -qa  //显示所有的安装包
rpm -qi httpd  // 显示安装包的详细信息
rpm -ql httpd   //显示安装的位置
rpm -V httpd   //校验指定的包中文件


安装：
[root@localhost ~]# rpm -ivh sudo-1.7.2pl-5.el5. 5.el5 .rpm    
-i  安装所选择的一个或多个软件包
-H  用“#”显示完成的进度
-q  查询软件包系统或所选择的一个或多个软件包
-e 删除所有选择的一个或多个软件包
-u 把一个已经安装好的软件包升级到新版本
-v 验证已安装或已选择的一个或多个软件包
[root@localhost ~]# rpm -ivh sudo   查询sudo软件包是否被安装
 
其他选项：
--excludedocs
不安装软件包中的文档文件
--prefix PATH
将软件包安装到由PATH指定的路径下
--test
只对安装时行测试，并不实际安装
--replacepkgs 
覆盖安装，假如我们不小心删除掉了安装包里的某些软件，这个参数就非常有用了
-U 
在参数中加入大写的U可以对软件进行升级
[root@localhost ~]# rpm -Uvh sudo-1.7.2pl-5.el5. 5.el5 .rpm
 
卸载：
注意：如果其它软件包有依赖关系，卸载时会产生提示信息，可使用--nodeps强行卸载
[root@localhost ~]# rpm -e --nodeps sudo   但是一般不推荐这样用，我们可以先卸载依赖的软件包然后再卸载。


本地和在线安装包都可以用yum 来进行管理


> yum:
---------------------------
readhat系列(centos)有setup命令
service network restart :重启网络服务
yum list：列出安装
yum -y update 包名：更新
yum -y remove 包名：卸载
yum grouplist
yum groupinstall 组名：
yum groupremove 组名：
yum install          安装
yum check-update     检测升级
yum update           升级
yum list             软件包查询
yum info             软件包信息
yum remove           卸载
yum -help 
man yum              帮助 

源码包
保存位置：/usr/local/src
安装位置：/usr/local

上传文件在win中往linux传： wincp软件(ssh + scp)
./configure 软件配置与检查

> make
------------------
make :编译
make install :编译安装
make clean :清空编译文件


> webmin
----------------
webmin是linux中的图形文件管理后台



用户组：
---------------
/etc/passwd
/etc/shadow是存放用户密码的（密文形式存放）

UID:
0:超级用户
1-499：系统用户(伪用户)
500-65535：普通用户

/home/用户名:普通用户
/root/：超级用户

/bin/bash/    :shell
/bin/touch    :touch



切换用户：
---------------------
su root             临时提权到root用户
su – root           切换到root用户
su -- lili          切换到lili用户
su -- root          切换到root用户

su -- wangsirlemon

setUID=4
# chmod  u+s /bin/touch       给touch设置一个UID
# chmod  4755 /bin/touch
# chmod  u-s /bin/touch       取消UID
# chmod  755  /bin/touch

setGID=2
[root@localhost ~]# chmod  g+s /bin/touch
[root@localhost ~]# chmod  2755  /bin/touch

站着位：
t=1
粘着位的授权方式：
[root@localhost test]# chmod  o+t abc
[root@localhost test]# chmod  1755  abc



/proc
---------------------
这个目录在内存中，所有进程都动态存放在这个目录
cat /proc/cpuinfo       //cpu信息
cat /proc/meminfo       //内存信息
cat /proc/partitions    //分区信息


进程优先级
---------------------
取值范围（-20,19）   -20为最高优先级，启动一个进程，默认优先级为0

nice命令
指定程序的运行优先级
格式：nice -n command
例如：nice --5 command

renice 命令
改变一个正在运行的进程的优先级
格式： renice n pid
例如：renice -5 777

[root@bogon cron]# ps -le
[root@bogon cron]# renice -20  [PID]



进程中止（挂起）和终止
---------------------
挂起（ctrl+z）即：stopped
终止（ctrl+c）
系统中有两种运行的进程，我们在前台是看不到的。一种是后台执行的命令，一种就是被暂停的;

查看被挂起的进程（jobs）

进程的恢复：
恢复到前台继续运行（fg）
恢复到后台继续运行（bg）



计划任务：
---------------------
at  　　 安排作业在某一时刻执行一次
batch   安排作业在系统负载不重时执行一次
cron    安排周期性运行的作业crontab


at格式：
at 5:30pm
at 17:30
at 17:20 today
at now+3 hours
at now+180 minutes
at 17:30 12.1.11
at 17:30 1.11.12

[root@bogon ~]# at now+5 minutes    5min后执行
at> /usr/bin/wall < /etc/motd 　　做一个广播，把etc/motd 文件广播出去
at> 　　　　　　　　　　　　　　    可以继续写其它的计划，用命令时最好写绝对路径，为了安全
at> <EOT>
job 2 at 2012-05-20 13:43 　　   ctrl+d保存计划并退出


是否还担心我们的计划是否启动，通过下面两个命令查看at进程是否正常启动
[root@bogon test]# at -l
3 2012-05-20 13:57 a root
[root@bogon test]# atq
3 2012-05-20 13:57 a root

如果真的没有启动的话，可以通过手工方式重新启动一下
[root@bogon ~]# /etc/rc.d/init.d/atd start

删除at计划任务
[root@bogon test]# at -d

查看at计划任务
[root@bogon test]# ls /var/spool/at/

batch用法通at



crontab:
---------------------
案例：在上学的时候都有上机课，周一到周五，下午5点30上课结束。我们需要在5点30发一个通知，5点45自动关机。设定计划任务需要分两步完成，第一步提醒，第二步关机
分钟　　 小时 　　 天　　 月　　  星期 　　 命令/脚本
30　　   17 　　   * 　　 * 　　 1-5 　　 /usr/bin/wall < /hzh/test/guanji.wall
45 　　  17　　    * 　　 * 　　 1-5 　　 /usr/bin/shudown -h now

操作方法:
[root@bogon test]#  crontab -e 　　 回车会进入一个vi文本中
　　根据我上面介绍格式编写内容，然后保存退出
crontab: installing new crontab 表示创建计划成功

通过下面方式进行查看计划：
[root@bogon test]# cd /var/spool/cron
[root@bogon cron]# ls
root
[root@bogon cron]# cat root
30 17 * * 1-5 /usr/bin/shudown -h now


> zsh
---------------------
chsh -s /bin/zsh         进入zsh,完全退出终端，再打开
chsh -s /bin/bash        切回bash
cat /etc/shells          查看装了哪些shell

zsh语法高亮：
https://www.cnblogs.com/weixuqin/p/7029177.html
https://www.jianshu.com/p/19c0a8890fe0

1. brew install zsh-syntax-highlighting
2. 根目录下vim .zshrc
3. 在.zshr中添加 source /usr/local/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
4. 添加：source ~/.bash_profile
5. source ~/.zshrc


.zshrc
---------------------
https://www.jianshu.com/p/19c0a8890fe0
http://blog.sina.com.cn/s/blog_71539d240101fh8s.html

source /usr/local/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
source ~/.bash_profile
#PROMPT='wanghaitao:%c$: '       # c表示绝对路径，d表示相对路径
PROMPT="%* %c: "

%u 用户名
%c 目录的base
%d 完整目录
%% 为了显示%，需要用%进行转义。
%t %T时间

#开启颜色
autoload -U colors && colors
#配置提示符模式。。 其实配置之前的PS1也是可以的 但是为了尊重说明文档。。。
PROMPT="%{$fg[red]%}%n%{$reset_color%}@%{$fg[blue]%}%m %{$fg[green]%}%1|%~ %{$reset_color%}%#>"
#在行末显示上一命令的返回状态
RPROMPT="[%{$fg_bold[yellow]%}%?%{$reset_color%}]"
#自定义terminal头：
prompt_context () {
  prompt_segment black default "%* %c:";
}


设置lsColor:
------------
https://www.jianshu.com/p/f39ef5e227ea
http://osxdaily.com/2012/02/21/add-color-to-the-terminal-in-mac-os-x/
默认：
export LSCOLORS="exfxcxdxbxegededabagacad"
自定义：
export LSCOLORS="Fxfxcxdxcxegbdedabagacad"


> oh my zsh
---------------------
https://www.jianshu.com/p/9c3439cc3bdb

# curl 安装方式
sh -c "$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)"

pip install powerline-status --user

cd ~/.oh-my-zsh/custom/plugins/
git clone https://github.com/zsh-users/zsh-syntax-highlighting.git
git clone https://github.com/zsh-users/zsh-autosuggestions

vim ~/.zshrc
plugins=(git
          zsh-autosuggestions
          zsh-syntax-highlighting
)
source ~/.oh-my-zsh/custom/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
source ~/.oh-my-zsh/custom/plugins/zsh-autosuggestions/zsh-autosuggestions.zsh
source ~/.zshrc


> source
---------------------


> wc
---------------------
格式：
wc [选项]文件...
wc -c list.txt
grep -o wall list | wc -l         //在list文件中只匹配wall字符出现的次数

参数：
-c 统计字节数。
-l 统计行数。
-m 统计字符数。这个标志不能与 -c 标志一起使用。
-w 统计字数。一个字被定义为由空白、跳格或换行字符分隔的字符串。
-L 打印最长行的长度。
--help 显示帮助信息
--version 显示版本信息

ctrl+alt+F1   命令行全屏模式


.bash .zsh
> $PS1 $PS2
---------------------
https://www.cnblogs.com/cuoreqzt/p/5848209.html
https://blog.csdn.net/dangyt123/article/details/53234273

1. 打印现在所用的输出
echo $PS1   默认 \h:\W \u\$
echo $PS2   默认 >

2.设置终端前缀的输出内容（一次性）
PS1="\t\W"
可用格式：
\d–现在的系统日期
\t–现在的系统时间
\h–主机名
\\# – 命令号（Comannd Number）
\u–用户名
\W–当前所在的路径
\w–当前所在的完整路径

2. 在.bash_profile中配置 export PS1="\u \w$"（永久）


> pushd, popd
---------------------
cd, pushd, popd

[root@localhost etc]# pushd ~/Desktop/shell_test/
~/Desktop/shell_test    /etc
[root@localhost shell_test]#

[root@localhost shell_test]# pushd
/etc    ~/Desktop/shell_test
[root@localhost etc]#

[root@localhost etc]# popd
~/Desktop/shell_test
[root@localhost shell_test]#


> 历史命令调用
---------------------
上下箭头
!n     冲突第n条历史命令
!!     重复上一条命令
!str   重复最后一条以str开头的命令


> bash常用快捷键
---------------------
ctrl + A :移动光标到开头
ctrl + E :移动光标到结尾
ctrl + R :在历史记录中搜索

ctrl + C（终止）, + D（退出）, + L（清屏）
ctrl + U（剪切光标之前的命令）, + K（剪切光标之后的命令）
ctrl + Y (粘贴ctrl+U或 ctrl+R的内容)


sumblime快捷键
---------------------
ctrl + shift + d：快速复制
ctrl + shift + k: 快速删除一行
ctrl + shift + l: 竖线模式编辑
ctrl + l: 快速选中
ctrl + shift + 上下箭头：快速移动


查看ios log
--------------------------
http://www.cocoachina.com/ios/20170719/19933.html

brew install libimobiledevice --HEAD
idevicesyslog

idevicesyslog >> iphone.log & 重定向文件
用tail -f和grep查看log
tail -f iphone.log
tail -f iphone.log | grep 'QQ’  # 查看包含QQ的行

Warning: libimobiledevice HEAD-3a37a4e_2 is already installed and up-to-date
To reinstall HEAD_3, run `brew reinstall libimobiledevice`


class-dump
---------------------
http://stevenygard.com/projects/class-dump/
https://www.jianshu.com/p/1e3fe0a8c048

1.download
2.open /usr/local/bin
3.复制 dmg中的文件到/usr/local/bin
4.sudo chmod 777 /usr/local/bin/class-dump
5.usage:class-dump --help

class-dump 3.5 (64 bit)
Usage: class-dump [options] <mach-o-file>

  where options are:
        -a             show instance variable offsets
        -A             show implementation addresses
        --arch <arch>  choose a specific architecture from a universal binary (ppc, ppc64, i386, x86_64)
        -C <regex>     only display classes matching regular expression
        -f <str>       find string in method name
        -H             generate header files in current directory, or directory specified with -o
        -I             sort classes, categories, and protocols by inheritance (overrides -s)
        -o <dir>       output directory used for -H
        -r             recursively expand frameworks and fixed VM shared libraries
        -s             sort classes and categories by name
        -S             sort methods by name
        -t             suppress header in output, for testing
        --list-arches  list the arches in the file, then exit
        --sdk-ios      specify iOS SDK version (will look in /Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS<version>.sdk
        --sdk-mac      specify Mac OS X version (will look in /Developer/SDKs/MacOSX<version>.sdk
        --sdk-root     specify the full SDK root path (or use --sdk-ios/--sdk-mac for a shortcut)

6. class-dump -H /Users/mac/Desktop/Payload/Kt.app -o /Users/mac/Desktop/Payload


++++++++++++++++++++++++++++++++++++++++++++++++
mac app反编译
---------------------
hopper disassembler

thunder:
---------
refer to :
http://bbs.iosre.com/t/hopper-mac/1428
http://bbs.iosre.com/t/hopper-mac/1428

a.搜索：
 is
b.定位文件，选择第一行汇编代码：执行：Modify -> Assemble Instruction，输入：mov eax, 0x1
c.下一步输入ret,然后同样执行其他文件：

//在x86汇编里，函数的返回值存放在eax寄存器里。1对应BOOL类型的YES
//ret为return的意思
1. -[LocalTask isValidLixianTask]
2. -[UserController isVip]
3. -[UserController isPlatinum]
4. -[UserController isDiamond]

d.定位：[AppDelegate applicationWillFinishLaunching:]直接在第一行执行ret
e.File -> Produce New Executable


QQmusic:
---------
refer to :
https://blog.csdn.net/pureszgd/article/details/73527714
-[UrlAudioData currentSongRateType] ret 0
-[DownloadTask currentSongRateType] ret 0
-[DownloadInfo haveCheckDownloadRight] ret 1
-[DownloadInfo haveDownloadRight] ret 1
-[SongInfo isActionBitSet:forSwitch:] ret 1


百度网盘
----------
https://www.52pojie.cn/thread-694011-1-1.html
++++++++++++++++++++++++++++++++++++++++++++++++


建立N2N VPN专网
-------------------
http://ju.outofmemory.cn/entry/336111

config on OP
- opkg update && opkg install n2n
- vim /etc/config/n2n
- /etc/init.d/n2n enable
- /etc/init.d/n2n start

config on MacOS
- brew tap homebrew/cask
- brew cask install tuntap


shell进度条
-------------------
#!/bin/sh
b=''
for ((i=0;$i<=100;i+=2))
do
        printf "progress:[%-50s]%d%%\r" $b $i
        sleep 0.1
        b=#$b
done
echo


mac允许安装三方来源
-------------------
sudo spctl --master-disable


dd：
-------------------
https://www.cnblogs.com/jikexianfeng/p/6103500.html
https://my.oschina.net/u/3757085/blog/1928642
1.将本地的/dev/hdb整盘备份到/dev/hdd
#dd if=/dev/hdb of=/dev/hdd

2.将/dev/hdb全盘数据备份到指定路径的image文件
#dd if=/dev/hdb of=/root/image

3.将备份文件恢复到指定盘
#dd if=/root/image of=/dev/hdb

lede-.img写入：需要原来是op系统
dd if=/tmp/Lede-*.img of=/dev/sda

1.查看U盘盘符：diskutil list (Mac)  sudo df -hT (Linux)

2.卸载U盘： diskutil unmount /dev/disk2s1（盘符写成自己的U盘，下同如果用Mac没有把握可以在磁盘工具中卸载）

3.dd命令：sudo dd if=/dev/rdisk2s1 of=系统镜像绝对路径 bs=1m （disk前+r可加快写入速度）（Mac和Linux命令相同，镜像可直接拖入终端中自动填写路径）



强制苹果手机重启：
-------------------
https://baijiahao.baidu.com/s?id=1609566833127582797&wfr=spider&for=pc
iPhone 7 以前的机型，同时按住“电源键”+“Home键”，直到 iPhone 出现白苹果的图示为止。

iPhone 7 / 7 Plus 机型，按住“电源键”以及“降低音量键”持续几秒，直到出现Apple白苹果的图示为止。

iPhone 8、iPhone 8 Plus机型，先按下“增大音量”按键，再按下“降低音量”按键，接着，持续按住电源键，直到 Apple 白苹果图示出现。

iPhone X，先按一下“增大音量键”，再按一下“降低音量键”，接着长按右侧的电源键约达10秒左右，直到屏幕出现白苹果的图示为止



Virtualbox安装img:
-------------------
转换img文件为vdi,然后用已经存在的磁盘进行加载
VBoxManage convertdd file.img file.vdi

在转为vdi的过程中报如下错；
VBoxManage: error: VD: The given disk size 20408912 is not aligned on a sector boundary (512 bytes)
说明转换的size不是512的整数倍
即20408912/512不是整数，我们调整给你磁盘为512的整数，并且适当大一些，留一点空间
int(20408912/512) *512*10 = 这个为我们最后调整的size大小

下面为调整的命令
dd if=openwrt1.img of=openwrt.img bs=204093440 conv=sync


StarWind V2V Image Converter可以把img转换为vmdk,win中使用

转img为vmdk
-------------
brew install qemu
qemu-img convert -f raw 原镜像文件名.img -O vmdk 新镜像文件名.vmdk


virtualbox安装opt:
-----------------
https://blog.csdn.net/lvshaorong/article/details/80935503


VMware安装openwrt:
------------------
http://www.360doc.com/content/19/0227/05/14775740_817794211.shtml


虚拟机旁路由：
-------------
https://www.bilibili.com/video/BV1vt4y1x72t/?spm_id_from=333.337.search-card.all.click&vd_source=a1dfcf74d6c6fdf658e1330446307e56

1.设置虚拟机的lan ip为电脑网络的同网段
2.设置虚拟机的网络为桥接模式，bridge
3.设置虚拟机lan口的网关为主路由，dns解析地址为主路由，关闭旁路由dhcp

4.防火墙：
关闭SYN-flood防御
关闭FullCore-NAT
启用lan -> wan的Ip动态伪装
保存设置

5.非嵌入式设置：
网关和DNS设置为旁路由即可

windows的子网前缀设置为24


旁路由设置
--------
https://www.youtube.com/watch?v=w7rwNF2Q3lM


将dmg转为iso
------------
hdiutil convert xx.dmg -format UDTO -o xx.iso


unbuntu终端terminal中移动定位光标位置：
-------------------
Ctrl+a  光标移动到开始位置
Ctrl+e  光标移动到最末尾

Ctrl+b  向回移动光标
Ctrl+f  向前移动光标

option+方向 单词为单位移动

删除
Ctrl+k  删除此处至末尾的所有内容
Ctrl+u  删除此处至开始的所有内容

删除单个
Ctrl+d  删除当前字符
Ctrl+h  删除当前字符前一个字符
Ctrl+w  删除此处到左边的单词

复制粘贴
Ctrl+y  粘贴由Ctrl+u， Ctrl+d， Ctrl+w删除的单词
Ctrl+&  恢复 ctrl+h 或者 ctrl+d 或者 ctrl+w 删除的内容

Ctrl+l  相当于clear，即清屏
Ctrl+c  终止进程/命令
Ctrl+d  关闭终端
F11 全屏切换
Ctrl+Alt+T 开启新的终端


DLNA和Miracast

NAS系统搭建
----------------
Netgear的ReadyNAS系列
New HPE ProLiant MicroServer Gen10 with AMD Opteron X3000 APUs (NAS+HTPC)
OS:OpenMediaVault
tool:teamviewer, ZeroTier
https://my.oschina.net/u/3757085/blog/1928642
https://www.zhihu.com/question/21359049

NAS服务:
https://www.zhihu.com/question/21359049

目前主流的文件共享方案有FTP、SFTP、SMB、NFS和WebDav

uci命令
----------------
https://blog.csdn.net/wsclinux/article/details/48176241
进入后mount可以看到root是不给写的，所以还要解锁下，先映射root盘
mount_root

忘记密码只需要用这个命令
passwd

忘记了路由器ip用这个复位
uci get network.lan.ipaddr

JFFS2 分区安装了太多包太多软件，你想要重置，用这个会清楚整个jfss2区的数据，相当于恢复工厂设置。（这东西很好就是恢复出厂设置）。
mtd -r erase rootfs_data

现在做完你想做的事情了，只需要这个进行重启。
reboot -f

若想恢复到系统的初始状态，则：
一次性擦除指令，firstboot. 退出telnet后系统会关闭telnet，开启ssh，恢复成功。


/////////////////////////////////////////////////////////////////

软路由：
-------------------
http://koolshare.cn/thread-116123-1-1.html
Intel 82559网卡
intel 82576网卡
j3160
4口d525。双口d2550加交换机都可以。都不贵。内存1g就够了。固件装u盘。其他没什么，lede刷上去用就是了。
97w的电源
使用树莓派、Intel Atom平台（典型的N3160等）之类极其廉价的通用计算硬件来作为路由器。
软路由，可以使用一般的PC系统来手动配置多个网络接口间的路由转发，较为傻瓜式的可以使用Windows的网络共享，
复杂点的可以使用Linux下的iptables/dnsmasq等工具。
更进一步的不局限于传统PC系统，使用虚拟机（VMware/Hyper-V/ESXi/VirtualBox等）来虚拟运行路由器系统都行。
而且虚拟机方案可玩性很高，不仅可以挂路由器系统，还可以挂群晖等NAS系统以及普通PC系统，使之成为一个Homelab/家庭媒体中心。
路由器系统实现基础路由功能以及$$、过滤广告、kms等，
NAS系统/普通PC系统等更可以搭建NAS、私有云、离线下载、Git服务器、苹果的TimeMachine服务器等等。


100-200:
N1盒子，R2s, d525

200-300:
矿渣之王锐角云n3450
惠普的t620plus
树莓派4B
GX-420CA
N3450

300-400:
i3 4005u
4010u
4030u
z8350
n4000
A6-8500B
dell wyse 3040m小机器
--------------
N3160，J4125
LAN:intel 1225 - N5105，N5095
400-500:
3867U
500-600：
j4105小主机
j4205
600-700:
J4105，4590T+m93p,
700-800:
j4125 intel 1210
i5 6600T
dell wyse 5070 j5005
800+:
j4125 8125b 2.5G
Kodlix gk45

Tutorials：
https://www.youtube.com/watch?v=GFLDe2ihT1U
https://forum.openwrt.org/t/how-to-install-lede-on-x86/14601
winpe cmd下执行：
phsdiskwrite.exe -u lede.img
或者在op系统中执行：
dd if=/tmp/Lede-*.img of=/dev/sda

x64 LEDE koolshare:
https://firmware.koolshare.cn/LEDE_X64_fw867/

X86 LEDE:
https://www.right.com.cn/FORUM/forum.php?mod=viewthread&tid=252795
https://downloads.openwrt.org/releases/19.07.9/targets/x86/64/openwrt-19.07.9-x86-64-combined-squashfs.img.gz

combined-ext4.img.gz（rootfs工作区存储格式为ext4。）
combined-squashfs.img.gz（squashfs相当于可以恢复出厂设置的固件，如果使用中配置错误，可直接恢复默认设置。）
generic-rootfs.tar.gz（rootfs的镜像，不带引导，可自行定义用grub或者syslinux来引导。）
rootfs-ext4.img.gz（rootfs的镜像，不带引导，可自行定义用grub或者syslinux来引导，需要存储区是ext4。）
rootfs-squashfs.img.gz（rootfs的镜像，不带引导，可自行定义用grub或者syslinux来引导，如果使用中配置错误，可直接恢复默认设置。）

支持路由：
------------------
R2s: aarch64_generic

0 4 * * * /etc/coremark.sh
0 5 * * 1 /root/scheduledTask.sh


便携路由器： TL-WR703N， NEXX WT3020F

TL-WDR4310
https://item.taobao.com/item.htm?spm=a1z09.2.0.0.dcda2e8dQB88iz&id=541598037417&_u=nbh5k5e8fc3

NetGear R7000
price: 549
https://item.taobao.com/item.htm?spm=a230r.1.14.20.3aa528d98GbBeC&id=561557374395&ns=1&abbucket=14#detail
CPU:1G双核
RAM:256MB
ROM:
2.4G:
5G:
面积：120m^2
b,g,n,a,ac
1usb3.0+1usb2.0

NetGear R7500V2
price: 881
https://item.taobao.com/item.htm?spm=a230r.1.14.7.3f2d3ce37Gyz8v&id=551400189878&ns=1&abbucket=14#detail
CPU:1.4G双核
RAM:256MB、淘宝显示为512MB
ROM:128MB
2.4G:1480M
5G:800M

NetGear R7800
price: 865
CPU:1.7G双核
RAM:512MB
ROM:128MB
2.4G:1730M
5G:800M
面积：150m^2
2usb3.0

NetGear R8500
price: 722
https://detail.tmall.com/item.htm?spm=a1z10.5-b-s.w4011-15957426971.74.moMqeO&id=523155214489&rn=f559a93cc03212492719615b9fce507c&abbucket=7&ali_trackid=42_55a9f7ff676e6b09a3d84dbf04bab4dd
CPU:1.7G双核
RAM:512MB
ROM:
2.4G:
5G:
面积：200m^2
b,g,n,a,ac
1usb3.0+1usb2.0

NetGear R9000
CPU:1.7G双核
RAM:1G
ROM:
2.4G:
5G:
面积：230m^2
b,g,n,a,ac
2usb3.0


3800刷不死uboot：
----------------------------------
1.winscp登录路由器，放wndr3800.bin文件的temp文件下
2.putty登录路由器
3.cd /tmp，执行mtd -r write wndr3800.bin u-boot
4.重启
5.断电，按住复位键，插电，等10s以上进入不死界面


3800刷原厂：
----------------------------------
1.直接在不死界面更新uboot.bin文件
2.或者在路由器终端中执行mtd -r write uboot.bin u-boot


+-------------------------------------------------------------------------
3800配置:
RAM:16M
ROM:128M
2.4G:300M
5G:300M
内置六根天线

openwrt:
凡包含factory字样的，是在原机界面上直接刷机用的，
包含sysupgrade字样的，是在op系统里的界面，更新固件用的。

tftp固件是用tftp方式 刷机用的。网件和巴法络都支持tftp方式 刷机，这个方式相当于不死uboot.
另网件用如果用tftp方式刷机，要选择img格式的固件。

tar格式的固件是不支持mtd方式来刷机的。另tar格式是直接在界面上传刷机，不需要解压，在刷机的时候它自动在路由里进行解压。


mtd:
-----------------
mtd:上传文件到路由刷机，这种方法只适用于openwrt和dd等第三方系统，原厂是不可以的。
操作方法是ssh登录路由，或者用winscp、putty等软件来登录到路由，把固件上传到路由的/tmp里,比如你的固件名称为xxxxx.bin。就执行如下命令：

mtd -r write xxxx.bin firmware

-r是刷完机后重启的意思。

用这个方法也可以刷uboot和art，前提得是这个openwrt固件是没我锁定uboot和art分区的，openwrt官方的固件是全部锁定的，mtd刷uboot和art是不行的。明月系列TP固件解锁了uboot的 ，为了安全，没有解锁art。因此，在这系列固件里可以用这种方法刷uboot。如果uboot名为xxxx.bin，则命令如下：

mtd -r write xxxx.bin  u-boot

mtd刷机方法不常用，主要用来刷其它型号的固件，比如tp的4310/4300/3600,这三个型号的路由是一样的硬件，只要硬件一样，固件就可以通用。但我们用第一种方法是不可以直接刷入的。在浏览器刷机会校验固件头，那里有固件的型号，和路由当前系统对不上，会限制刷机。但用mtd方法，则可以突破这种限制，可以使用其它硬件完全相同的固件。
+-------------------------------------------------------------------------

openwrt scheduledtask

0 5 * * 6 /root/scheduledTask.sh
*/5 * * * * /root/watchdog.sh
5  *  *  *  *  /usr/bin/ss-subscribe auto >/dev/null 2>&1




openwrt wifi toggle scheduled
------------------------------
refer to :
https://wiki.openwrt.org/doc/howto/cron

on.sh
------------
#!/bin/sh
uci set wireless.@wifi-device[0].disabled=0
uci set wireless.@wifi-device[1].disabled=0
wifi
uci commit


off.sh
------------
#!/bin/sh
uci set wireless.@wifi-device[0].disabled=1
uci set wireless.@wifi-device[1].disabled=1
wifi
uci commit


scheduled input:
------------------
https://openwrt.org/docs/guide-user/base-system/cron

#读取定时任务信息
logread -e cron

#查看读取定时任务进程
ps | grep cron

#定时任务查看：
在/etc/crontabs/目录下

定时时间格式
--------------
# 文件格式说明
#  ——分钟 (0 - 59)
# |  ——小时 (0 - 23)
# | |  ——日   (1 - 31)
# | | |  ——月   (1 - 12)
# | | | |  ——星期 (0 - 6)（星期日=0）
# | | | | |
# * * * * * 被执行的命令
  0 3 * * 6 /root/autoupgrade.sh

Example:
*/5 * * * *   Every 5 minutes
12 */3 * * *  Every 3 hours at 12 minutes

mine:

0 1 * * 1-5 /etc/wifi/wifioff.sh
0 7 * * 1-5 /etc/wifi/wifion.sh
30 8 * * 1-5 /etc/wifi/wifioff.sh
0 19 * * 1-5 /etc/wifi/wifion.sh
0 2 * * 6,0 /etc/wifi/wifioff.sh
0 7 * * 6,0 /etc/wifi/wifion.sh


0 1 * * 1-5 wifi down
0 7 * * 1-5 wifi up
0 9 * * 1-5 wifi down
0 19 * * 1-5 wifi up
0 2 * * 6,0 wifi down
0 7 * * 6,0 wifi up


notice:
1.There should be a end-of-line character on the last line of the crontab file. If in doubt, just leave an empty line at the end.

2.if there is no crontab defined (i.e. /etc/crontabs/ is empty), then cron won't start! Make sure you already defined cron jobs before trying to start cron.

/etc/init.d/cron start
/etc/init.d/cron enable


test:
---------------
16 21 * * 1-5 /etc/wifi/wifioff.sh
18 21 * * 1-5 /etc/wifi/wifion.sh

00 1 * * * wifi down
30 7 * * * wifi up

0 5 * * 1 /root/scheduledTask.sh



/////////////////////////////////////////////////////////////////


子网访问父网的局域网
-------------------
https://gist.github.com/willwhui/eb4df8c41110f0c10286001be19bb12e
~: route  /route -n
~: route add -net 192.168.1.0 netmask 255.255.255.0 gw 192.168.31.231
//* 目的ip=192.168.10.0，掩码：255.255.255.0，下一跳：路由器Y自身ip
a.把父网和子网的掩码都改成255.255.0.0  （LAN口设置）
b.最简单的就是 在两个路由器上分别配置指向对面的静态路由
c.还可以用其他协议啊，比如OSPF，RIPV2这些


usb挂载,NAS-SMB 在op:
-----------------
https://wizju.com/post/123/
#分区1挂载到 /smb1目录
mkdir /smb1
mount -t ext4 /dev/sda1 /smb1 -o noatime,async

#分区2挂载到 /smb2目录
mkdir /smb2
mount /dev/sda2 /smb2 -o noatime,rw,async

umount /smb1  #取消挂载
umount /smb2  #取消挂载


Android-7.0不能charles抓包：
---------------------
https://www.charlesproxy.com/documentation/using-charles/ssl-certificates/
https://juejin.im/post/5aa9f35b51882555731bd922
<network-security-config>
  <!-- debug用 -->
  <debug-overrides>
    <trust-anchors>
      <!-- Trust user added CAs while debuggable only -->
      <certificates src="user" />
    </trust-anchors>
  </debug-overrides>
  <!-- debug和release用 -->
  <base-config cleartextTrafficPermitted="true">
      <trust-anchors>
          <certificates src="system" />
          <certificates src="user" />
      </trust-anchors>
  </base-config>
</network-security-config>


搭建gitlab
---------------------
https://about.gitlab.com/install/
https://www.cnblogs.com/dqcer/p/9596813.html
ubuntu:
sudo apt-get update
sudo apt-get install -y curl openssh-server ca-certificates

#install Postfix to send notification emails
sudo apt-get install -y postfix
# During Postfix installation a configuration screen may appear. Select 'Internet Site' and press enter. Use your server's external DNS for 'mail name' and press enter. If additional screens appear, continue to press enter to accept the defaults.

#Add the GitLab package repository
curl https://packages.gitlab.com/install/repositories/gitlab/gitlab-ee/script.deb.sh | sudo bash
sudo EXTERNAL_URL="http://gitlab.example.com" apt-get install gitlab-ee

#Please configure a URL for your GitLab instance by setting `external_url`
configuration in /etc/gitlab/gitlab.rb file.
#Then, you can start your GitLab instance by running the following command:
  sudo gitlab-ctl reconfigure

登录ip地址，进去设置密码，用户名默认root,502则内存不足，多刷新几次即可

#查看默认账户名和密码
cd /opt/gitlab/bin/
gitlab-rails console production
u=User.where(id:1).first #查询用户账号信息并赋值给u
u.password=12345678   #设置该用户名的密码，密码这里不要使用引号，不然会无法登录成功
u.password_confirmation=12345678  #确认密码
u.save! #保存
exit  #退出

添加git账户：
git config --global user.name "Administrator"
git config --global user.email "admin@example.com"

mac OS U盘安装：
---------------------
https://support.apple.com/zh-cn/HT201372
// 将MyVolume 替换为您的宗卷名称
Big Sur*：
sudo /Applications/Install\ macOS\ Big\ Sur.app/Contents/Resources/createinstallmedia --volume /Volumes/MyVolume
Catalina: *
sudo /Applications/Install\ macOS\ Catalina.app/Contents/Resources/createinstallmedia --volume /Volumes/MyVolume
Mojave：*
sudo /Applications/Install\ macOS\ Mojave.app/Contents/Resources/createinstallmedia --volume /Volumes/MyVolume
High Sierra：*
sudo /Applications/Install\ macOS\ High\ Sierra.app/Contents/Resources/createinstallmedia --volume /Volumes/MyVolume




hello, git：
---------------------------------------
.gitkeep文件  可以保证空文件夹也被上传


Q： warning: LF will be replaced by CRLF in
A: https://blog.csdn.net/man_zuo/article/details/88651416
最简单的一种办法就是把自动转换功能关掉即可。
输入命令 ：
git config core.autocrlf false (仅对当前git仓库有效）
git config --global core.autocrlf false (全局有效，不推荐设置全局）
然后重新提交代码即可


安装： brew instal git
添加所有文件： git add -A

git add -A和 git add .   git add -u在功能上看似很相近，但还是存在一点差别
git add . ：他会监控工作区的状态树，使用它会把工作时的所有变化提交到暂存区，包括文件内容修改(modified)以及新文件(new)，但不包括被删除的文件。
git add -u ：他仅监控已经被add的文件（即tracked file），他会将被修改的文件提交到暂存区。add -u 不会提交新文件（untracked file）。（git add --update的缩写）
git add -A ：是上面两个功能的合集（git add --all的缩写）

…or create a new repository on the command line
echo "# web" >> README.md
git init
git add README.md
git commit -m "first commit"

# 查看远程仓库地址
git remote -v

git remote add origin git@github.com:captainTao/web.git
git push -u origin master
…or push an existing repository from the command line
git remote add origin git@github.com:captainTao/web.git
git push -u origin master

# 或者
git push --set-upstream origin master
#设置追踪信息
git branch --set-upstream-to=origin/<分支> master


…or import code from another repository
You can initialize this repository with code from a Subversion, Mercurial, or TFS project.
更换远端地址：
git remote remove origin
git remote add origin git@github.com:captainTao/node.git

git branch --set-upstream-to=origin/<分支> master
git branch --set-upstream-to=origin/master master


git clean经常和git reset --hard一起结合使用. 记住reset只影响被track过的文件, 所以需要clean来删除没有track过的文件. 结合使用这两个命令能让你的工作目录完全回到一个指定的<commit>的状态

下面的例子要删除所有工作目录下面的修改, 包括新添加的文件. 假设你已经提交了一些快照了, 而且做了一些新的开发

git reset --hard
git clean -df

运行后, 工作目录和缓存区回到最近一次commit时候一摸一样的状态，git status会告诉你这是一个干净的工作目录, 又是一个新的开始了！

拉取指定分支代码：
例如：将gitLab 上的dev分支拉取到本地

1》与远程仓库建立连接：git remote add origin XXXXX.git
2》使用git branch 查看本地是否具有dev分支
3》如果没有 git fetch origin dev
4》git checkout -b dev origin/dev在本地创建分支dev并切换到该分支
5》git pull origin dev就可以把gitLab上dev分支上的内容都拉取到本地了

=========================================================================
Git为我们自动创建的第一个分支master，以及指向master的一个指针叫HEAD。

一、创建本地git：

1.新建目录，进入对应目录下
$ mkdir learngit
$ cd learngit
$ pwd
/Users/michael/learngit

2.初始化
$ git init

3.在对应目录下新建一个文件，保存文件内容
$ vi readme.txt
--------
Git is a version control system.
Git is free software.
--------

4.添加到git （多次add不同的文件）
$ git add readme.txt
(git add file1.txt file2.txt)

5.提交git (一次可以提交很多文件)
$ git commit -m "this folder has wrote a readme file！"

6.重新修改readme.txt的内容，然后保存；

7.查看文件谁被修改了；
$ git status

8.查看被某个文件修改的具体内容；
$ git diff readme.txt

git diff             #是工作区(work dict)和暂存区(stage)的比较
git diff --cached    #是暂存区(stage)和分支(master)的比较
git diff HEAD        #查看工作区和版本库里面最新版本的区别

9.再重现add，之后再commit一次；也可以直接用git commit -a
(use "git add" and/or "git commit -a")

10.查看提交的历史记录；
$ git log

11.回退上一个版本：
$ git reset --hard HEAD^
上上个版本用HEAD^^,前100个版本用HEAD~100

12.恢复到指定的版本：(--hard后面的序列号为commit hash值的前6位)
$ git reset --hard 41bb8d

强制回退远端：
git push --force origin

13.查询每次命令执行的commit id
$ git reflog

14.放弃工作区的修改：  #使用 --，这样它后面的字符串不会当做“树”，而认为是文件路径。
$ git checkout -- readme.txt

15.放弃暂缓区的修改
$ git reset HEAD readme.txt

16.删除了本地文件，之后：
a.删除git中的文件：
$ git rm readme.txt
$ git commit -m 'xxxx'
b.工作区恢复删除的文件：
$ git checkout -- xx.xx


小结1：
场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。
场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD file，就回到了场景1，第二步按场景1操作。
场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。git reset --hard  xx.

放弃暂存区文件
git rm --cached <文件>
git rm --cached -r <文件夹>

放弃untracked file
git clean -f   #删除file
git clean -fd  #连目录一起删掉

# 在用上述 git clean 前，建议加上 -n 参数来先看看会删掉哪些文件，防止重要文件被误删
git clean -nxfd
git clean -nf
git clean -nfd


小结2：
git checkout 的使用场景：
一、放弃工作区的更改：1.修改了文件，2.删除了文件；
二、创建并切换分支 git checkout -b xx
三、切换分支 git checkout xx


=========================================================================
二、配置github,上传本地git

1.本地配置ssh key,默认一路回车；
$ ssh-keygen -t rsa -C "578628438@qq.com"

2.在用户主目录下(/Users/captain/.ssh)会生成一个隐藏的.ssh文件夹;
打开id_rsa.pub,复制里面的key配置到github SSH and GPG keys上；
id_rsa是私钥，不能泄露出去，id_rsa.pub是公钥，可以放心地告诉任何人。

3.在git目录下验证使否成功：
$ ssh -T git@github.com

4，配置github邮箱、用户名
$ git config --global user.name 'captainTao'
$ git config --global user.email '578628438@qq.com'

5.上传建立的仓库：
$ git remote add origin git@github.com:captainTao/Hello-git.git
#之后进入本地git文件下.git文件，查看config，这儿可以查看远程地址，也可以直接进行修改；

6.把本地库推送到远程库上：
$ git push -u origin master(第一次提交需要加上-u)
$ git push origin master(后续提交就不需要加-u)


=========================================================================
三、clone github的项目：
#ssh传输
$ git clone git@github.com:captainTao/gitskills.git

指定用户名和密码：
git clone https://username:password@gitaddress
git clone https://pinguo-wanghaitao:zhuniu1210@github.com/PGWireless/experiment/

复制指定分支的命令：后面的git地址为源码仓库
git clone -b v2.8.1 https://git.oschina.net/oschina/android-app.git


=========================================================================
四、分支管理：
1.#创建dev分支：创建并切换, -b表示创建
$ git checkout -b dev
上面的命令相当于：
$ git branch dev 创建分支
$ git checkout dev切换分支

2.查看当前分支：
$ git branch
$ git branch -a 查看所有分支

3.切换到master分支：
$ git checkout master

4.提交dev分支,先切换到主分支，然后merge;
$ git merge dev

5.删除分支：
$ git branch -d dev
强行删除：
$ git branch -D dev

重命名本地分支
$ git branch -m originalName newName
删除远端分支
git push origin --delete <branchName>
git push origin --d <branchName>


或者：
git push origin :<branchName>
删除tag:
git push origin --delete tag <tagname>
或者：
git tag -d <tagname>
git push origin :refs/tags/<tagname>


6.禁用fast forward
$ git merge --no-ff -m "merge with no-ff" dev

7.用git log --graph命令可以看到分支合并图。

8.临时存储工作现场（暂存）
$ git stash

9.工作现场的恢复：
完成其他工作后，先切换到以前保存的现场分支；
$ git stash list查看保存在stash中的工作现场
a.用git stash apply恢复，但是恢复后，stash内容并不删除，你需要用git stash drop来删除；
b.用git stash pop，恢复的同时把stash内容也删了：

10.可以多次stash，恢复的时候，先用git stash list查看，然后恢复指定的stash，用命令：
$ git stash apply stash@{0}

11.查看远程仓库信息：
$ git remote
$ git remote -v

查看远程仓库分支信息：
$ git branch
$ git branch -v
$ git branch -r
$ git branch -a

删除分支
$ git branch -d xx
$ git push origin -delete xxx


12.推送分支：
$ git push origin master
$ git push origin dev

$ git push origin 分支名         --本地分支名和远端分支名一样
$ git push origin HEAD:分支名称     --本地分支名和远端分支名不一样

本地创建新分支，并关联remote
----------------------------------------------------
本地创建新分支，并更改指向
git checkout -b dev2.6.7
git branch --set-upstream-to=origin/<分支> dev2.6.7 (git pull --help能查看帮助)
git pull <远程> <分支>

远程分支push关联指向：
git checkout -b dev
git push --set-upstream origin dev (git push --help能查看帮助)
git push origin dev


为推送至远程同名分支，使用
git push origin HEAD

不同名分支用：
git push origin HEAD:remoteName


修改分支名(本地/远端)：
No.1
1.创建新分支
 git checkout -b newbranchName
2.设置追踪
 git push --set-upstream origin newbranchName
3.删除本地和远端分支
 git branch -d branchName
 git push origin -d <branchName>

No.2
1.重命名本地分支
 git branch -m originalName newName

2.修改分支关联
git branch --unset-upstream [<branchname>]
git push --set-upstream origin newName

3.删除远端分支
git push origin --delete <branchName>
git push origin -d <branchName>


13.打标签：
$ git tag v1.0

14.查找历史并打标签：
a.先查找历史提交的commit id
$ git log --pretty=oneline --abbrev-commit
b.打上标签
$ git tag v1.0 <id>

15.查看标签：（标签的排序不是按时间列出，而是按照字母排序的）
$ git tag

16.查看标签信息以及说明文字：
$ git show <tagname>

17.创建带有说明的标签：-a:标签名。 -m指定说明文字
$ git tag -a v0.1 -m "version 0.1 released" 3628164

18.-s用私钥签名一个标签：
$ git tag -s v0.2 -m "signed version 0.2 released" fec145a
签名采用PGP签名，因此，必须首先安装gpg（GnuPG），如果没有找到gpg，或者没有gpg密钥对，就会报错：如果报错，请参考GnuPG帮助文档配置Key

19.删除标签：
$ git tag -d v0.1

20.推送标签：
$ git push origin v1.0

21.一次性推送全部尚未推送到远程的本地标签：
$ git push origin --tags

22.删除远程标签：
先从本地删除，然后，从远程删除。删除命令也是push，再到GitHub上查看是否整的删除了标签
$ git tag -d v0.9
$ git push origin :refs/tags/v0.9




=========================================================================
多人协作的工作模式通常是这样：

1.首先，可以试图用git push origin branch-name推送自己的修改；

2.如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；
note:如果git pull提示“no tracking information”，则说明本地分支和远程分支的链接关系没有创建，用命令git branch --set-upstream branch-name origin/branch-name。

3.如果合并有冲突，则解决冲突，并在本地提交；

4.没有冲突或者解决掉冲突后，再用git push origin branch-name推送就能成功！

5.在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branch-name，本地和远程分支的名称最好一致；
这就是多人协作的工作模式，一旦熟悉了，就非常简单。


=========================================================================
五、自定义git

1.让Git显示颜色，会让命令输出看起来更醒目：
$ git config --global color.ui true

2.忽略特殊文件：
在Git工作区的根目录下创建一个特殊的.gitignore文件，然后把要忽略的文件名填进去，Git就会自动忽略这些文件。

忽略文件的原则是：
a.忽略操作系统自动生成的文件，比如缩略图等；
b.忽略编译生成的中间文件、可执行文件等，也就是如果一个文件是通过另一个文件自动生成的，那自动生成的文件就没必要放进版本库，比如Java编译产生的.class文件；
c.忽略你自己的带有敏感信息的配置文件，比如存放口令的配置文件。

例如自定义的文件.gitignore文件内容如下：
# Windows:
Thumbs.db
ehthumbs.db
Desktop.ini

# Python:
*.py[cod]
*.so
*.egg
*.egg-info
dist
build

# My configurations:
db.ini
deploy_key_rsa


.gitignore匹配规则
-----------------
https://www.jianshu.com/p/1c74f84e56b4
格式规范
所有空行或者以注释符号 ＃ 开头的行都会被 Git 忽略
可以使用标准的 glob 模式匹配
匹配模式最后跟斜杠(/)说明要忽略的是目录
要忽略指定模式以外的文件或目录，可以在模式前加上感叹号(!)进行取反
glob模式
所谓的 glob 模式是指 shell 所使用的简化了的正则表达式，匹配规则如下：
"*"：星号匹配零个或多个任意字符
[]：匹配任何一个列在方括号中的字符，如[ab]匹配a或者匹配b
"?"：问号匹配一个任意字符
[n-m]：匹配所有在这两个字符范围内的字符，如[0-9]表示匹配所有0到9的数字

匹配示例
logs/：忽略当前路径下的logs目录，包含logs下的所有子目录和文件
/logs.txt：忽略根目录下的logs.txt文件
*.class：忽略所有后缀为.class的文件
!/classes/a.class：不忽略classes目录下的a.class文件
tmp/*.txt：只忽略tmp目录下的.txt文件
**/foo：可以忽略/foo, a/foo, a/b/foo等


.gitignore添加文件后，仍然会被追踪
--------------------------------
是因为在加入到.gitignore之前，文件已经被git追踪
解决办法：(例如.idea).gitignore中添加.idea，清除.idea的git缓存，git rm -r --cached 文件名，然后再进行git comit和push即可

3.添加被忽略的文件：-f
$ git add -f App.class
或者你发现，可能是.gitignore写得有问题，需要找出来到底哪个规则写错了，可以用git check-ignore命令检查：
$ git check-ignore -v App.class


4.配置Git别名：
例如：用st代表stauts（--global代表：这些命令在这台电脑的所有Git仓库下都有用，如果不加，那只针对当前的仓库起作用。）
$ git config --global alias.st status
当然还有别的命令可以简写，很多人都用co表示checkout，ci表示commit，br表示branch：
$ git config --global alias.co checkout
$ git config --global alias.ci commit
$ git config --global alias.br branch
以后提交就可以简写成：
$ git ci -m "bala bala bala..."

甚至还有人丧心病狂地把lg配置成了：（为什么不早点告诉我）
$ git config --global alias.lg "log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit"

配置的文件放在.git/config文件中：别名就在[alias]后面，要删除别名，直接把对应的行删掉即可。
而当前用户的Git配置文件放在用户主目录下的一个隐藏文件.gitconfig中：

5.显示最近一次和两次的提交记录：
$ git log -1
$ git log -2
$ git log -5
配置一个git last，让其显示最后一次提交信息：
$ git config --global alias.last 'log -1'

6.用来设置默认push的分支
$ git config --global push.default "current"



#我的git配置：

git config --global color.ui true
git config --global alias.co checkout
git config --global alias.br branch
git config --global alias.st status
git config --global alias.ad "add -A"
git config --global alias.cm "commit -m"
git config --global alias.ps "push origin master"
git config --global alias.lg "log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit"
git config --global alias.lt 'lg -1'


.gitconfig
-------------
[user]
    name = captainTao
    email = 578628438@qq.com
[alias]
    co = checkout
    br = branch
    st = status
    ad = add -A
    cm = commit -m
    ps = push origin master
    lg = log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit
    lt = lg -1
[color]
    ui = true
[filesystem "Oracle Corporation|13|/dev/disk1s1"]
    timestampResolution = 12000 nanoseconds
    minRacyThreshold = 0 nanoseconds
[filesystem "Oracle Corporation|13|/dev/disk1s5"]
    timestampResolution = 8000 nanoseconds
    minRacyThreshold = 0 nanoseconds
[filesystem "Oracle Corporation|1.8.0_231|/dev/disk1s5"]
    timestampResolution = 1001 milliseconds
    minRacyThreshold = 0 nanoseconds

=========================================================================

六、搭建自己的git服务器：

准备一台运行Linux的机器，强烈推荐用Ubuntu或Debian

1.第一步，安装git：
$ sudo apt-get install git

2.第二步，创建一个git用户，用来运行git服务：
$ sudo adduser git

3.第三步，创建证书登录：
收集所有需要登录的用户的公钥，就是他们自己的id_rsa.pub文件，把所有公钥导入到/home/git/.ssh/authorized_keys文件里，一行一个。

4.第四步，初始化Git仓库：
先选定一个目录作为Git仓库，假定是/srv/sample.git，在/srv目录下输入命令：
$ sudo git init --bare sample.git
Git就会创建一个裸仓库，裸仓库没有工作区，因为服务器上的Git仓库纯粹是为了共享，所以不让用户直接登录到服务器上去改工作区，并且服务器上的Git仓库通常都以.git结尾。然后，把owner改为git：
$ sudo chown -R git:git sample.git

5.第五步，禁用shell登录：
出于安全考虑，第二步创建的git用户不允许登录shell，这可以通过编辑/etc/passwd文件完成。找到类似下面的一行：
git:x:1001:1001:,,,:/home/git:/bin/bash
改为：
git:x:1001:1001:,,,:/home/git:/usr/bin/git-shell
这样，git用户可以正常通过ssh使用git，但无法登录shell，因为我们为git用户指定的git-shell每次一登录就自动退出。

6.第六步，克隆远程仓库：
现在，可以通过git clone命令克隆远程仓库了，在各自的电脑上运行：
$ git clone git@server:/srv/sample.git
Cloning into 'sample'...
warning: You appear to have cloned an empty repository.
剩下的推送就简单了。

管理公钥
如果团队很小，把每个人的公钥收集起来放到服务器的/home/git/.ssh/authorized_keys文件里就是可行的。如果团队有几百号人，就没法这么玩了，这时，可以用Gitosis来管理公钥。
这里我们不介绍怎么玩Gitosis了，几百号人的团队基本都在500强了，相信找个高水平的Linux管理员问题不大。

管理权限
有很多不但视源代码如生命，而且视员工为窃贼的公司，会在版本控制系统里设置一套完善的权限控制，每个人是否有读写权限会精确到每个分支甚至每个目录下。因为Git是为Linux源代码托管而开发的，所以Git也继承了开源社区的精神，不支持权限控制。不过，因为Git支持钩子（hook），所以，可以在服务器端编写一系列脚本来控制提交等操作，达到权限控制的目的。Gitolite就是这个工具。
这里我们也不介绍Gitolite了，不要把有限的生命浪费到权限斗争中。

小结
搭建Git服务器非常简单，通常10分钟即可完成；
要方便管理公钥，用Gitosis；
要像SVN那样变态地控制权限，用Gitolite。



git log 格式
-------------------
https://www.cnblogs.com/liumengdie/p/7885210.html

feat：新功能（feature）
fix：修补bug
docs：文档（documentation）
style： 格式（不影响代码运行的变动）
refactor：重构（即不是新增功能，也不是修改bug的代码变动）
test：增加测试
chore：构建过程或辅助工具的变动




搭建个人博客
---------------------
github.io + hexo
https://github.com/probberechts/hexo-theme-cactus
https://zhuanlan.zhihu.com/p/26625249
1.node,npm环境
2.npm install -g hexo-cli
3.新建仓库 username.github.io
4.git clone到本地
5.进入文件夹,git clone https://github.com/probberechts/hexo-theme-cactus.git themes/cactus
6.配置主题，hexo generate, hexo server
7.hexo常用命令：
npm install hexo -g #安装Hexo
npm update hexo -g #升级
hexo init #初始化博客

命令简写
hexo n "我的博客" == hexo new "我的博客" #新建文章
hexo g == hexo generate #生成
hexo s == hexo server #启动服务预览
hexo d == hexo deploy #部署

hexo server #Hexo会监视文件变动并自动更新，无须重启服务器
hexo server -s #静态模式
hexo server -p 5000 #更改端口
hexo server -i 192.168.1.1 #自定义 IP
hexo clean #清除缓存，若是网页正常情况下可以忽略这条命令

8.站点配置文件：
deploy:
  type: git
  repo: git@github.com:captainTao/captainTao.github.io.git
  branch: master
9.推送
npm install hexo-deployer-git --save
hexo clean
hexo g
hexo d
+jekyll
https://blog.csdn.net/tyyytcj/article/details/80880018
http://jekyllthemes.org/
10.绑定域名godaddy



起一个访问本地资源的node服务
--------------------------
1.新建一个目录，test为例，进入test
2.npm init,然后一路回车，文件夹会多一个package.json
3.npm install koa koa-static, 文件夹会多package-lock.json 和一个node_modules目录
4.拷贝要发布的文件夹到test目录下的一个子目录下面，比如 test/tools
（一般不把文件夹拷贝到test根目录下，这样就没有了二级目录）
备注：
vue中如果要设置二级目录的话，
需要在router.js中设置：
mode: 'history',
base: '/datafilter/',

需要在vue.config.js中设置：
publicPath: '/datafilter/',

如果是放根目录下的话，base和publicPath的值设置为'/'既可或者不设置这两个参数


5.新建一个server.js,内容如下：

const Koa = require('koa')
const path = require('path')
const staticFiles = require('koa-static')
// 定义一个内核
const app = new Koa()
// 读取本地文件的目录
let main = staticFiles(path.resolve(__dirname, "./tools"))
// 内核读取哪些文件，这里为html
app.use(main, {extensions: ['html']})
// 启动服务 监听
app.listen(4050, () =>{
    console.log('server is running at http://localhost:4050')
})

6.启动服务
node server.js

7.浏览器访问地址：
http://localhost:4050/     根目录
http://localhost:4050/datafilter/    二级目录


sublime常见操作：
---------------------
Ctrl+L 选择整行（按住-继续选择下行）
Ctrl+KK 从光标处删除至行尾in
Ctrl+Shift+K 删除整行
Ctrl+Shift+D 复制光标所在整行，插入在该行之前
Ctrl+J 合并行（已选择需要合并的多行时）
Ctrl+KU 改为大写
Ctrl+KL 改为小写
Ctrl+D 选词 （按住-继续选择下个相同的字符串）
Ctrl+M 光标移动至括号内开始或结束的位置
Ctrl+Shift+M 选择括号内的内容（按住-继续选择父括号）
Ctrl+/ 注释整行（如已选择内容，同“Ctrl+Shift+/”效果）
Ctrl+Shift+/ 注释已选择内容
Ctrl+Z 撤销
Ctrl+Y 恢复撤销
Ctrl+M 光标跳至对应的括号
Alt+. 闭合当前标签
Ctrl+Shift+A 选择光标位置父标签对儿
Ctrl+Shift+[ 折叠代码
Ctrl+Shift+] 展开代码
Ctrl+KT 折叠属性
Ctrl+K0 展开所有
Ctrl+U 软撤销
Ctrl+T 词互换
Tab 缩进 自动完成
Shift+Tab 去除缩进
Ctrl+Shift+↑ 与上行互换
Ctrl+Shift+↓ 与下行互换
Ctrl+K Backspace 从光标处删除至行首
Ctrl+Enter 光标后插入行
Ctrl+Shift+Enter 光标前插入行
Ctrl+F2 设置书签
F2 下一个书签
Shift+F2 上一个书签

推荐插件：
https://packagecontrol.io/browse/popular

Emmet (Zen Coding)插件，zenCoding是一种快速的html、css编写方式。默认用tab键.

GBK to UTF8
将文件编码从GBK转换成UTF8，快捷键Ctrl+Shift+C

JS Format
一个JS代码格式化插件。默认ctrl+alt+f

colorpicker
顾名思义，选颜色用，快捷键CTRL+Alt+C

pretty json
格式化json
- Windows: <kbd>ctrl+alt+j</kbd>
- OS X: <kbd>cmd+ctrl+j</kbd>


主题：
Theme-Nil主题

其他设置：
1.设置tab键为4个空格

我的sublime个人设置
{
    "font_size": 13,
    "ignored_packages":
    [
        "Vintage"
    ],
    "theme": "Default.sublime-theme",
    "tab_size": 4,
    "translate_tabs_to_spaces": true,
    "expand_tabs_on_save": true,
    "word_wrap": "true",
    "trim_trailing_white_space_on_save": true
}
sublime安装的插件：
brackethighlighter
html-css-js prettify
jsformat
pretty json
python3
sublimelinter
vue syntax highlight
DeleteBlankLines


atom
----------------
https://www.hangge.com/blog/cache/detail_1149.html

Crtl+Shift+M       开启Markdown实时预览
Command+Shift+P    打开命令窗口，可以运行各种菜单功能
Command + T        快速多文件切换
Command + F        文件内查找和替换
Command + Shift + F    多文件查找和替换
Command + [    对选中内容向左缩进
Command + ]    对选中内容向右缩进
Command + \    显示或隐藏目录树
Crtl + m       相应括号之间，html tag之间等跳转
Crtl + Alt + B   格式化代码（需要安装atom-beautify）
Crtl + `        调起CLI命令行界面（需要安装terminal-panel）


常用插件：
minimap
minimap是一个预览全部代码的一个插件，同时能方便的移动到指定的文件位置。

atom-beautify
atom-beautify是一个格式化代码的插件，支持HTML, CSS, JavaScript, PHP, Python, Ruby, Java, C, C++, C#, Objective-C,CoffeeScript, TypeScript, SQL等多种语言。
安装后可以使用 Crtl + Alt + B 快捷键进行格式化。

autocomplete-* 系列
autocomplete-*系列包含各个语言的代码自动补全功能，你需要什么语言的就可以下载该语言相关的插件即可
autocomplete-paths：填写路径的时候有Sug提示
autocomplete-php：php代码提示补全
autocomplete-java：java代码提示补全

pigments
pigments是项目文件中，样式显色显示的的插件。在Atom中的下载量可是相当的高。对于前端人员来讲还是很重要的一个插件。

terminal-panel
用于执行命令并显示输出。打开终端面板快捷键：Ctrl + `

docblockr
可以帮助我们方便快速地写注释

avascript-snippets
让我们书写js时使用各种缩写，自动补全代码。

file-icons
让文件前面有彩色图片，使文件类型看得更加清除舒服



本地搭建gitbook
--------------------
https://blog.csdn.net/Iron_Ye/article/details/83254911
https://yuzeshan.gitbooks.io/gitbook-studying/content/publish/gitbook.html
部署服务器：
https://www.jianshu.com/p/a109b2baa519
mac:
https://www.jianshu.com/p/9f24f8e27fc6

// 检查npm是否安装成功
 npm -v
// 检查node是否存在
 node -v
// 安装Gitbook命令
sudo npm install -g gitbook-cli
// 检查是否安装成功
gitbook -v


cd demo
# 初始化之后会看到两个文件，README.md ，SUMMARY.md
gitbook init
# 生成静态站点，当前目录会生成_book目录，即web静态站点
gitbook build ./
# 启动web站点，默认浏览地址：http://localhost:4000
gitbook serve ./


linux:
https://www.jianshu.com/p/ec1e7d2c76c6





tree:
---------------------




MarkDown语法
---------------------
https://blog.csdn.net/Iron_Ye/article/details/83254911
网页转换为md格式： http://ksria.com/simpread/

Markdown 是一种「电子邮件」风格的「标记语言」,Gitbook就是采用这种语言规范来编辑。

标题
# 一级标题（H1）
## 二级标题（H2）
### 三级标题（H3）
...依次类推

注：# 和「一级标题」之间建议保留一个字符的空格，这是最标准的 Markdown 写法。
列表
*,+,-符号的作用一样，都是表示无序列表

列表格式在MarkDown中比较常见
// - 和文本之间有空格
- 文本1
- 文本2
- 文本3

如果希望有序列
1.文本
2.文本
3.文本

插入链接和图片
// 文本链接
// 图片链接
/**! [](图片链接地址):注意不能中间有空格，我这里因为简书原因，连代码块区域都检查图片*/

引用
// > 和文本之间有空格
> 文本
粗体和斜体
1.斜体表示：*文本*
2.粗体表示：**文本**
表格
// 每列使用“|”隔开，每行标题和内容使用“| ----- |”隔开
1. 默认靠左对齐: | ----- |
2. 靠右对齐：| -----: |
3. 居中显示：| :-----: |

| Table1 | Table2 | Table3 |
| ------ |:------:| ------:|
| 靠左   | 居中   | 靠右   |
| 靠左   | 居中   | 靠右   |
| 靠左   | 居中   | 靠右   |
预览

Table1  Table2  Table3
靠左  居中  靠右
靠左  居中  靠右
靠左  居中  靠右
代码块区域（阴影区）
```中间换行 ```表示

分割线
三个以上的*或者-符号表示




内网搭建云盘
-------------
owncloud
kiftd

内网dns服务器搭建
----------------


分布式系统搭建
-------------
go-fastdfs


博客，个人论坛
-------------
wordpress
https://www.digitalocean.com/community/tutorials/how-to-install-wordpress-with-lamp-on-ubuntu-16-04
gitbook
github.io


格式化快捷键
-------------
webstorm: ctrl + alt + L
eclipse: Ctrl+Shift+F
prettyJson: ctrl+alt+j


eclipse：
局部搜索：cmd + F
全局搜索：ctrl + H
搜索类名：ctrl + shift + R


intellij idea:


局部搜索：ctrl + F
全局搜索：ctrl + shift + F
搜索类名：



提取ioslog
-------------
qadevice mac需要安装的插件：
brew install -v --HEAD --fetch --build-from-source usbmuxd libimobiledevice ideviceinstaller

ifuse+libimobiledevice
https://www.cnblogs.com/zhouxihi/p/10369580.html
https://www.jianshu.com/p/31de4b15b347?version=4.7.2
Error:
ideviceinstaller 报错 Could not connect to lockdownd. Exit
https://www.jianshu.com/p/472f6cbce9c2


1. 获取设备已安装app的bundleID
ideviceinstaller -l

2.安装卸载
//命令安装一个ipa文件到手机上，如果是企业签名的，非越狱机器也可以直接安装了。
ideviceinstaller -i xxx.ipa

//如果连接了多部手机需要分别安装时，请使用UDID指定：
ideviceinstaller -u [udid] -i *.ipa

//命令卸载应用，需要知道此应用的bundleID
ideviceinstaller -U [bundleID]

3. 查看系统日志
idevicesyslog

4. 查看当前已连接的设备的UUID
idevice_id --list

5. 截图
idevicescreenshot

6. 查看设备信息
ideviceinfo

7. 获取设备时间
idevicedate

8. 设置代理
iproxy
　usage: iproxy LOCAL_TCP_PORT DEVICE_TCP_PORT [UDID]

9. 获取设备名称
idevicename

10. 查看和操作设备的描述文件
ideviceprovision list

11. 挂载DeveloperDiskImage，用于调试(这个在我的机器上面不能用， 应该是缺少什么东西了)
ideviceimagemounter

12. 调试程序
idevicedebug




挂载文件系统工具ifuse 1.1.3
-----------------------
安装
brew cask install osxfuse
brew install ifuse
或者：
安装ifuse:
cd ifuse_folder
./autogen.sh 等待这个检查项都通过,然后
sudo make
sudo make install

1.ifuse -h会有帮助文档

2.挂载卸载
//挂载 ifuse [挂载点]
sudo mkdir myapp
sudo ifuse myapp

卸载挂载点
fusermount -u [挂载点]
//这个指令如果不行， 改用sudo umount myapp

3.挂载某个应用的documents
ifuse --documents [bundleID] [挂载点]

4.挂载某应用的整个沙盒目录
ifuse --container [bundleID] [挂载点]
大数据打点写的位置
/Library/Caches/Feedback/logger..


appium
----------
1.安装jdk,appium,adb
2.xcode,libimobiledevice，appium
brew install -v --HEAD --fetch --build-from-source usbmuxd libimobiledevice ideviceinstaller
3.设置webdriver
server的webdriver路径：
/usr/local/lib/node_modules/appium/node_modules/appium-xcuitest-driver/WebDriverAgent
桌面版本 webdriver位置
/Applications/Appium.app/Contents/Resources/app/node_modules/appium-webdriveragent

执行：sh Scripts/bootstrap.sh

webdriver出问题了：
删除原来的webdriver
webdriver目录下clone webdriver
git clone https://github.com/facebook/WebDriverAgent.git
./Scripts/bootstrap.sh

xcode打开然后更改bundle,目标选择WebDriverAgentRunner，执行Product/Test

查看苹果设备：
instruments -s devices

我的appium ios配置：
{
  "deviceName": "PG-0193",
  "platformVersion": "13.1",
  "udid": "3e2f4023988f2e674b26ee7a8b55d65fbd034260",
  "automationName": "XCUITest",
  "noReset": false,
  "platformName": "iOS",
  "bundleId": "com.vstudio.salad",
  "autoLaunch": false
}
// Capabilities官方文档：
https://github.com/appium/appium/blob/master/docs/en/writing-running-appium/caps.md
http://appium.io/docs/en/writing-running-appium/caps/index.html

ios打包
------------
fastlane


后端接口图形化工具
--------------
kibana


jenkins
--------
定时构建：
0 10-18/2 * * 1-5

UI好用的老版本：
http://mirrors.jenkins.io/war-stable/
Jenkins 2.235.5

遇到的坑：
---------
https://www.jianshu.com/p/4d182d7fbf01
https://www.jianshu.com/p/5f671aca2b5a

jenkins不要密码：
https://www.jianshu.com/p/6591c9bdcca6

忘记密码：
jenkins brew安装文件夹:/Users/captain/.jenkins
https://www.jianshu.com/p/0f828265ceb1


jenkins登录无效：
https://blog.csdn.net/m0_37738114/article/details/80660262
查看是否存在多个jenkins进行，kill -9 pid掉所有的进程，然后打开想要的
ps -ef | grep -v grep |grep jenkins


jenkins catalina运行脚本，提示Operation Not Permitted
----------------------------------------------------
https://appletoolbox.com/seeing-error-operation-not-permitted-in-macos-mojave/

cmd+r启动
终端输入命令：
csrutil disable
csrutil status


启动和关闭jenkins:
启动
sudo launchctl load /Library/LaunchDaemons/org.jenkins-ci.plist
关闭
sudo launchctl unload /Library/LaunchDaemons/org.jenkins-ci.plist


brew安装jenkins不能被局域网访问：
https://www.jianshu.com/p/cfe48815e7da
-------------------------------------
下面两个文件改127.0.0.1为0.0.0.0
/Users/captain/Library/LaunchAgents/homebrew.mxcl.jenkins.plist
/usr/local/opt/jenkins/homebrew.mxcl.jenkins.plist

要搭建jenkins持续构建集成环境，首先要安装tomcat和JDK；

一、Tomcat是其中一个开源的且免费的java Web服务器，是Apache软件基金会的项目;
1.配置java环境，配置Tomcat之前需要配置java环境；
2.brew install tomcat


首先保证brew命令能够正常使用；

1. 搜索tomcat是否存在：
brew search tomcat

2. 安装tomcat：
brew install tomcat

3. 检查是否安装成功：
catalina -h

4. 运行tomcat：
catalina run

或者：
sudo sh startup.sh //启动
sudo sh shutdown.sh //关闭

Tomcat的默认端口是8080，如果运行成功可通过http://localhost:8080访问
webapp的根目录(CATALINA_HOME)为:/usr/local/Cellar/tomcat/7.0.33/libexec/webapps/ROOT/


Jenkins安装简介：
https://www.cnblogs.com/zhouxihi/p/10290869.html
Jenkins是一个开源的自动化服务器。由Java和上百个插件组成，支持编译，测试，部署任意的自动化项目
源网站： http://blog.csdn.net/taishanduba/article/details/50452601
http://www.jianshu.com/p/b4efe5a3b442
http://www.cnblogs.com/zhanggui/p/6227832.html
使用： http://blog.csdn.net/potato512/article/details/52289136

1.homebrew 安装 Jenkins
brew install jenkins

2.链接 launchd 配置文件
ln -sfv /usr/local/opt/jenkins/*.plist ~/Library/LaunchAgents
如果要其他机器也可以访问，把ip地址改为广播地址:<string>--httpListenAddress=0.0.0.0</string>

3.修改完成,执行命令行:
launchctl load ~/Library/LaunchAgents/homebrew.mxcl.jenkins.plist

4.命令行启动Jenkins
jenkins
// brew services start jenkins
5.打开浏览器,输入 localhost:8080 就可看到Jenkins的web界面

6.Jenkins的一些操作
http://localhost:8080/exit     //退出Jenkins
http://localhost:8080/restart  //重启
http://localhost:8080/reload   //重新加载
http://localhost:8080/updateCenter  //插件更新中心
ln -sfv /usr/local/opt/jenkins/*.plist ~/Library/LaunchAgents  开机自动启动


jenkins ios打包
-------------------
PPAutoPackageScript
https://github.com/jkpang/PPAutoPackageScript


xcodebuild
-----------
https://www.jianshu.com/p/3f43370437d2
http://liumh.com/2015/11/25/ios-auto-archive-ipa/
https://help.apple.com/xcode/mac/current/#/dev23ea8b877
man xcodebuild

xcodebuild archive -workspace 项目名称.xcworkspace
                   -scheme 项目名称
                   -configuration 构建配置
                   -archivePath archive包存储路径
                   CODE_SIGN_IDENTITY=证书
                   PROVISIONING_PROFILE=描述文件UUID

-workspace 这个就是项目名
-scheme 可以通过xcodebuild -list获取
-configration 一些参数，也可以通过xcodebuild -list获取，一般使用Debug、Release
-archivePath archive后的路径
CODE_SIGN_IDENTITY 证书的Inentity
PROVISIONING_PROFILE 描述文件UUID


/usr/bin/xcodebuild archive -workspace /Users/jcci/.jenkins/jobs/Salad/workspace/Avatar.xcworkspace -scheme Avatar -configuration Debug only_active_arch=no defines_module=yes -archivePath /Users/jcci/Documents/saladpkg/Avatar.xcarchive -sdk iphoneos


xcodebuild -exportArchive -archivePath archive文件的地址.xcarchive
                          -exportPath 导出的文件夹地址
                          -exportOptionsPlist exprotOptionsPlist.plist
                          CODE_SIGN_IDENTITY=证书
                          PROVISIONING_PROFILE=描述文件UUID


/usr/bin/xcodebuild -exportArchive -exportOptionsPlist /Users/jcci/Documents/saladpkg/ExportOptions_toolchain_distribution.plist -archivePath /Users/jcci/Documents/saladpkg/Avatar.xcarchive -exportPath /Users/jcci/Documents/saladpkg/version_libo_devEggplant-freeStyle/2020-04-03/_toolchain_distribution_Debug2020-04-03_16-15-45


xcodebulid报错：
xcode-select: error: tool 'xcodebuild' requires Xcode, but active developer directory '/Library/Developer/CommandLineTools' is a command line tools instance

解决的办法是：
https://blog.csdn.net/aff60756/article/details/101998919

修改xcode指向的目录

xcode-select -s /Applications/Xcode.app/Contents/Developer


cocoapods
---------
# 安装：
安装brew
安装ruby
安装cocoapods：
sudo gem install cocoapods 

vim Podfile
pod install


# 升级pod
https://www.jianshu.com/p/9fe5278a5018

1、首先在终端执行：
$ sudo gem update --system
结果显示：
bad response Not Found 404 (https://gems.ruby-china.org/specs.4.8.gz)
因为连接不到镜像，需要更换镜像

2、更换镜像
首先执行以下命令，获取到当前的镜像，并删除
$ gem sources -l 
$ gem sources --remove  https://ruby.taobao.org/
添加新的镜像：
$ gem source -a https://gems.ruby-china.com
再次查看当前镜像：
$ gem sources -l 
结果若是如下，则为替换成功：
*** CURRENT SOURCES ***
https://gems.ruby-china.com
再次升级cocoapods，以下两种方式，也可都选择：
$ sudo gem update --system
$ sudo gem install cocoapods -n/usr/local/bin
完成！


ubuntu安装deb文件(命令)
---------------------
 1.cd 到安装包的目录
 2.sudo dpkg -i file.deb（如果是red hat linux的rpm格式，用rpm -ivh file.rpm）


mac nginx
---------
https://www.cnblogs.com/tandaxia/p/8810648.html
1.xcode-select --install
2.安装brew
3.brew install nginx
4.sudo nginx // 启动
// 或者启动：cd /usr/local/nginx && sudo ./nginx
// 默认为本地的8080端口
// http://localhost:8080/
5.自定义
vim /usr/local/etc/nginx/nginx.conf
第一行添加：设置访问权限( user root owner; )，不然等会访问网站会出现403错误
在server中更改设置的端口，和网站路径，默认打开的网页

6.保存退出，并重启
sudo nginx -s reload

7.检查nginx配置是否正确
(sudo) nginx -t

8.kill掉nginx
ps -ef | grep nginx
sudo kill -QUIT 主进程号
sudo kill -TERM 主进程号


问题情况：nginx监听的端口例如是8080，外网开放的端口为80，将80端口NAT到内部的8080端口，这时使用外网地址：http://mydomain/test访问时如果不在域名后面加/，那么域名地址会自动变为http://mydomain:8080/test/。

解决方法：这是因为nginx做了端口重定向，只需要在nginx.conf配置文件的http或server中添加：port_in_redirect off;


反向代理软件：nginx, nat123
nginx是单纯的反向代理，执行效率较高，通过配置文件等方式，可以自行搭建反向代理服务，对于不同的域名可以转发不同的路线服务器。nat123是综合了NAT和反向代理，可以实现HTML走80响应，图片FLASH等走其他加速服务器，速度较快，可以用于解决80端口问题，或直接使用对网站进行加速。


问题：（bugzilla或者其他server）上传文件提示： NGINX “413 REQUEST ENTITY TOO LARGE
http://smilejay.com/2015/05/nginx-request-entity-too-large/

解决办法：
首先检查Bugzilla本身的附件上传限制大小，在Bugzilla的“Administration -> Parameters -> Attachments”的设置maxattachmentsize参数。发现原来我已将其改为8000(KB）。

然后看Nginx配置文件（比如在这个路径/etc/nginx/conf.d/default.conf），发现里面没有设置client_max_body_size参数，而默认是1MB；
在server{} 或 http {} 中添加“client_max_body_size 8M;”，
将Nginx接受客户端requst最大的body大小设置为8MB。
修改Nginx配置后，用service nginx reload命令重新加载配置或者restart nginx。

如果是使用PHP开发应用，我曾在写“PHP实现文件上传功能”时，介绍了php.ini中设置文件上传大小、post请求大小的限制。
http://smilejay.com/2014/05/php-upload-files/
https://www.cnblogs.com/wangluochong/p/5557391.html

upload_max_filesize = 8M
post_max_size = 10M
memory_limit = 20M



nginx反向代理：
--------------
https://www.cnblogs.com/ysocean/p/9392908.html

nginx.conf中加入：

server {
        listen       80;
        server_name  datafilter.qa.com;
        location / {
            proxy_pass http://192.168.1.56:8888/datafilter;
            index  index.html index.htm index.jsp;
            proxy_redirect off;
            proxy_set_header Host $Host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_hide_header "Cache-Control";
        }

server {
        listen       80;
        server_name  book.salad.com;
        location / {
            proxy_pass http://10.1.22.239:8181;
            index  index.html index.htm index.jsp;
            proxy_redirect off;
            proxy_set_header   Host             $host;
            proxy_set_header   Accept-Encoding  "";
            proxy_set_header   X-Real-IP        $remote_addr;
            proxy_set_header   X-Forwarded-For  $proxy_add_x_forwarded_for;
            proxy_hide_header "Cache-Control";
            proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;
            proxy_max_temp_file_size 0;
            proxy_connect_timeout      90;
            proxy_send_timeout         90;
            proxy_read_timeout         90;
            proxy_buffer_size          4k;
            proxy_buffers              4 32k;
            proxy_busy_buffers_size    64k;
            proxy_temp_file_write_size 64k;
        }
    }


server name:
-----------------
1.两个域名之间用空格
server_name 123.com www.123.com
2.域名可以用通配符*
server_name *.123.com www.123.*
3.可以使用正则表达式， 用“~”作为正则表达式字符串的开始标记：
server_name ~^www\d+\.123\.com$;


server name 匹配的顺序优先级如下：

①、准确匹配 server_name
②、通配符在开始时匹配 server_name 成功
③、通配符在结尾时匹配 server_name 成功
④、正则表达式匹配 server_name 成功


location
-----------------------
https://segmentfault.com/a/1190000020334967
location [ = | ~ | ~* | ^~ | /] uri {
}

1、= ：用于不含正则表达式的 uri 前，要求请求字符串与 uri 严格匹配，如果匹配成功，就停止继续向下搜索并立即处理该请求。
2、~：用于表示 uri 包含正则表达式，并且区分大小写。
3、~*：用于表示 uri 包含正则表达式，并且不区分大小写。
4、^~：用于不含正则表达式的 uri 前，要求 Nginx 服务器找到标识 uri 和请求字符串匹配度最高的 location 后，立即使用此 location 处理请求，而不再使用 location 块中的正则 uri 和请求字符串做匹配。
5、 / 为通用匹配，如果没有其它匹配,任何请求都会匹配到。
注意：如果 uri 包含正则表达式，则必须要有 ~ 或者 ~* 标识。



负载均衡
-------------------------
https://blog.csdn.net/qq_35119422/article/details/81505732
https://blog.csdn.net/qq_33404395/article/details/80567233
#配置 nginx 的站点为 192.168.17.67
server {
    listen       80;
    server_name  192.168.17.69;
    location / {
        proxy_pass   http://web;
        index  index.html index.htm;
    }
}
# 反向代理 192.168.17.69:20001 ， 192.168.17.69:20002 ， 192.168.17.69:20003 三个站点，并实现负载均衡
upstream web  {
    server 192.168.17.69:20001;
    server 192.168.17.69:20002;
    server 192.168.17.69:20003;
}


nginx替换域名：
------------------
http://www.21yunwei.com/archives/5044

proxy_cache_key "$host$request_uri";
upstream baidu {
     server 103.235.46.39:80 max_fails=3;
}
server {
    listen 80;
    server_name test.21yunwei.com;
    location / {
        proxy_cache_valid  200 302 1h;
        proxy_cache_valid  404 1m;
        proxy_redirect http://www.baidu.com/ /;
        proxy_cookie_domain baidu.com  21yunwei.com;
        proxy_pass http://baidu;
        proxy_set_header Host "www.baidu.com";
        proxy_set_header Accept-Encoding "";
        proxy_set_header User-Agent $http_user_agent;
        proxy_set_header Accept-Language "zh-CN";
        sub_filter www.baidu.com  test.21yunwei.com;
        sub_filter_once on;
        sub_filter_types  *;
    }
}


rewrite: 域名重写
----------------
https://www.cnblogs.com/czlun/articles/7010604.html

rewrite regex replacement [flag];

server {
        listen 80;
        server_name abc.com;
        rewrite ^/(.*) http://www.abc.com/$1 permanent;

}
server {
        listen 80;
        server_name www.abc.com;
        location / {
                root /data/www/www;
                index index.html index.htm;
        }
        error_log    logs/error_www.abc.com.log error;
        access_log    logs/access_www.abc.com.log  main;
}

或者：

server {
        listen 80;
        server_name abc.com www.abc.com;
        if ( $host != 'www.abc.com'  ) {
                rewrite ^/(.*) http://www.abc.com/$1 permanent;
        }
        location / {
                root /data/www/www;
                index index.html index.htm;
        }
        error_log    logs/error_www.abc.com.log error;
        access_log    logs/access_www.abc.com.log  main;
}

openwrt nginx
--------------
opkg update && opkg install nginx-ssl
/etc/nginx/nginx.conf


uhttpd
--------
/etc/config/uhttpd



mac apache2
-------------
https://blog.csdn.net/feiwutudou/article/details/79057647

停止 High Sierra后预装的Apache 2.4，并删除自启动
sudo apachectl stop
sudo launchctl unload -w /System/Library/LaunchDaemons/org.apache.httpd.plist 2>/dev/null

管理apache服务
$ sudo apachectl start
$ sudo apachectl stop
$ sudo apachectl -k restart   （-k意味着强制）

安装新的apache：
brew install apache2

修改配置文件：
vim /usr/local/etc/httpd/httpd.conf


修改：
1. Listen 80
2. DocumentRoot, Directory为目录
3. 如下文件内容AllowOverride 改为All
# AllowOverride controls what directives may be placed in .htaccess files.
# It can be "All", "None", or any combination of the keywords:
#   AllowOverride FileInfo AuthConfig Limit                                         
#
AllowOverride All （在Document这个里面）

4. 取消注释mod_rewrite.so这行
5. ServerName 127.0.0.1:80 (或者改为localhost)


brew services restart httpd/apache2
或者：
sudo apachectl restart


apache工作目录：/usr/local/var/www/


vhost位置
----------
https://www.jianshu.com/p/d6207118c577
系统的vhosts目录
/private/etc/apache2/extra/httpd-vhosts.conf
homebrew安装的vhost目录
/usr/local/etc/httpd/extra/httpd-vhosts.conf


格式：
<VirtualHost *:80>
    ServerAdmin webmaster@localhost
    ServerName owncloud
    ServerAlias www.owncloud
    DocumentRoot /usr/local/var/www/owncloud
    ErrorLog ${APACHE_LOG_DIR}/error.log
    CustomLog ${APACHE_LOG_DIR}/access.log combined
</VirtualHost>

检测apache2语法：
apache2ctl configtest
重新加载并更新：
sudo systemctl reload apache2



mac自带apache和php服务
---------------------
https://blog.csdn.net/qq_41659353/article/details/121769393

apache:
启动: sudo apachectl start
自带apache的配置文件： sudo vi /etc/apache2/httpd.conf

php:
配置 apache 配置文件
1、输入 sudo vi /etc/apache2/httpd.conf
2、找到 #LoadModule php7_module libexec/apache2/libphp7.so 将 # 删除保存

启用Php
1、复制php.ini
在终端中输入cd /etc/后回车，然后输入sudo cp php.ini.default php.ini即可
2、检测php是否成功
新建一个文件，命名为test.php，里面内容为<?php echo"PHP启用成功啦！"?>
将文件拖入/etc/Library/WebServer/Documents/目录下，这是Apache的默认访问目录
然后在浏览器中输入http://localhost/test.php看到“PHP启用成功啦！”的文字，就代表成功了。

修改 apache 默认根目录
打开配置文件, 找到 DocumentRoot 以及 标签
sudo vi /etc/apache2/httpd.conf
修改成自己的项目目录
DocumentRoot "/Users/chenyang/Code/Web"
<Directory "/Users/chenyang/Code/Web">



mac php
---------
https://blog.csdn.net/qq285744011/article/details/103729227/

/usr/local/etc/httpd/httpd.conf中添加：
LoadModule php7_module /usr/local/opt/php/lib/httpd/modules/libphp7.so
<FilesMatch \.php$>
    SetHandler application/x-httpd-php
</FilesMatch>


# 把“DirectoryIndex index.html”修改为：
DirectoryIndex index.php index.html


# 启用以下三行
LoadModule socache_shmcb_module lib/httpd/modules/mod_socache_shmcb.so
Include /usr/local/etc/httpd/extra/httpd-vhosts.conf
Include /usr/local/etc/httpd/extra/httpd-mpm.conf


# 找到<Directory />标签，修改其内部的：“Require all denied”为：
Require all granted


# 找到<IfModule mime_module>标签，在内部添加下面的代码，使Apache能解析PHP文件，否则PHP文件只会显示源码而不解析：
AddType application/x-httpd-php .php

保存，重启apache
#sudo apachectl restart
brew services restart apache2
php -m
php -i


安装不维护的php
--------------
https://blog.csdn.net/lxy4239/article/details/129497198
//将第三方仓库加入brew
brew tap shivammathur/php
//安装PHP
brew install shivammathur/php/php@7.4

//替换Mac自带PHP环境并刷新环境变量
Linking /usr/local/Cellar/php@7.4/7.4.29.reinstall... 25 symlinks created.

If you need to have this software first in your PATH instead consider running:
 echo 'export PATH="/usr/local/opt/php@7.4/bin:$PATH"' >> ~/.zshrc
 echo 'export PATH="/usr/local/opt/php@7.4/sbin:$PATH"' >> ~/.zshrc ```
//刷新执行
source ~/.zshrc
php -v


配置mac owncloud
-----------------
1.mac自带apache和php服务,也可以用自带的，我这里先先禁止自带服务
2.brew install apache2 php@7.2 mysql
3.配置apache文件，sql(我这里用的8，推荐用5.7或者更早的版本，后面的版本一堆问题)
4.下载owncloud，解压到apache工作目录
下载地址：
https://download.owncloud.com/server/stable/?sort=time&order=desc
5.设置其他插件

owncloud登录背景图的路径： owncloud/core/img/backgroud
域名配置地址：owncloud/config/config.php  'trusted_domains' array()里面增加域名
array (
    0 => 'localhost',
    1 => '192.168.3.113',
    2 => 'mynas.com',
  ),


wget
-------------
wget url  #下载文件

mac mysql
----------
系统安装的mysql，非brew安装
dmg下载网址：
https://downloads.mysql.com/archives/community/
catalina最高支持5.7.29
安装：
https://www.cnblogs.com/liyihua/p/12306159.html


mysql安装
----------
ubuntu 18.04安装mysql
https://www.digitalocean.com/community/tutorials/how-to-install-mysql-on-ubuntu-18-04

sudo apt update
sudo apt install mysql-server
sudo mysql_secure_installation

查看用户验证以及权限：
sudo mysql
// 查看所有用户的验证方法
mysql> SELECT user,authentication_string,plugin,host FROM mysql.user;
// 查看当前的host及用户信息匹配顺序，先host顺序匹配、后user顺序匹配
SELECT authentication_string, host, user,account_locked FROM mysql.user ORDER BY host desc ,user desc;

// 更改root用户通过密码验证，用密码登录需要mysql -u root -p
mysql> ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY 'password';
ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY 'zhuniu1211';
// 重新加载用户授权列表
mysql> FLUSH PRIVILEGES;

// 创建用户
mysql> CREATE USER 'sammy'@'localhost' IDENTIFIED BY 'password';
mysql> CREATE USER 'captain'@'localhost' IDENTIFIED BY 'zhuniu1211';

// 用户授权
mysql> GRANT ALL PRIVILEGES ON *.* TO 'captain'@'localhost' WITH GRANT OPTION;
部分数据库授权
GRANT ALL ON owncloud.* to 'owncloud'@'localhost' IDENTIFIED BY 'Zhuniu1210*';


----------------------------------

// http://blog.sina.com.cn/s/blog_7282b74b01030imu.html
// sql8.x不能直接像上述授权的时候，创建用户，在mac系统通所有版本也不能上述操作


// 创建用户并授权1 (注意用户名和密码不能一致，不然报错。) ---推荐这个，sql8是先创建用户，再授权. 8之前的版本可以创建同时并授权
CREATE USER 'foo'@'localhost' IDENTIFIED WITH mysql_native_password BY 'bar';
GRANT ALL PRIVILEGES ON database_name.* TO 'owncloud'@'localhost' WITH GRANT OPTION;

// 创建用户并授权2， sql8下面第二句提示没权限
CREATE USER 'salad'@'%' IDENTIFIED BY 'salad';
GRANT ALL PRIVILEGES ON *.* TO 'salad'@'%' WITH GRANT OPTION;

// 创建用户并授权3
CREATE USER 'owncloud'@'localhost' IDENTIFIED BY 'salad';
grant select,insert,update,delete on owncloud.* to 'owncloud'@'localhost';

// 登出并查看权限
mysql -u foo -p


// 修改user为以前的密码模式
ALTER USER salad@localhost IDENTIFIED WITH mysql_native_password BY 'salad';
update mysql.user set authentication_string=, plugin='mysql_native_password' where user='root';

//删除用户
delete from mysql.user where user='captain';

// 删除数据库和表
drop database 数据库名;
drop table 数据表名;

// 测试mysql的安装
systemctl status mysql.service

// 如果mysql没有运行，则可以使用来启动它
sudo systemctl start mysql

//以captain用户来查看mysql版本
sudo mysqladmin -p -u captain version
sudo mysqladmin -p -u root version



caching_sha2_password改成native_password:
----------------------------------------
https://blog.csdn.net/maoxinwen1/article/details/88629313
// 启动Mysql服务
mysql.server start

// 登录Mysql(需要输入密码)
mysql -u root -p

// 选择数据库(这一步不可省略)
use mysql

// 查看plugin设置
select host, user, plugin from user;

// 可以看到root的plugin是caching_sha2_password，我们希望改成mysql_native_password
ALTER USER root@localhost IDENTIFIED WITH mysql_native_password BY 'xxxxx';
ALTER USER salad@localhost IDENTIFIED WITH mysql_native_password BY 'salad';

// 大功告成，关闭Mysql
exit
mysql.server stop

windows链接虚拟机
-----------------
mstsc

mysql链接数据库
--------------
一、MySQL 连接本地数据库，用户名为“root”，密码“123”（注意：“-p”和“123” 之间不能有空格）
C:>mysql -h localhost -u root -p123

二、MySQL 连接远程数据库（192.168.0.201），端口“3306”，用户名为“root”，密码“123”
C:>mysql -h 192.168.0.201 -P 3306 -u root -p123


搭建bugzilla
-------------
https://zhuanlan.zhihu.com/p/90560505
https://www.jianshu.com/p/79da946bc6ee?tdsourcetag=s_pctim_aiomsg
https://www.bugzilla.org/docs/

ubuntu18.04LTS
我们采用Apache 2 HTTP Server + MySQL Server的环境配置BugZilla

1.切换到root用户并更新
apt update && apt upgrade

2.安装apache2，开发包（要使用 mysql数据库，需要先安装开发包，才能安装DBD::mysql模块）
apt-get install apache2 libmysqld-dev libmysqlclient-dev make gcc -y
// 如果有条件，强烈建议使用HTTPS配置Apache HTTP服务器（比如Let's encrypt）
https://letsencrypt.org/

3.安装mysql
sudo apt install mysql-server
sudo mysql_secure_installation

4.邮件发送功能
apt-get install libnet-ssleay-perl libcrypt-ssleay-perl -y

5.安装bugzilla
wget https://ftp.mozilla.org/pub/mozilla.org/webtools/bugzilla-5.0.6.tar.gz
https://ftp.mozilla.org/pub/mozilla.org/webtools/bugzilla-5.0.6.tar.gz
tar -zxf bugzilla-5.0.6.tar.gz

6.移动bugzilla到/var/www/html文件夹
mv bugzilla-5.0.6 /var/www/html/bugzilla

7.安装缺失的依赖
cd /var/www/html/bugzilla
perl install-module.pl --all

8.安装完成后check
perl checksetup.pl    // 这个需要安装gcc和make

有很多依赖第7步安装不上(这个是参考官网给的)
apt-get install libappconfig-perl libdate-calc-perl libtemplate-perl  build-essential libdatetime-timezone-perl libdatetime-perl libemail-sender-perl libemail-mime-perl libemail-mime-modifier-perl libdbi-perl libdbd-mysql-perl libcgi-pm-perl libmath-random-isaac-perl libmath-random-isaac-xs-perl  libapache2-mod-perl2 libapache2-mod-perl2-dev libchart-perl libxml-perl libxml-twig-perl perlmagick libgd-graph-perl libtemplate-plugin-gd-perl libsoap-lite-perl libhtml-scrubber-perl libjson-rpc-perl libdaemon-generic-perl libtheschwartz-perl libtest-taint-perl libauthen-radius-perl libfile-slurp-perl libencode-detect-perl libmodule-build-perl libnet-ldap-perl libauthen-sasl-perl libfile-mimeinfo-perl libhtml-formattext-withlinks-perl libgd-dev libmysqlclient-dev graphviz python-sphinx

9.进入mysql设置database;
//root用户pw模式登陆（密码有的会默认设置为root, 或者空）
mysql -u root -p
//root用户登陆
mysql

// 创建表
mysql> create database bugs;
// 授权用户，密码根据mysql设置来（密码强度，密码）
mysql> grant all on bugs.* to captain@localhost identified by "123456";
// 或者下面这样授权
mysql> GRANT ALL PRIVILEGES ON *.* TO 'captain'@'localhost' WITH GRANT OPTION;
// 修改mysql用户密码
ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY'newpassword';

// 重新加载授权
mysql> FLUSH PRIVILEGES;
// 退出数据库
mysql> exit;

10.在bugzilla文件夹中设置localconfig
vim localconfig
可能更改如下参数：然后保存
$webservergroup = 'www-data';
$db_driver = 'mysql';
$db_name = 'bugs';   //mysql中创建的database名称
$db_user = 'captain';  //mysql数据库用户
$db_pass = 'zhuniu1211';
$db_port = 3306; //可以通过netstat或者lsof来查看db监听端口，默认3306

11.重新检查第8步
perl checksetup.pl

12.配置apache2
vim /etc/apache2/apache2.conf
在Directory的地方添加：
<Directory /var/www/html/>
    AddHandler cgi-script .cgi
    Options +ExecCGI
    DirectoryIndex index.cgi index.html
    AllowOverride All
</Directory>

保存并退出
ln -s /etc/apache2/mods-available/cgi.load cgi.load
a2enmod cgi headers expires

重启apache2
sudo systemctl restart apache2
// systemctl reload apache2

13.首次访问
http://<ip address>/bugzilla/

//不知道下面这个功能是否是： 注释掉初次访问一直要提示设置域名
编辑Bugzilla目录下的.htaccess文件,用“#”注释掉文件开始部分的“Options -Indexes”这一行

14.其他设置：
你也可以在左侧email选项卡中配置使用你最喜爱的邮件服务商发送邮件，比如：

mail_delivery_method: SMTP
mailfrom: new_gmail_address@gmail.com
smtpserver: http://smtp.gmail.com:465
smtp_username: new_gmail_address@gmail.com
smtp_password: new_gmail_password
smtp_ssl: On
如果你的电子邮件提供商（比如gmail或outlook）需要STARTTLS认证，请在BugZilla/Mailer.pl文件的第165行中，将"ssl"=>……改为=>"STARTTLS"

如果你配置了HTTPS，强烈建议在左侧选项卡最后一栏“高级”中开启HTTPS严格传输安全（HSTS）。

关于其他优化和设置，后续有需求可以慢慢研究！

其他设置项目
---------------
bugzilla的系统配置在： bugzilla/data/params.json

下面这些选项修改完之后都需要在bugzilla目录下执行perl checksetup.pl

1.自定义模板bug写的模板：
https://blog.csdn.net/xiongjialu/article/details/80110649
/var/www/html/bugzilla/template/en/default/bug/create/create.html.tmpl
搜索defaultcontent = defaultcontent
替换后为：defaultcontent = '【设备版本】

【预设条件】

【操作步骤】

【预期结果】

【实际结果】

【发生概率】

【发生日期】
'

机器上是这样定义的：
defaultcontent = "【设备版本】\r\n\r\n【预设条件】\r\n\r\n【操作步骤】\r\n\r\n【预期结果】\r\n\r\n【实际结果】\r\n\r\n【发生概率】\r\n\r\n【发生日期】\r\n"

2.自定义回复模板：
/var/www/html/bugzilla/template/en/default/bug/edit.html.tmpl
查找：[% INCLUDE bug/comment.html.tmpl
加入：
defaultcontent = "【问题定位】

【修复方法】

【影响范围】

【回归版本】
"

defaultcontent = "【问题定位】\r\n\r\n【修复方法】\r\n\r\n【影响范围】\r\n\r\n【回归版本】\r\n"

3.自定义bug详情页面Additional Comment展示在最下面
/var/www/html/bugzilla/template/en/default/bug/edit.html.tmpl
把这个相关代码移动到form表单最下面：[%# *** Additional Comments *** %]上面
  <hr>
<table>
  <tr>
  <td>
    [% IF user.settings.comment_box_position.value == 'before_comments' %]
      [% PROCESS comment_box %]
    [% END %]
  </td>
  <td>
    [% PROCESS section_restrict_visibility %]
  </td>
  </tr>
</table>


4.删除bug详情页面Add Comment的链接
/var/www/html/bugzilla/template/en/default/bug/comments.html.tmpl
删除Add Comment的相关标签

5.解决中文用户乱码问题

6.自定义bugzilla皮肤



设置ssh防火墙
------------
https://www.digitalocean.com/community/tutorials/initial-server-setup-with-ubuntu-18-04

创建新用户，并添加到sudo组
adduser sammy
usermod -aG sudo sammy

防火墙列表
ufw app list
允许防火墙
ufw allow OpenSSH
ufw allow in "Apache Full"
打开防火墙
ufw enable
防火墙状态
ufw status


查看外网ip
sudo apt install curl
curl http://icanhazip.com


ubuntu18.04安装owncloud
-----------------------
https://www.digitalocean.com/community/tutorials/how-to-install-and-configure-owncloud-on-ubuntu-18-04
https://www.digitalocean.com/community/tutorials/how-to-install-linux-apache-mysql-php-lamp-stack-ubuntu-18-04

1.新增一个用户，防火墙允许ssh
2.安装apache2,允许apache full
sudo apt update && sudo apt install apache2
3.安装mysql,见sql安装选项卡
sudo apt update && sudo apt install mysql-server
sudo mysql_secure_installation
4.安装php
sudo apt install php libapache2-mod-php php-mysql
sudo vim /etc/apache2/mods-enabled/dir.conf
移动index.php到第一个位置，像下面这样
<IfModule mod_dir.c>
    DirectoryIndex index.php index.html index.cgi index.pl index.xhtml index.htm
</IfModule>
重启apache2
sudo systemctl restart apache2
检测apache2的状态
sudo systemctl status apache2

附apt一些命令
apt search php- | less
// apt show package_name
apt show php-cli

5.设置虚拟主机（推荐）
----------------
创建目录
// mkdir /var/www/your_domain
mkdir /var/www/datafilter
使用$USER环境变量分配目录的所有权
chown -R $USER:$USER /var/www/datafilter
设置权限
chmod -R 755 /var/www/datafilter
编辑index
nano /var/www/your_domain/index.html

<html>
    <head>
        <title>Welcome to Your_domain!</title>
    </head>
    <body>
        <h1>Success!  The your_domain server block is working!</h1>
    </body>
</html>


新建主机虚拟文件：
sudo nano /etc/apache2/sites-available/your_domain.conf

<VirtualHost *:80>
    ServerAdmin webmaster@localhost
    ServerName your_domain
    ServerAlias www.your_domain
    DocumentRoot /var/www/your_domain
    ErrorLog ${APACHE_LOG_DIR}/error.log
    CustomLog ${APACHE_LOG_DIR}/access.log combined
</VirtualHost>

启用新的主机文件
sudo a2ensite your_domain.conf
禁用默认站点
sudo a2dissite 000-default.conf

测试配置的主机文件是否错误
sudo apache2ctl configtest

重启apache2
sudo systemctl restart apache2

测试apache2应该正常访问
http://your_domain

6.测试php服务：
----------
编辑php文件
sudo nano /var/www/your_domain/info.php

<?php
phpinfo();
?>

访问http://your_domain/info.php正常
如果把info.php改成index.php,则http://your_domain为php里面的内容

测试完成后删除php文件
sudo rm /var/www/your_domain/info.php


7.owncloud开始
--------------
下载cloud公钥
wget https://download.owncloud.org/download/repositories/10.3.2/Ubuntu_18.04/Release.key
sudo apt-key add Release.key
创建owncloud.list文件
echo 'deb http://download.owncloud.org/download/repositories/10.3.2/Ubuntu_18.04/ /' | tee /etc/apt/sources.list.d/owncloud.list
使用包管理器来查找并安装ownCloud，还将安装一些其他PHP库
sudo apt update
sudo apt install php-bz2 php-curl php-gd php-imagick php-intl php-mbstring php-xml php-zip owncloud-files

创建主机文件，可以编辑默认的
vim /etc/apache2/sites-enabled/server_domain_or_IP.conf
<VirtualHost *:80>
    . . .
    DocumentRoot /var/www/owncloud
    . . .
</VirtualHost>

//我配置下面这样：
<VirtualHost *:80>
    ServerAdmin webmaster@localhost
    ServerName owncloud
    ServerAlias www.owncloud
    DocumentRoot /var/www/owncloud
    ErrorLog ${APACHE_LOG_DIR}/error.log
    CustomLog ${APACHE_LOG_DIR}/access.log combined
</VirtualHost>

检测apache2语法：
apache2ctl configtest
重新加载并更新：
sudo systemctl reload apache2

8.配置mysql数据库

mysql>

CREATE DATABASE owncloud;
GRANT ALL ON owncloud.* to 'owncloud'@'localhost' IDENTIFIED BY 'owncloud_database_password';
GRANT ALL ON owncloud.* to 'owncloud'@'localhost' IDENTIFIED BY 'Zhuniu1210*';

FLUSH PRIVILEGES;
exit;

9.配置cloud;
https://server_domain_or_IP

设置管理员账户，密码
填入之前设置的数据库名，数据库用户以及访问密码
数据库主机保留为localhost：
然后完成设置

自定义插件设置：
https://marketplace.owncloud.com/


ubuntu18.04初始化设置
-------------------
https://www.digitalocean.com/community/tutorials/initial-server-setup-with-ubuntu-18-04
1.root登录
apt-get update && apt-get upgrade
2.创建新用户
adduser captain
添加到sudo组
usermod -aG sudo captain
3.设置ssh防火墙
ufw app list
ufw allow OpenSSH
ufw allow in "Apache Full"
ufw enable
ufw status
4.普通用户ssh登录
ssh captain@your_server_ip




wordpress apache2 ubuntu18.04:
-----------------------------
https://www.digitalocean.com/community/tutorials/how-to-install-wordpress-managed-database-ubuntu-18-04
https://www.digitalocean.com/community/tutorials/how-to-install-wordpress-with-lamp-on-ubuntu-16-04
ubuntu18.04
1.新增一个用户，防火墙允许ssh
2.安装apache2,允许apache full
sudo apt update && sudo apt install apache2
3.安装mysql,见sql安装选项卡
sudo apt update && sudo apt install mysql-server
sudo mysql_secure_installation
mysql>
ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY 'zhuniu1211';
SELECT user,authentication_string,plugin,host FROM mysql.user;
FLUSH PRIVILEGES;
exit;

4.安装php
sudo apt install php libapache2-mod-php php-mysql
5.移动index.php到第一个位置
sudo vim /etc/apache2/mods-enabled/dir.conf
sudo systemctl restart apache2
sudo systemctl status apache2
6.创建数据库
mysql>
CREATE DATABASE wordpress DEFAULT CHARACTER SET utf8 COLLATE utf8_unicode_ci;
GRANT ALL ON wordpress.* to 'wordpress'@'localhost' IDENTIFIED BY 'zhuniu1211';

7.php扩展
sudo apt install php-curl php-gd php-mbstring php-xml php-xmlrpc php-soap php-intl php-zip

// ubuntu 16.04安装的这个
sudo apt-get install php-curl php-gd php-mbstring php-mcrypt php-xml php-xmlrpc
// 下面这个应该不用装,这是安装php73的时候才安装的扩展
sudo apt update && sudo apt install lsphp73-common lsphp73-curl lsphp73-imagick lsphp73-imap lsphp73-json lsphp73-memcached lsphp73-mysql lsphp73-opcache lsphp73-redis

sudo systemctl restart apache2

8.调整Apache的配置以允许.htaccess覆盖和重写

新建wordpress站点
cd /etc/apache2/sites-available/
vim wordpress.conf
<VirtualHost *:80>
    ServerAdmin webmaster@localhost
    ServerName wordpress
    ServerAlias www.wordpress
    DocumentRoot /var/www/wordpress
    ErrorLog ${APACHE_LOG_DIR}/error.log
    CustomLog ${APACHE_LOG_DIR}/access.log combined
</VirtualHost>
启用新站点
sudo a2ensite wordpress.conf
sudo a2dissite 000-default.conf

设置apache路径
sudo vim /etc/apache2/apache2.conf
<Directory /var/www/wordpress/>
    AllowOverride All
</Directory>

sudo a2enmod rewrite
apache2ctl configtest
systemctl reload apache2

9.下载wordpress
cd /tmp
curl -O https://wordpress.org/latest.tar.gz
tar -zxf latest.tar.gz

touch /tmp/wordpress/.htaccess
cp /tmp/wordpress/wp-config-sample.php /tmp/wordpress/wp-config.php
mkdir /tmp/wordpress/wp-content/upgrade

sudo cp -a /tmp/wordpress/. /var/www/wordpress
更改权限
sudo chown -R www-data:www-data /var/www/wordpress
sudo find /var/www/wordpress/ -type d -exec chmod 750 {} \;
sudo find /var/www/wordpress/ -type f -exec chmod 640 {} \;

从WordPress密钥生成器获取安全值
curl -s https://api.wordpress.org/secret-key/1.1/salt/
把上述生成的秘钥结果替换到下面这个文件
sudo vim /var/www/wordpress/wp-config.php

替换：文档中相关字段
DB_NAME, DB_USER, DB_PASSWORD, DB_HOST(需要加上端口号，一般为3306)
加入：写入系统文件的方法为direct：
define('FS_METHOD', 'direct');

10.额外设置（可选），设置wordpress与mysql通信ssl/tsl
11.访问 https://server_domain_or_IP




安装OpenLiteSpeed Web Server
-------------------------------
https://www.digitalocean.com/community/tutorials/how-to-install-the-openlitespeed-web-server-on-ubuntu-18-04
添加签名
wget -qO - https://rpms.litespeedtech.com/debian/lst_repo.gpg | sudo apt-key add -
添加存储库信息
sudo add-apt-repository 'deb http://rpms.litespeedtech.com/debian/ bionic main'
安装OpenLiteSpeed服务器及其PHP
sudo apt install openlitespeed lsphp73
创建php软链接
sudo ln -sf /usr/local/lsws/lsphp73/bin/lsphp /usr/local/lsws/fcgi-bin/lsphp5
设置OpenLiteSpeed的管理员密码，默认123456
sudo /usr/local/lsws/admin/misc/admpass.sh
lswsctrl验证OpenLiteSpeed服务是否开启
sudo /usr/local/lsws/bin/lswsctrl status
如果没开启用下面命令开启
sudo /usr/local/lsws/bin/lswsctrl start
防火墙打开对应端口
//主页面
sudo ufw allow 8088
//配置页面，都可以在/usr/local/lsws目录下找到
sudo ufw allow 7080
访问默认的OpenLiteSpeed网页
http://server_domain_or_IP:8088
https://server_domain_or_IP:7080

与OpenLiteSpeed相关的所有内容都可以在该/usr/local/lsws目录下找到。

默认虚拟主机的文档根目录（将在其中提供文件的位置）位于/usr/local/lsws/DEFAULT/html。可以在/usr/local/lsws/DEFAULT目录下找到此虚拟主机的配置和日志。



wordpress OpenLiteSpeed server
-------------------------------
未成功
https://www.digitalocean.com/community/tutorials/how-to-install-wordpress-openlitespeed-ubuntu-1804
1.ubuntu初始化-普通用户登录
2.安装openlite server
3.安装mysql,步骤可以见上面选项卡
4.创建数据库
CREATE DATABASE wordpress DEFAULT CHARACTER SET utf8 COLLATE utf8_unicode_ci;
创建接入此数据库的用户
GRANT ALL PRIVILEGES ON wordpress.* TO 'wordpressuser'@'localhost' IDENTIFIED BY 'password';
GRANT ALL PRIVILEGES ON wordpress.* TO 'wordpress'@'localhost' IDENTIFIED BY 'zhuniu1210';
FLUSH PRIVILEGES;
exit;

5.安装php扩展
sudo apt install lsphp73-common lsphp73-curl lsphp73-imagick lsphp73-imap lsphp73-json lsphp73-memcached lsphp73-mysql lsphp73-opcache lsphp73-redis

6.下载wordpress
cd /tmp
curl -O https://wordpress.org/latest.tar.gz
tar -zxf latest.tar.gz

创建文件并移动到服务器工作目录下
touch /tmp/wordpress/.htaccess
cp /tmp/wordpress/wp-config-sample.php /tmp/wordpress/wp-config.php
mkdir /tmp/wordpress/wp-content/upgrade
sudo cp -a /tmp/wordpress/. /usr/local/lsws/Example/html/wordpress

设置权限
sudo chown -R nobody:nogroup /usr/local/lsws/Example/html/wordpress
sudo find /usr/local/lsws/Example/html/wordpress/ -type d -exec chmod 750 {} \;
sudo find /usr/local/lsws/Example/html/wordpress/ -type f -exec chmod 640 {} \;

设置key和配置文件
curl -s https://api.wordpress.org/secret-key/1.1/salt/
sudo vim /usr/local/lsws/Example/html/wordpress/wp-config.php
把上述生成的秘钥结果替换到这个文件
替换：文档中相关字段
DB_NAME, DB_USER, DB_PASSWORD, DB_HOST(需要加上端口号，一般为3306)
加入：写入系统文件的方法为direct：
define('FS_METHOD', 'direct');

7.https://server_domain_or_IP:7080
设置OpenLiteSpeed

选项卡：server configuration  --> External APP
更改如下
Name:lsphp73
Address:uds://tmp/lshttpd/lsphp73.sock
Command:$SERVER_ROOT/lsphp73/bin/lsphp

选项卡：Virtual Hosts  --> General
General Edit
Document Root: $VH_ROOT/html/wordpress/
index Files: index.php, index.html

选项卡：Virtual Hosts  --> Rewrite
Enable Rewrite: yes
Auto Load from .htaccess: yes

选项卡：Virtual Hosts  --> Security
删除最下面Realm list中的 SampleProtectAreas

选项卡：Virtual Hosts  --> Context
删除与/protected/相关的context

右上重启，然后进入http://server_domain_or_IP进行设置





ubuntu18.04设置ssh:
---------------------
https://blog.csdn.net/wgc0802402/article/details/91046196

1. apt-get update && apt-get install openssh-server

2. /etc/init.d/ssh start
/etc/init.d/ssh restart   #重启SSH服务
/etc/init.d/ssh stop      #关闭SSH服务
ps -e | grep sshd      #查看进程

3. vim /etc/ssh/sshd_config
设置：PermitRootLogin yes


ubuntu18.04设置自签名的ssl:
--------------------------
https://www.digitalocean.com/community/tutorials/how-to-create-a-self-signed-ssl-certificate-for-apache-in-ubuntu-18-04


ffprobe检查流媒体信息
----------------------
https://www.imooc.com/article/37692

安装
brew install ffmpeg –with-sdl2 –with-freetype –with-openjpeg –with-x265 –with-rubberband –with-tesseract

查看：
ffprobe xx.mp3
ffprobe xx.mp4
1. 输出格式信息
ffprobe -show_format  pm.mp4
2. 输出每个流的具体信息（以JSON格式）
ffprobe -print_format json  -show_streams pm.mp4
3. 显示帧信息
ffprobe -show_frames pm.mp4
4. 查看包信息
ffprobe -show_packets pm.mp4



比特率，码率
------------------------------------------------
https://zhidao.baidu.com/question/584493439.html

比特率(码率,单位bps, bit,per,second)：文件大小*8/时间s
码率(kbps)=文件大小(字节)X8 /时间(秒)/1000
1000 bit/s = 1 kbit/s （一千位每秒）
1000 kbit/s = 1 Mbit/s （一兆或一百万位每秒）


采样频率一般共分为22.05KHz、44.1KHz、48KHz三个等级；22.05 KHz只能达到FM广播的声音品质，44.1KHz则是理论上的CD音质界限，48KHz则已达到DVD音质了
1000 Mbit/s = 1 Gbit/s (一吉比特或十亿位每秒）

人耳听到的频率： 16～20000Hz， 16Hz-20kHz
为了复原波形，一次振动中，必须有2个点的采样，人耳能够感觉到的最高频率为20kHz。
因此要满足人耳的听觉要求，则需要至少每秒进行40k次采样，用40kHz表达，这个40kHz就是采样率。我们常见的CD，采样率为44.1kHz。




mac下降cer文件转为base64编码的pem：
-------------------------------
python的证书放在：
（通过如下脚本找出位置，然后复制pem到certifi中）
import certifi
print(certifi.where())

openssl x509 -inform der -in /Users/captain/Desktop/\*.camera360.com.cer  -pubkey -noout > /Users/captain/Desktop/key.pem


 swfit汇编语言
 -----------
 call 调用函数
 lea 地址传递
 mov 移动,赋值
 %rdi 带有%的是寄存器
 (%rdi) 带小括号的是寻找寄存器的存储空间
 je,jmp 跳转，即switch case语句中使用

 常用的16个寄存器
 rax, rbx, rcx, rdx, rsi, rdi, rbp, rsp
 r8, r9, r10, r11, r12,r13, r14, r15

 寄存器用途:
 rax,rdx常用作函数返回值使用
 rdi, rsi, rdx, rcx, r8, r0等常用于存放函数参数
 rsp, rbp用于栈操作
 rip作为指令指针：
 存储着cpu吓一跳要执行的指令的地址
 一旦cpu读取一条指令，rip会自动指向下一条指令



PlistBuddy简单使用
-----------------
https://www.jianshu.com/p/2167f755c47e
https://www.jianshu.com/p/56e0c2dfa212

/usr/libexec/PlistBuddy
Usage: PlistBuddy [-cxh] <file.plist>
    -c "<command>" execute command, otherwise run in interactive mode
    -x output will be in the form of an xml plist where appropriate
    -h print the complete help info, with command guide

1.打印info.plist文件
/usr/libexec/PlistBuddy -c "print" info.plist


2.添加：

 添加普通字段：
 /usr/libexec/PlistBuddy -c 'Add :Version string 1.0' info.plist

 添加数组字段，分两步走，注意：key之间用 : 隔开，且不能有空格：
 # 先添加key值
 /usr/libexec/PlistBuddy -c 'Add :Application array' info.plist
 # 添加value值
 /usr/libexec/PlistBuddy -c 'Add :Application: string app1' info.plist
 /usr/libexec/PlistBuddy -c 'Add :Application: string app2' info.plist
 /usr/libexec/PlistBuddy -c 'Add :Application: string app3' info.plist


 添加字典字段，分两步走
 # 先添加key值
/usr/libexec/PlistBuddy -c 'Add :Person dict' info.plist
# 添加value值,
/usr/libexec/PlistBuddy -c 'Add :Age string secret' info.plist
/usr/libexec/PlistBuddy -c 'Add :Person:Name string yans67' info.plist
/usr/libexec/PlistBuddy -c 'Add :Person:sex string boy' info.plist
/usr/libexec/PlistBuddy -c 'Add :Person:weight string 65' info.plist

3.输出某个字段值
 /usr/libexec/PlistBuddy -c 'Print :Person' info.plist


4.删除字段相应的值
 /usr/libexec/PlistBuddy -c 'Delete :Version' info.plist

5.修改某个字段的值
 /usr/libexec/PlistBuddy -c 'Set :Application:1 thi is app1' info.plist

6.合并
 # 将A.plist 合并到 B.plist中
 /usr/libexec/PlistBuddy -c 'Merge A.plist'  B.plist


OSI模型
---------------
https://www.jianshu.com/p/9b9438dff7a2
路由所在的是网络层
交换机在数据链路层


VPN工作在哪一层？
---------------
常见的虚拟专用网络技术有五种：PPTP协议、L2TP协议、IPsec协议、MPLS技术以及SSL虚拟专用网络技术。

PPTP协议工作在OSI第二层。

L2TP协议工作在OSI第二层以及第三层。

IPsec协议工作在OSI第三层。

MPLS工作在OSI第二层以及第三层。

SSL虚拟专用网络工作在Secure Socket Layer。



一根网线接两个水晶头
------------------
https://zhidao.baidu.com/question/38082424.html
T568B压制方法：接:1, 2, 3, 6位置
一组：橙白(1), 橙色(2), 绿白(3), 绿色(6)
二组：蓝白(1), 蓝色(2), 棕白(3), 棕色(6)
另外一头按照正常接法接



vps网络流量监控工具：
---------------------
https://www.freehao123.com/ntopng-munin/
Ntopng和Munin


xcode查找内存泄漏：
https://www.cnblogs.com/iOSv587country/p/4862989.html
https://www.jianshu.com/p/4d94a700de96
https://blog.csdn.net/iOS_Dong_Shuang/article/details/78970674


QQmusic DownloadFile Decoder:(convert QMC File to MP3 or FLAC)
https://github.com/Presburger/qmc-decoder


补码：
正数的原码，反码，补码是一样的；
负数在计算机都是以补码的形式存储，这样的目的是为了方便做减法
它的原码最高位是1，补码是其反码+1

8位的2进制，使用原码或反码表示的范围为[-127, +127]，而使用补码表示的范围为[-128, 127]

java的负数补码表示为十进制：
1、先对各位取反；
2、将其转换为十进制数；
3、加上负号，再减去1。
例如：
11111010，最高位为1，是负数，先对各位取反得00000101，转换为十进制数得5，加上负号得-5，再减1得-6。



安卓打包：
--------
#!/bin/zsh -il

cd ${WORKSPACE}
echo "项目路径："
pwd

rm -rf app/build/outputs
rm -rf output
mkdir output

./gradlew clean "assemble${env}${type}" --info
str=app/build/outputs/apk/${env}/${type}
str="$(echo $str | tr "[:upper:]" "[:lower:]")"
echo "apk路径："
echo $str
cp -r $str/*.apk output



jenkins获取提交记录：
------------------
https://xinle.co/2018/01/04/jenkins-%E8%8E%B7%E5%8F%96-git-%E7%9A%84%E6%8F%90%E4%BA%A4%E8%AE%B0%E5%BD%95%EF%BC%88change-log%EF%BC%89/

1.下载插件源码进行编译：
https://github.com/daniel-beck/changelog-environment-plugin
2.编译环境包括maven, jdk1.8
编译命令：mvn verify
3.上传jenkins后执行安装
文件路径：changelog-environment-plugin-master/target/changelog-environment.hpi
4.配置jenkins
勾选 Add Changelog Information to Environment
Entry Format:
%3$s(at %4$s via %1$s)\n
Date Format:
MM-dd HH:mm:ss
5.需要传入脚本，使用参数："${SCM_CHANGELOG}"

jenkins周期性构建时间；
周一到周六，每天早上7：38开始打包，0，7代表是星期天
H 7 * * 1-6


pycharm打不开
------------
https://blog.csdn.net/Miao_Hen/article/details/106917757

cd /Applications/PyCharm.app/Contents/MacOS
./pycharm

查看error,安装提示进行操作


sh文件转为大小写
--------------
转为大小写
----------
# https://www.cnblogs.com/xiaonian8/p/13730126.html
#! /bin/sh

# 方法一
echo "iiii"
string="abcdEEEEE"
echo $string

#将字符串中的小写字母转换为大写字母
string="$(echo $string | tr '[:lower:]' '[:upper:]')"
echo $string

#将字符串中的大写字母转换为小写字母
string="$(echo $string | tr '[:upper:]' '[:lower:]')"
echo $string


# 方法二
echo $PATH | awk '{print toupper($0)}'
echo $PATH | awk '{print tolower($0)}'

# 文件大小写
awk '{print toupper($0)}' test.txt

#方法三：
echo $PATH | sed 's/[a-z]/\U&/g'
echo $PATH | sed 's/[A-Z]/\L&/g'


dirname xx.x 会返回xx.x的文件夹路径，如果是xx文件夹，则返回当前文件夹的上一级目录




MimeType
------------
android和ios的安装文件MIME类型
.apk:
application/vnd.android.package-archive

.ipa:
application/octet-stream.ipa



发布ipa二维码：
------------
https://blog.csdn.net/cs869133193/article/details/82022080

1.上传原文件.ipa
2.修改并上传.plist
3.组装二维码
itms-services://?action=download-manifest&url=https://qcsource.c360dn.com//salad_iossalad.plist



gitlab机器人
-------------
http://www.ee-nav.com/572.html
https://blog.csdn.net/weixin_42829808/article/details/106118834


supervisor
-----------
#linux安装
https://www.cnblogs.com/junle/p/5168437.html
#mac安装
https://blog.csdn.net/github_39437588/article/details/99716432

brew install supervisor

cd /usr/local/etc
mkdir supervisor.d
vim gitlabhook.ini
内容如下：

[program:gitlabhook]
directory = /Users/c/Documents/gitlab_webhook
command = sh run_server.sh
autostart = true
startsecs = 5
autorestart = true
startretries = 5

;user = captain
;redirect_stderr = true

;stdout_logfile_backups = 20
stdout_logfile=/Users/c/Documents/log/gitlabhook.log
stdout_logfile_maxbytes=10MB
stderr_logfile=/Users/c/Documents/log/gitlabhook-err.log
stderr_logfile_maxbytes=10MB

;environment = PATH="$PATH:/usr/local/bin"



supervisorctl进入管理模式：

reread ;重新加载配置文件
update ;将配置文件里新增的子进程加入进程组，如果设置了autostart=true则会启动新新增的子进程

status ;查看所有进程状态

status <name> ;查看指定进程状态

start all; 启动所有子进程

start <name>; 启动指定子进程

restart all; 重启所有子进程

restart <name>; 重启指定子进程

stop all; 停止所有子进程
stop <name>; 停止指定子进程

reload ;重启supervisord

add <name>; 添加子进程到进程组

reomve <name>; 从进程组移除子进程，需要先stop。注意：移除后，需要使用reread和update才能重新运行该进程



安装python虚拟环境
----------------
https://www.jianshu.com/p/ee03cff51d02


pip install virtualenv
pip install virtualenvwrapper


virtualenv的使用(python的沙盒)

sudo pip install virtualenv(安装沙盒)
virtualenv test1(创建沙盒test1)
cd test1
source bin/activate
pip install tornado


创建虚拟环境
virtualenv -p /usr/local/bin/python3 .env
激活虚拟环境
source .env/bin/activate
安装依赖包
pip install -i https://pypi.tuna.tsinghua.edu.cn/simple/ -r requirements.txt
取消激活
deactivate



pip生成requirements.txt

pip freeze >requirements.txt
pip install -r requirements.txt


iOS内存abort(Jetsam) 原理探究
http://satanwoo.github.io/2017/10/18/abort/


https://cloud.tencent.com/developer/article/1558379
symbolicatecrash路径：
"/Applications/Xcode.app/Contents/SharedFrameworks/DVTFoundation.framework/Versions/A/Resources/symbolicatecrash"



you-get
----------
https://you-get.org/
下载youtube视频，b站视频用的
pip install you-get
brew install you-get

useage
you-get -i 'https://www.youtube.com/watch?v=jNQXAC9IVRw'
you-get https://www.youtube.com/watch\?v\=kA3k8LNHX4Y // 默认下载第一个
you-get --itag=137 https://www.youtube.com/watch\?v\=fnmldw8HpUU  //下载指定tag


mac
-----
截屏：cmd+shift+3/4
录屏: cmd+shift+5

git忽略本地文件的的修改
----------------------
忽略跟踪：
git update-index --assume-unchanged xxx.xx
恢复跟踪：
git update-index --no-assume-unchanged xxx.xx
查看当当被忽略和已经纳入版本管理的文件
git ls-files -v | grep -e "^[hsmrck]"



trojan:
---------
ipk download path
https://downloads.openwrt.org/snapshots/packages/x86_64/packages/


windows shell工具
-----------------
final shell


查看防火墙状态
------------
ufw status
ufw allow 8388  添加允许8388端口访问


cent os软件
-------------
yum -y install gcc  安装gcc
yum remove gcc   卸载gcc
echo $PATH 输出执行路径


安装shadowsocks：
-----------------
https://github.com/shadowsocks/shadowsocks-libev
apt install shadowsocks-libev
查看shadowsocks状态：
systemctl status shadowsocks-libev.service
编辑ss配置文件：
vim /etc/shadowsocks-libev/config.json
重启shadowsocks：
systemctl restart shadowsocks-libev.service
查看shadowsocks运行日志：
journalctl -u shadowsocks-libev.service -f

防火墙设置：
查看状态：ufw status
开放端口：ufw allow 8388
拒绝端口：ufw deny 8388
删除规则：ufw delete allow 8388
关闭防火墙：ufw disable
启动防火墙：ufw enable


ss v2ray plugin
-----------------
https://github.com/shadowsocks/v2ray-plugin
apt install shadowsocks-v2ray-plugin
dpkg -L shadowsocks-v2ray-plugin  #查看shadow...插件包释放的内容
在ss中添加插件
vim /etc/shadowsocks-libev/config.json
最后一行添加：
"plugin": "shadowsocks-v2ray-plugin",
"plugin_ opts": "server"


shadowsocks-windows
---------------------
https://github.com/shadowsocks/shadowsocks-windows





v2ray一键脚本:
-------------
https://www.v2ray.com/
https://github.com/233boy/v2ray/tree/master
服务器：
https://github.com/233boy/v2ray/wiki/V2Ray%E6%90%AD%E5%BB%BA%E8%AF%A6%E7%BB%86%E5%9B%BE%E6%96%87%E6%95%99%E7%A8%8B
bash <(curl -s -L https://git.io/v2ray.sh)

V2Ray 配置文件路径：/etc/v2ray/config.json
Caddy 配置文件路径：/etc/caddy/Caddyfile
脚本配置文件路径: /etc/v2ray/233blog_v2ray_backup.conf


win客户端：
https://github.com/233boy/v2ray/wiki/V2RayN%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B
mac客户端：
https://github.com/Cenmrev/V2RayX/releases
各种客户端：
https://www.v2ray.com/awesome/tools.html


trojan一键脚本:
--------------
https://v2rayssr.com/trojan-2.html
https://v2rayssr.com/
https://github.com/V2RaySSR/trojansh
1.检查VPS的SELinux处于关闭状态
/usr/sbin/sestatus -v      ##如果返回参数为enabled即为开启，disabled为关闭

若是开启状态，如何关闭SELinux服务？
修改 /etc/selinux/config 文件
将 SELINUX=enforcing 改为 SELINUX=disabled
重启VPS以后SELinux即为关闭状态


2.安装依赖基础环境

yum -y install wget    ##ContOS Yum 安装 wget
apt-get install wget   ##Debian Ubuntu 安装 wget


3.安装trojan:
wget -N --no-check-certificate "https://raw.githubusercontent.com/V2RaySSR/Trojansh/master/trojan1.sh" && chmod +x trojan1.sh && ./trojan1.sh

本过程安装了sudo/nginx/wget/unzip/zip/curl/tar/trojan
现在你访问 http://cc.cloud 应该有伪装站点的存在了
伪装站点目录在 /usr/share/nginx/html 可自行更换网站
Trojan配置文件在 /usr/local/etc/trojan
nginx配置在：/etc/nginx/nginx.conf
nginx重启：
sudo nginx -s reload
systemctl restart nginx
检测没有问题之后可以进行下一部分安装


wget -N --no-check-certificate "https://raw.githubusercontent.com/V2RaySSR/Trojansh/master/trojan2.sh" && chmod +x trojan2.sh && ./trojan2.sh
检测到证书文件正常签发
证书文件的目录为 /usr/local/etc/trojan
已经设置证书为自动续签
可以进行第三部分脚本的操作


申请不下来，手动申请证书：再执行第2部分脚本
------------------------------------
安装socat：
apt install socat (ubuntu/debian)
yum -y install socat (centos)

安装acme：curl https://get.acme.sh | sh
添加软链接：
ln -s  /root/.acme.sh/acme.sh /usr/local/bin/acme.sh  (ubuntu)
ln -s  /root/.acme.sh/acme.sh /usr/local/sbin/acme.sh   （centos）

注册账号： acme.sh --register-account -m my@example.com
开放80端口：ufw allow 80
申请证书： acme.sh --issue -d 你的域名 --standalone -k ec-256

如果默认CA无法颁发，则可以切换下列CA：
切换 Let’s Encrypt：acme.sh --set-default-ca --server letsencrypt
切换 Buypass：acme.sh --set-default-ca --server buypass
切换 ZeroSSL：acme.sh --set-default-ca --server zerossl


wget -N --no-check-certificate "https://raw.githubusercontent.com/V2RaySSR/Trojansh/master/trojan3.sh" && chmod +x trojan3.sh && ./trojan3.sh
你的Trojan配置信息存放在：/usr/local/etc/trojan/配置.txt
Trojan服务重启命令：systemctl restart trojan


若需修改密码或忘记密码,请访问VPS: /usr/local/etc/trojan/config.json
推荐Win客户端下载：https://www.v2rayssr.com/trojanwin.html
推荐安卓客户端软件：https://github.com/apache/ignite/releases


4.安装BBRPLUS加速 (这个不可用)
wget -N --no-check-certificate "https://github.com/ylx2016/Linux-NetSpeed/releases/download/sh/tcp.sh" && chmod +x tcp.sh && ./tcp.sh

用下面这个：
wget --no-check-certificate https://github.com/teddysun/across/raw/master/bbr.sh && chmod +x bbr.sh && ./bbr.sh



trojan其他搭建参考：
----------------
https://ssr.tools/1416
https://ssrvps.org/archives/3248


trojan客户端
------------
trojan:
https://itlanyan.com/trojan-clients-download/


自启动文件夹.sevice
-------------------
/etc/systemd/system


trojan-go:
-------------
https://github.com/p4gefau1t/trojan-go

（VPS）vultr新用户赠送100美金：https://vps.bulianglin.com/
（FinalShell）管理VPS工具：http://www.hostbuf.com/t/988.html
（trojan-go）https://github.com/p4gefau1t/trojan-go
trojan-go官方文档：https://p4gefau1t.github.io/trojan-go/

1.下载解压trojan-go的linux 64编译包
mkdir trojan
cd trojan
wget https://github.com/p4gefau1t/trojan-go/releases/download/v0.10.6/trojan-go-linux-amd64.zip
unzip xx.zip

2.trojan目录下新建config.json
trojan配置文件,修改相关参数：
{
    "run_type": "server",
    "local_addr": "0.0.0.0",
    "local_port": 443,
    "remote_addr": "192.83.167.78",
    "remote_port": 80,
    "password": [
        "your_awesome_password"
    ],
    "ssl": {
        "cert": "server.crt",
        "key": "server.key"
    }
}

用本机ng:
{
    "run_type": "server",
    "local_addr": "0.0.0.0",
    "local_port": 443,
    "remote_addr": "127.0.0.1",
    "remote_port": 80,
    "password": [
        "your_awesome_password"
    ],
    "ssl": {
        "cert": "/root/trojan/server.crt",
        "key": "/root/trojan/server.key"
    }
}

3.申请证书：
    安装socat：
    apt install socat (ubuntu/debian)
    yum -y install socat (centos)

    安装acme：curl https://get.acme.sh | sh
    添加软链接：
    ln -s  /root/.acme.sh/acme.sh /usr/local/bin/acme.sh  (ubuntu)
    ln -s  /root/.acme.sh/acme.sh /usr/local/sbin/acme.sh   （centos）

    注册账号： acme.sh --register-account -m my@example.com
    开放80端口：ufw allow 80
    申请证书： acme.sh --issue -d 你的域名 --standalone -k ec-256
    安装证书： acme.sh --installcert -d 你的域名 --ecc --key-file /root/trojan/server.key --fullchain-file /root/trojan/server.crt

    如果默认CA无法颁发，则可以切换下列CA：
    切换 Let’s Encrypt：acme.sh --set-default-ca --server letsencrypt
    切换 Buypass：acme.sh --set-default-ca --server buypass
    切换 ZeroSSL：acme.sh --set-default-ca --server zerossl


自签证书：
    生成私钥：openssl ecparam -genkey -name prime256v1 -out ca.key
    生成证书：openssl req -new -x509 -days 36500 -key ca.key -out ca.crt  -subj "/CN=bing.com"

4.trojan后台运行：
nohup ./trojan-go > trojan.log 2>&1 &


5.其他：
设置trojan-go.service
vim /etc/systemd/system/trojan-go.service
------------
[Unit]
Description=trojan-go
Documentation=https://github.com/p4gefau1t/trojan-go
After=network.target nss-lookup.target

[Service]
User=nobody
CapabilityBoundingSet=CAP_NET_ADMIN CAP_NET_BIND_SERVICE
AmbientCapabilities=CAP_NET_ADMIN CAP_NET_BIND_SERVICE
NoNewPrivileges=true
ExecStart=/usr/local/bin/trojan-go/trojan-go -config /usr/local/etc/trojan-go/config.json
Restart=on-failure
RestartSec=10

[Install]
WantedBy=multi-user.target


设置trojan为ws的传输：
https://p4gefau1t.github.io/trojan-go/basic/full-config/

用ws配置：
{
    "run_type": "server",
    "local_addr": "0.0.0.0",
    "local_port": 443,
    "remote_addr": "127.0.0.1",
    "remote_port": 80,
    "password": [
        "your_awesome_password"
    ],
    "ssl": {
        "cert": "/root/trojan/server.crt",
        "key": "/root/trojan/server.key"
    },
    "websocket": {
        "enabled": true,
        "path": "/down",
        "host": "hostname.com"
    }
}


nginx监听443端口
----------------
https://blog.csdn.net/finally_vince/article/details/127884546

user  root;
worker_processes  1;
error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;
events {
    worker_connections  1024;
}
http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';
    access_log  /var/log/nginx/access.log  main;
    sendfile        on;
    #tcp_nopush     on;
    keepalive_timeout  120;
    client_max_body_size 20m;
    #gzip  on;
    server {
        listen       80;
        server_name  你的域名;
        root /usr/share/nginx/html;
        index index.php index.html index.htm;
        rewrite ^/(.*)$ https://${server_name}/$1 permanent;
    }
    server {
        listen 443 ssl;
        #配置HTTPS的默认访问端口为443。
        #如果未在此处配置HTTPS的默认访问端口，可能会造成Nginx无法启动。
        #如果您使用Nginx 1.15.0及以上版本，请使用listen 443 ssl代替listen 443和ssl on。
        server_name 你的域名;
        root html;
        index index.html index.htm;

        ssl_certificate /usr/local/etc/trojan/cert.crt;
        ssl_certificate_key /usr/local/etc/trojan/private.key;
        ssl_session_timeout 10m;
        ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;
        ssl_protocols TLSv1.1 TLSv1.2 TLSv1.3;
        ssl_prefer_server_ciphers on;

        location / {
            root   /usr/share/nginx/html;
            index index.html index.htm;
        }
    }
}



vmess+ws+tls+nginx
----------------------
https://www.youtube.com/watch?v=y8s5UivMNcE

1.v2ray一键安装脚本：
https://github.com/v2fly/fhs-install-v2ray
启动v2ray: systemctl start v2ray
开机自启v2ray：systemctl enable v2ray

// 安裝執行檔和 .dat 資料檔
bash <(curl -L https://raw.githubusercontent.com/v2fly/fhs-install-v2ray/master/install-release.sh)
//移出执行脚本
bash <(curl -L https://raw.githubusercontent.com/v2fly/fhs-install-v2ray/master/install-release.sh) --remove

systemctl enable v2ray; systemctl start v2ray


vms config.json
----------------
example:
https://github.com/v2fly/v2ray-examples

json位置：/usr/local/etc/v2ray/config.json
service位置：/etc/systemd/system/v2ray.service
linux随机生成uuid : cat /proc/sys/kernel/random/uuid


vmess config.json file content
==============================

vmess+tcp:
-----------
{
  "inbounds": [{
    "port": 10086,
    "protocol": "vmess",
    "settings": {
      "clients": [{
      "id": "57bfda14-0528-4f0b-b65d-543dbd8ed2bd",
      "alterId": 0
       }]
    }
  }],
  "outbounds": [{
    "protocol": "freedom",
    "settings": {}
  }]
}
加密方式推荐：zero


vmess+tcp+tls (vmess+ws+tls)
----------------------------
{
    "inbounds": [{
        "port": 10086,
        "protocol": "vmess",
        "settings": {
            "clients": [{
                "id": "57bfda14-0528-4f0b-b65d-543dbd8ed2bd",
                "alterId": 0
            }]
        },
        "streamSettings": {
            "network": "tcp",   //ws的时候改成ws
            "security": "tls",
            "tlsSettings": {
                "certificates": [{
                    "certificateFile": "/usr/local/etc/v2ray/server.crt",
                    "keyFile": "/usr/local/etc/v2ray/server.key"
                }]
            }

        }
    }],
    "outbounds": [{
        "protocol": "freedom",
        "settings": {}
    }]
}


vmess+ws+tls+web
-----------------------
{
    "inbounds": [
        {
            "port": 10086,
            "listen": "127.0.0.1",
            "protocol": "vmess",
            "settings": {
                "clients": [
                    {
                        "id": "5252f97d-1287-ca9c-8fb1-6fa880d161eb",
                        "alterId": 0
                    }
                ]
            },
            "streamSettings": {
                "network": "ws",
                "wsSettings": {
                    "path": "/ray"
                }
            }
        }
    ],
    "outbounds": [
        {
            "protocol": "freedom",
            "settings": {}
        }
    ]
}

2.申请证书

    安装socat：
    apt install socat (ubuntu/debian)
    yum -y install socat (centos)
    安装acme：curl https://get.acme.sh | sh
    添加软链接：
    ln -s  /root/.acme.sh/acme.sh /usr/local/bin/acme.sh (ubuntu)
    ln -s  /root/.acme.sh/acme.sh /usr/local/sbin/acme.sh   （centos）

    注册账号： acme.sh --register-account -m my@example.com
    开放80端口：ufw allow 80
    申请证书： acme.sh --issue -d 你的域名 --standalone -k ec-256
    安装证书： acme.sh --installcert -d 你的域名 --ecc --key-file /usr/local/etc/v2ray/server.key --fullchain-file /usr/local/etc/v2ray/server.crt

    如果默认CA无法颁发，则可以切换下列CA：
    切换 Let’s Encrypt：acme.sh --set-default-ca --server letsencrypt
    切换 Buypass：acme.sh --set-default-ca --server buypass
    切换 ZeroSSL：acme.sh --set-default-ca --server zerossl


系统服务service有点问题：
vim /etc/systemd/system/v2ray.service
删除service中User=nobody
systemctl daemon-reload

3.安装nginx
apt install nginx
yum -y install nginx (centos)

配置nginx：vim /etc/nginx/nginx.conf
重新加载nginx配置：systemctl reload nginx.service
ng站点目录在 /usr/share/nginx/html 可自行更换网站


4.替换nginx的配置文件/etc/nginx/nginx.conf 中http{}里面的内容

    server {
        listen       443 ssl;
        listen       [::]:443 ssl;
        server_name  你的域名;

        ssl_certificate      /usr/local/etc/v2ray/server.crt;
        ssl_certificate_key  /usr/local/etc/v2ray/server.key;

        ssl_session_cache    shared:MozSSL:10m;
        ssl_session_timeout  1d;
        ssl_session_tickets off;
        ssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3;
        ssl_ciphers  ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA:ECDHE-ECDSA-DES-CBC3-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:DES-CBC3-SHA:!DSS;
        ssl_prefer_server_ciphers  off;

        location / {
            proxy_pass https://www.bing.com;
            proxy_redirect off;
            sub_filter_once off;
            sub_filter "www.bing.com" $server_name;
            proxy_set_header Host "www.bing.com";
            proxy_set_header Referer $http_referer;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header User-Agent $http_user_agent;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto https;
            proxy_set_header Accept-Encoding "";
            proxy_set_header Accept-Language "zh-CN";
            }

        location /ray {
            proxy_redirect off;
            proxy_pass http://127.0.0.1:8388;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            }
        }

    server {
        listen 80;
        listen [::]:80
        server_name 你的域名;
        rewrite ^/(.*)$ https://${server_name}/$1 permanent;

    }


vless+trojan+xtls+nginx
------------------------
关闭防火墙：ufw disable

xray官方一键安装脚本：bash -c "$(curl -L github.com/XTLS/Xray-install/raw/main/install-release.sh)" @ install -u root
启动v2ray：systemctl start xray.service
重启v2ray：systemctl restart xray.service
v2ray状态：systemctl status xray.service

申请证书：
 安装acme：curl https://get.acme.sh| sh
 安装socat：apt install socat
 添加软链接：ln -s  /root/.acme.sh/acme.sh /usr/local/bin/acme.sh
 切换CA机构：acme.sh --set-default-ca --server letsencrypt
 申请证书： acme.sh  --issue -d 你的域名  --standalone -k ec-256
 安装证书： acme.sh --installcert -d 你的域名 --ecc  --key-file   /usr/local/etc/xray/server.key   --fullchain-file /usr/local/etc/xray/server.crt

xray配置文件：
{
    "log": {
        "loglevel": "warning"
    },
    "inbounds": [
        {
            "port": 443,
            "protocol": "vless",
            "settings": {
                "clients": [
                    {
                        "id": "72bac1c4-02de-49b4-e498-fa8767638c23",
                        "flow": "xtls-rprx-direct"
                    }
                ],
                "decryption": "none",
                "fallbacks": [
                    {
                        "dest": 8388
                    }
                ]
            },
            "streamSettings": {
                "network": "tcp",
                "security": "xtls",
                "xtlsSettings": {
                    "alpn": [
                        "http/1.1"
                    ],
                    "certificates": [
                        {
                            "certificateFile": "/usr/local/etc/xray/server.crt",
                            "keyFile": "/usr/local/etc/xray/server.key"
                        }
                    ]
                }
            }
        },
        {
            "port": 8388,
            "listen": "127.0.0.1",
            "protocol": "trojan",
            "settings": {
                "clients": [
                    {
                        "password": "111"
                    }
                ],
                "fallbacks": [
                    {
                        "dest": "180.76.138.44:80"
                    }
                ]
            },
            "streamSettings": {
                "network": "tcp",
                "security": "none"
            }
        }
    ],
    "outbounds": [
        {
            "protocol": "freedom"
        }
    ]
}



CF优选面板，CDN加速，拥塞算法：
--------------------------
x-ui面板：https://github.com/vaxilu/x-ui
CF优选IP：https://github.com/XIU2/CloudflareSpe...
CF官网：https://cloudflare.com
CF-CDN-IP段：https://www.cloudflare.com/zh-cn/ips/

安装nginx：apt install nginx
配置nginx：vim /etc/nginx/nginx.conf
重新加载nginx配置：systemctl reload nginx.service

nginx配置：
user www-data;
worker_processes auto;
pid /run/nginx.pid;
include /etc/nginx/modules-enabled/*.conf;

events {
  worker_connections 768;
}

http {

 server {
    listen 80 default_server;
    listen [::]:80 default_server;

   ssl_protocols         TLSv1.2 TLSv1.3;
   ssl_ciphers           ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
   ssl_prefer_server_ciphers off;

    location / {
    proxy_pass https://www.bing.com; #伪装网址
    proxy_ssl_server_name on;
    proxy_redirect off;
    sub_filter_once off;
    sub_filter "www.bing.com" $server_name;
    proxy_set_header Host "www.bing.com";
    proxy_set_header Referer $http_referer;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header User-Agent $http_user_agent;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto https;
    proxy_set_header Accept-Encoding "";
    proxy_set_header Accept-Language "zh-CN";
    }

   location /ray {
    proxy_redirect off;
    proxy_pass http://127.0.0.1:8388;
    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection "upgrade";
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    }

   location /xui {
    proxy_redirect off;
    proxy_pass http://127.0.0.1:9999;
    proxy_http_version 1.1;
    proxy_set_header Host $host;
   }
 }
}

查询当前使用的 TCP 拥塞控制算法
sysctl net.ipv4.tcp_congestion_control
查询当前Linux版本
uname -r

启用BBR TCP拥塞控制算法
echo "net.core.default_qdisc=fq" （需要替换为尖括号） /etc/sysctl.conf
echo "net.ipv4.tcp_congestion_control=bbr"（需要替换为尖括号） /etc/sysctl.conf
sysctl -p


socks5服务器搭建
------------------
一键搭建（1G内存的电脑运行不了，需要编译）
-------
ubuntu:
https://sunpma.com/724.html

wget --no-check-certificate https://raw.github.com/Lozy/danted/master/install.sh -O install.sh
bash install.sh  --port=端口 --user=用户名 --passwd=密码


使用：
一般使用IP和用户名密码即可使用
如果需要固定IP或IP段，可以修改配置文件设置白名单

vim /etc/danted/sockd.conf
修改以下代码，改成你需要设置的白名单IP或IP段即可，然后重启使其生效；

client pass {
        from: 0.0.0.0/0  to: 0.0.0.0/0
}
http://openwrt-dist.sourceforge.net/packages/luci/Packages.sig
卸载：
bash install.sh --uninstall


cmd:

service sockd start     /etc/init.d/sockd start 启动socks5服务器守护进程
service sockd stop      /etc/init.d/sockd stop  停止socks5服务器守护进程
service sockd restart   /etc/init.d/sockd restart   重新启动socks5服务器守护进程
service sockd reload    /etc/init.d/sockd reload    重新加载socks5服务器守护进程
service sockd status    /   系统进程状态
service sockd state     /etc/init.d/sockd state 运行状态
service sockd tail      /etc/init.d/sockd tail  sock 日志
service sockd adduser   /etc/init.d/sockd adduser   添加pam-auth用户：service sockd adduser NAME PASSWORD
service sockd deluser   /etc/init.d/sockd deluser   删除pam-auth用户：service sockd deluser NAME


手动搭建socks5(目前用的这个)
----------
https://linuxhint.com/set-up-a-socks5-proxy-on-ubuntu-with-dante/

root用户操作

1.安装服务
apt install dante-server
danted -v
2.备份原文件
cd /etc
mv danted.conf danted.conf.bak
3.新建conf
vim danted.conf --save
---------------------
internal: eth0 port = 1080
external: eth0

socksmethod: username

user.unprivileged: nobody
user.privileged: root

client pass {
from: 0.0.0.0/0 to: 0.0.0.0/0
log: error
}

socks pass {
from: 0.0.0.0/0 to: 0.0.0.0/0
command: connect
log: error
socksmethod: username
}

4.启动服务
service danted start
5.新建账户
adduser example


nginx安装和卸载
--------------
1.安装
sudo apt-get update
sudo apt-get install nginx

2.卸载
# 删除除了配置文件以外的所有文件。
sudo apt-get remove nginx nginx-common
# 删除所有与nginx有关的东西，包括配置文件。
sudo apt-get purge nginx nginx-common
# 在上面命令结束后执行，主要是删除与Nginx有关的且不再被使用的依赖包。
sudo apt-get autoremove
# 删除两个主要的包。
sudo apt-get remove nginx-full nginx-common

3.验证是否卸载成功
#重启nginx,重启失败，说明已成功卸载nginx
sudo service nginx restart



centos 安装apache
-----------------
安装Apache:
# yum -y install httpd
添力linux用户＆设置密码：
# adduser -d /var/www/html siteadmin
# passwd siteadmin
修改目录权限
# chown -Rf siteadmin.siteadmin /var/www/html
启动Apache:
# service httpd start



windows ssh协议
----------------
workbench
putty
finalshell
secureCRT
xshell


SFTP协议
-----------
filezilla


AI提升工作效率：
---------------
github copilot
BITO
文心一言
通义灵码


==================
ubuntu搭建http服务器
-------------------
sudo apt-get update
apt-get install tinyproxy

vim /etc/tinyproxy/tinyproxy.conf

Port 8888 #预设是8888 Port,你可以更改
Allow 127.0.0.1 #将127.0.0.1改成你自己的IP
#例如你的IP 是1.2.3.4,你改成Allow 1.2.3.4,那只有你才可以连上这个Proxy
#若你想任何IP都可以链接到Proxy在Allow前面打#注释

打开关闭和重启服务
也可以使用systemctl
service tinyproxy start/restart/stop

链接测试：
在另外一台客户机测试
curl -x <IP>:<PORT> www.baidu.com

备注：
微信使用的网络代理可以是socks5或者http服务器，但整理效果来看socks5链接速度大于http



Excel:
===========================
unique去重：
---------
https://mp.pdnews.cn/Pc/ArtInfoApi/article?id=36154480
自定义格式： [=0]g
Filter不等于 <>

=UNIQUE(FILTER(B:B,(B:B<>B1)*(B:B<>"")))

Filter筛选：
-----------
https://baijiahao.baidu.com/s?id=1769293940318956986&wfr=spider&for=pc

语法：=FILTER(数组,包含,[空值])
第一参数：数组表示想要筛选的数据区域，也是返回结果的区域
第二参数：包含就是筛选的条件，也就是条件区域
第三参数：根据条件如果找不到结果，就返回第三参数的值，它是一个可选参数
=FILTER(C4:C12,B4:B12=F4)

filter多条件：
https://baijiahao.baidu.com/s?id=1774715612617890363&wfr=spider&for=pc
且用* ，或用+

提取文本函数：mid,left,right
https://baijiahao.baidu.com/s?id=1735125360049818310&wfr=spider&for=pc
https://support.microsoft.com/zh-cn/office/%E6%A3%80%E6%9F%A5%E5%8D%95%E5%85%83%E6%A0%BC%E6%98%AF%E5%90%A6%E5%8C%85%E5%90%AB%E6%96%87%E6%9C%AC-%E4%B8%8D%E5%8C%BA%E5%88%86%E5%A4%A7%E5%B0%8F%E5%86%99-7bb505c7-2815-4a7a-9544-57a5f0dcd551

是否包含特定的数值：
https://zh-cn.extendoffice.com/excel/formulas/excel-formula-contains-specific-text.html
isnumber(search(C3,B3)) not in case sensitive
isnumber(find(C3,B3)) in case sensitive
