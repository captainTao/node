Q&A:
1.ll 查看文件，过滤文件名
root@captain:~# ll /etc/sh
shadow            shadow-           shadowsocks.json  shells

2.ip addr 和ifconfig, ipconfig, curl ip.cn

3.chmod +x shadowsocksR.sh 与数字的区别

4.删除，文件名用正则表达式


RAM，ROM
闪存：ROM, read-only memory
内存: RAM, random access memory
网关，子网掩码，ICMP,DNS

5.目前速度最快的还是SSR客户端加HAPROXY的服务器,国内的阿里云服务器架设haproxy再跳转到海外服务器
6.ss+GoQuiet:goquiet是ss一个插件，可以将ss流量混淆为普通的https

> cp
------------------
拷贝一个文件夹下所有文件
cp -r /etc/asl/ test  推荐这种
cp -r /etc/asl/ ./test
cp -r /etc/asl/. ./test



> rm
------------------
删除文件下的所有文件
rm *     文件夹下没有文件夹
rm -r *   文件夹下有文件夹

/////////////////////////////////////////////////////////////////// 

谷歌DNS:
8.8.8.8
8.8.4.4:53


127.0.0.1
114.114.114.114，1.2.4.8
114.114.114.114,208.67.222.222:443,8.8.8.8

国内：114.114.114.114 / 114.114.115.115
openDNS:
208.67.220.220:443,208.67.220.222:443,208.67.222.222:443

腾讯dns:
119.29.29.29,182.254.116.116

如果需要备用dns,在dns栏目填入两个dns,并用逗号隔开


ipk文件用opkg install来安装


dnsmasq:
-------------
https://wzyboy.im/post/874.html      //dnsmasq的作用
https://www.jianshu.com/p/1df2e506a546      //配置dnsmasq

验证dnsmasq配置：

修改/etc/dnsmasq.conf, 在文件末尾追加conf-dir=/etc/dnsmasq.d
/etc/dnsmasq.d目录下有两个文件：
accelerated-domains.china.conf  dnsmasq_gfwlist.conf

/etc/resolv.conf    //设置本地DNS
nameserver 127.0.0.1


pdnsd:
-------------
将UDP的DNS请求转换为TCP进行发送；----替代方案：dnsforwarder



///////////////////////////////////////////////////////////////////  ssr开始

------------------------------------------------知识储备
ss-server、ss-local(socks5)、ss-tunnel(udp relay)、ss-redir(ss) 解释
https://www.zfl9.com/ss-redir.html

ss与ssr区别扫盲：https://doub.io/ss-jc10/
ss故障排除： https://doub.io/ss-jc39/


设计师用的网址：
https://www.behance.net/
https://dribbble.com/
https://www.shutterstock.com/home


refer websties link:
https://www.diycode.cc/topics/738        // vultr vps搭建
https://blog.dreamtobe.cn/ss-and-vps/    // vultr vps优化

VPS和ECS的区别：https://www.diycode.cc/topics/738
VPS提供商：Vultr.com
节点：洛杉矶，东京

putty客户端
ss安装：
Chrome插件——SwitchyOmega

优化：
加速软件： 锐速+centos

网络进阶：
BBR脚本
FinalSpeed: 双边加速
Snapshot

-------------------

路由器软件包括两部分：

处理TCP：
ssr, ss-libev

处理UDP
dnsforwarder, dnscrypt-proxy
dnsforwarder相当于DNS的隧道,
而dnscrypt-proxy相当于UDP的shadowsocksr-libev

--------------------
答疑：
https://cokebar.info/archives/850
google.com是响应ping操作的。ping不通是因为ping是ICMP协议，不是TCP/UDP；ss只代理TCP和UDP，所以ping是直连了。想要测试延迟可以用TCP ping工具，比如说psping。

其他网友解答：
第一项“让路由器本身走shadowsocks”设置好以后路由自身还是可能无法翻墙。我看了一下感觉是这样，虽然在WAN口设置里面已经把DNS修改为127.0.0.1，但是默认查询的端口是53且无法指定，而路由自身访问53端口的请求并没有转发到5353端口，所以不能返回正确的结果。
这个问题造成的直接后果是无法访问openwrt-dist.sourceforge.net源更新软件包。一个简单的解决办法是修改/etc/dnsmasq.conf文件，在最后增加：
server=/sourceforge.net/127.0.0.1#5353
这样更新就没问题了。楼上有朋友说路由器ping google.com会受到污染，同样的道理，在/etc/dnsmasq.conf最后增加：
server=/google.com/127.0.0.1#5353
就可以了。只不过这个办法需要一条一条手工写进去，费点事。好在路由平时需要配置访问的也就那么几个被墙的站点，差哪个自己填上去就好了。

------------------------------------------------  参考网址
佐大论坛：（编译固件）http://www.openwrt.pro/

dnsforwarder+SSR:
https://nwindy.moe/lede-shadowsocksr/

luci-ssr.ipk:  
https://github.com/ywb94/openwrt-ssr


ss+ChnRoute:
https://cokebar.info/archives/664           // ss+chnRout
https://cokebar.info/archives/962           // ss+gfw

https://blog.csdn.net/lvshaorong/article/details/53230545          // openwrt无线中继，桥接，信号放大，访客网络
1.有线转有线NAT-网络选LAN 
2.有线转有线中继-网络选WAN 
3.无线转无线中继-wifi scan
4.无线转有线-从方式三种来中转
.....

------------------------------------------------  搭建参考

https://suiyuanjian.com/124.html                // google vps搭建（主）-ssr
http://godjose.com/2017/06/14/new-article/      // google vps（参考）
https://teddysun.com/486.html                   // SS一键四选一安装脚本：

https://cokebar.info/archives/664               // Shadowsocks + ChnRoute路由设置（主）
https://teddysun.com/511.html                   // 秋水libev simple-obfs  



明月参考：
-------------
明月更新历史：http://www.right.com.cn/forum/thread-139399-1-1.html
明月官方：https://www.myopenwrt.org/
ssr路由安装: https://github.com/rapistor/
ssr路由配置: https://github.com/ywb94/openwrt-ssr


------------------------------------------------ 开始搭建


vps进入准备工作：
/***********************************/  更新常用软件
sudo –i
更新系统（两行命令分开执行，第二步等待时间较长，会出现####和进度百分百，耐心等）

apt update
apt upgrade
查看当前内核版本

uname -a
然后你会发现发现版本低于 4.9
安装新内核

apt install linux-image-4.10.0-20
卸载旧内核

apt autoremove
启用新内核

update-grub
重启

Reboot
验证内核版本

uname –r
看到如下类似如下回显，版本号为4.10.0-20-generic

sudo apt-get update

/***********************************/  配置ssh

google vps默认配置的密码登录和root登录为关闭状态，默认只能使用ssh，如需要开启，需要配置：https://mapgun.com/archives/2235

1.生成ssh key;
ssh-keygen -t [rsa|dsa]                      // 默认用此方法  refer: https://blog.csdn.net/dongwuming/article/details/9705595
ssh-keygen -t rsa -f gcloud                  // 生成gcloud 名字的钥匙
ssh-keygen -t rsa -C "578628438@qq.com"      // 使用


2.在服务器中添加 public key, 并chmod 600 和 设置.ssh目录权限  
$ echo "" > ~/.ssh/authorized_keys   // server key location,非root用户下
$ chmod 600 authorized_keys
$ chmod 700 .ssh    //可选


3.ssh登录：
> ssh wangsirlemon@35.229.253.255    // 默认公钥登录
> ssh -p 8989 wangsirlemon@35.229.253.255   // 用端口号登录

> ssh -i gcloud wangsirlemon@335.197.144.67  // 使用指定公钥登录


-------------------------------------
wangsirlemon@instance-static:~/.ssh$                 // 在server生成 glocoud key
> echo "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDVH6uhFMGlFKoN7XUdTHKEus77mCOvpkfz3rbXkee9WLPjpY1rBgDMhqZcco7Klmwoy1CaOmdBRlvs70ySX
ok72937hLvUshHoGqevwW+hpu3/5P+5fQXXMfNnFxkj7PE08pk8EkDoYUsu/JnN7qex3IH7Ps4iRQHuePdgFe/eUzLqHgzsTtsuEIYL64rDG2qs/jfWHqWeRvmxMiTr/bSm2uA9CJ/ebSW5N9rcEcJt+G/78cF+efUYC
Nz3pRQ5iimsp2aH5mUkDoWOOWNPh9j7biaZoN6fjleDMx9V6nxtEHmdwUN8JexUI74z/76hQOiqA4wGSTL0BMjJpfTitM3T captain@wanghaitao-MacBook.local" > authorized_keys


mine:
echo "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQChXavIw8d9R9WDc25aaHeR9CMHXtr5UT4lgUH0tthFLh3M4/T7F16eDKIm98Ax33VtSecRqJSk3IF9VlYdcn9sWKNg8Nb0REtv1NQgHdKwOj1t+RqyMVxr9eLgdgCTYxpsWhP5Cnx55sOLsXE1xHw9AbFkE+yeflaHcZ3Nv+vwxpSEXJhKJkLG/Z/e7PMEAB5nyWffhtKVxFonrEhB69fiKm1FiZs0ly/QpWcaXfmyIgasiNUe+Rm/6IMz2qhTrFzr2YUqFKAvslvODMUlPf3/RRXbBUr6YJb0ci68aMBhLVUb2GnNMXH6WtfJGpg/r1IW8PCtGg0RyAg4YNvUbLNF 578628438@qq.com" > ~/.ssh/authorized_keys

echo "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQChXavIw8d9R9WDc25aaHeR9CMHXtr5UT4lgUH0tthFLh3M4/T7F16eDKIm98Ax33VtSecRqJSk3IF9VlYdcn9sWKNg8Nb0REtv1NQgHdKwOj1t+RqyMVxr9eLgdgCTYxpsWhP5Cnx55sOLsXE1xHw9AbFkE+yeflaHcZ3Nv+vwxpSEXJhKJkLG/Z/e7PMEAB5nyWffhtKVxFonrEhB69fiKm1FiZs0ly/QpWcaXfmyIgasiNUe+Rm/6IMz2qhTrFzr2YUqFKAvslvODMUlPf3/RRXbBUr6YJb0ci68aMBhLVUb2GnNMXH6WtfJGpg/r1IW8PCtGg0RyAg4YNvUbLNF 578628438@qq.com" > authorized_keys

wangsirlemon@instance-static:~/.ssh$ chmod 600 authorized_keys 



XShell连接服务器
--------------------
https://51.ruyo.net/2144.html

首先使用自动SSH连接上去，然后 sudo -i切换到 root

vi /etc/ssh/sshd_config 
#修改以下内容即可
 
#允许密码登录 将注释去掉
PermitRootLogin yes
 
#修改成 yes
PasswordAuthentication no
 
#重启SSH即可
/etc/init.d/sshd restart


/***********************************/ 安装ss,bbr

1.切换用户：
sudo -i    // sudo su

2.安装ss,四选一，可以安装多个
wget --no-check-certificate -O shadowsocks-all.sh https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks-all.sh
chmod +x shadowsocks-all.sh
./shadowsocks-all.sh 2>&1 | tee shadowsocks-all.log

3.bbr加速
wget --no-check-certificate https://github.com/teddysun/across/raw/master/bbr.sh && chmod +x bbr.sh && ./bbr.sh


验证ss,obfs,udp
--------------------
nestat -lntpu
ps -ef | grep -v grep | grep "server"

验证bbr： 
--------------------
https://teddysun.com/489.html/comment-page-7

uname -r:
一般显示为最新版就ok

sysctl net.ipv4.tcp_available_congestion_control        // bbr状态检测
返回值出现：
net.ipv4.tcp_available_congestion_control = bbr cubic reno
或者为：
net.ipv4.tcp_available_congestion_control = reno cubic bbr

sysctl net.core.default_qdisc
返回值为：
net.core.default_qdisc = fq

lsmod | grep bbr
返回值有 tcp_bbr 模块即说明 bbr 已启动。注意：并不是所有的 VPS 都会有此返回值，若没有也属正常。


ss,ssr问题排查：
--------------------------------------
netstat -lntp   // root用户

ss 服务端配置:
cat /etc/shadowsocks.json
cat /etc/shadowsocks-libev/config.json

ssr路由配置文件：
cat /etc/config/shadowsocksr
cat /etc/config/shadowsocks

ip模式数据：/etc/china_ssr.txt
GFW模式数据：/etc/dnsmasq.ssr/gfw_list.conf


ss问题排查：
https://doub.io/ss-jc39/         //排查

①启动Shadowsocks服务端：service supervisord start
②关闭Shadowsocks服务端：service supervisord stop
③重启shadowsocks服务端：service supervisord restart


/etc/init.d/shadowsocks status  // ss状态
/etc/init.d/shadowsocks start   // start   
/etc/init.d/shadowsocks restart  // 重启ss
./shadowsocks-libev.sh uninstall   //卸载ss,需要在root中


UDP Relay
--------------------------------------
确认服务端是否开始UDP Relay:
https://github.com/icymind/VRouter/wiki/%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%BC%80%E5%90%AF-UDP-Relay
方法1: 在命令行启动 ss-server 时加上 -u 参数
方法2: 在 ss-server 的配置文件中添加"mode": "tcp_and_udp"
验证：
netstat -lnup
iptables -A INPUT -p udp --dport 3389 -j ACCEPT

/***********************************/ 安装ipsec(手机端4g用)

https://github.com/hwdsl2/setup-ipsec-vpn

apt-get update && apt-get dist-upgrade  and reboot
wget https://git.io/vpnsetup -O vpnsetup.sh && sudo sh vpnsetup.sh


/***********************************/ 安装outliner(手机端4g用)
outline配置IOS客户端 server:
https://steemit.com/cn/@zhijun/outline

git: https://github.com/Jigsaw-Code/outline-server

server run:
bash -c "$(wget -qO- https://raw.githubusercontent.com/Jigsaw-Code/outline-server/master/src/server_manager/install_scripts/install_server.sh)"


===============================================================

https://cokebar.info/archives/664
http://openwrt-dist.sourceforge.net/
---------------------------------------------------------------路由终端翻墙

1.更新openwrt / lede固件
2.路由设置ssh,更改lan口网域，确保正常上网


3.路由安装ipk

a.方法一：一键脚本 （网络直连sourceforge.net和downloads.lede-project.org没有问题，可以试试ping不丢包）

wget -qO- http://openwrt-dist.sourceforge.net/auto_install.sh | sh
# 执行此步骤时候按照提示，选择安装shadowsocks,chinadns以及dns-forwarder
opkg install ip-full iptables-mod-tproxy

此一键脚本的手动步骤：
首先添加 a65535 的 gpg key，只有这样，第三方的包才能通过签名验证：
wget -qO /tmp/openwrt-dist.pub http://openwrt-dist.sourceforge.net/openwrt-dist.pub
opkg-key add /tmp/openwrt-dist.pub
rm /tmp/openwrt-dist.pub

打开Luci，定位到“系统”-“软件包”-“配置”选项卡，在“自定义feeds”末尾加入两行并点击“提交”：
请根据自己的CPU架构（可以执行 opkg print-architecture 查看，或者参考“发行版软件源”里的URL里的文本），将mips_24kc替换成相应的文本，最后点击提交。
src/gz openwrt_dist http://openwrt-dist.sourceforge.net/packages/base/mips_24kc
src/gz openwrt_dist_luci http://openwrt-dist.sourceforge.net/packages/luci

路由执行：
opkg update
opkg install ip-full ipset iptables-mod-tproxy libpthread
opkg install shadowsocks-libev luci-app-shadowsocks
opkg install ChinaDNS luci-app-chinadns
opkg install dns-forwarder luci-app-dns-forwarder

b.方法二：手动安装,先安装依赖包，然后安装ipk

依赖列表：
libgcc # target/cpu型号/package目录下
libpthread # 同上
ip-full # base
ipset # base 无此包不能使用luci-app-shadowsocks
      #      只能使用luci-app-shadowsocks-without-ipset 性能会下降
iptables-mod-tproxy # base 无此包将无法代理UDP流量
zlib # base


对应下载地址：
查看CPU型号：
opkg print-architecture | awk '{print $2}'

依赖ipk：
http://downloads.openwrt.org/releases/18.06.1/packages/mips_24kc/base/
http://downloads.openwrt.org/releases/18.06.1/targets/ar71xx/generic/packages/

应用ipk:
http://openwrt-dist.sourceforge.net/packages/
http://openwrt-dist.sourceforge.net/

路由开始：
opkg update
opkg install ip-full ipset iptables-mod-tproxy libpthread
（备注：自己看依赖中libgcc，zlib没有安装，网址说会自动从仓库安装）

root@OpenWrt:~# opkg install ip-full ipset iptables-mod-tproxy libpthread
Installing ip-full (4.16.0-8) to root...
Downloading http://downloads.openwrt.org/releases/18.06.1/packages/mips_24kc/base/ip-full_4.16.0-8_mips_24kc.ipk
Installing libmnl (1.0.4-1) to root...
Downloading http://downloads.openwrt.org/releases/18.06.1/packages/mips_24kc/base/libmnl_1.0.4-1_mips_24kc.ipk
Installing ipset (6.34-1) to root...
Downloading http://downloads.openwrt.org/releases/18.06.1/packages/mips_24kc/base/ipset_6.34-1_mips_24kc.ipk
Installing kmod-nfnetlink (4.9.120-1) to root...
Downloading http://downloads.openwrt.org/releases/18.06.1/targets/ar71xx/generic/packages/kmod-nfnetlink_4.9.120-1_mips_24kc.ipk
Installing kmod-ipt-ipset (4.9.120-1) to root...
Downloading http://downloads.openwrt.org/releases/18.06.1/targets/ar71xx/generic/packages/kmod-ipt-ipset_4.9.120-1_mips_24kc.ipk
Installing libipset (6.34-1) to root...
Downloading http://downloads.openwrt.org/releases/18.06.1/packages/mips_24kc/base/libipset_6.34-1_mips_24kc.ipk
Installing iptables-mod-tproxy (1.6.2-1) to root...
Downloading http://downloads.openwrt.org/releases/18.06.1/targets/ar71xx/generic/packages/iptables-mod-tproxy_1.6.2-1_mips_24kc.ipk
Installing kmod-ipt-tproxy (4.9.120-1) to root...
Downloading http://downloads.openwrt.org/releases/18.06.1/targets/ar71xx/generic/packages/kmod-ipt-tproxy_4.9.120-1_mips_24kc.ipk
Package libpthread (1.1.19-1) installed in root is up to date.
Configuring libmnl.
Configuring ip-full.
Configuring kmod-nfnetlink.
Configuring kmod-ipt-tproxy.
Configuring kmod-ipt-ipset.
Configuring libipset.
Configuring ipset.
Configuring iptables-mod-tproxy.

note:上面依赖安装完成后，我进行手动上传了依赖，然后安装了ligbcc和zlib

上面依赖装完后，需要下载下面的主程序：然后winscp上传路由,opkg install安装
shadowsocks-libev_x.x.x-x_xxxx.ipk
dns-forwarder_x.x.x-x_xxxx.ipk
ChinaDNS_x.x.x-x_xxxx.ipk
luci-app-shadowsocks_x.x.x-x_all.ipk
luci-app-chinadns_x.x.x-x_all.ipk
luci-app-dns-forwarder_x.x.x-x_all.ipk
我这儿还需要安装obfs.

4.luci-ss, chinadns, tcp fast open配置：

a.luci-ss添加服务器
obfs-local
obfs=http;obfs-host=www.bing.com

b.luci-ss设置访问控制

c.更新chinadns
wget -O- 'http://ftp.apnic.net/apnic/stats/apnic/delegated-apnic-latest' | awk -F\| '/CN\|ipv4/ { printf("%s/%d\n", $4, 32-log($5)/log(2)) }' > /etc/chinadns_chnroute.txt

d.更新完成后，记得重启ss

e.配置代理(本地端口1080)
f
.额外优化：开启tcp fast open
修改 /etc/sysctl.conf ，加入如下一行：
net.ipv4.tcp_fastopen = 3
然后执行如下命令生效：
sysctl -p

g.勾选服务器tcp fast open

5.dns配置
a.dns forwarder:
port:5311
address:127.0.0.1
server:8.8.8.8

b.chinadns:
enable bidirectional filter
port:5353
address:0.0.0.0
server: 114.114.114.114,127.0.0.1#5311

c.dhcp/dns
(TAB:general settings)dns forwardings: 127.0.0.1#5353
(TAB:resolve and hosts files)enable ingnore resolve file (old path: /tmp/resolv.conf.auto)

d.wan
network-->interface-->wan-->edit-->advanced
disable Use DNS servers advertised 
Use custom DNS servers 127.0.0.1

--------------至此已经能科学上网了
6.dnsmasq
gfwlist,china-list

mkdir /etc/dnsmasq.d

uci get dhcp.@dnsmasq[0].confdir 
如果返回值为 uci: Entry not found 或者其他非  /etc/dnsmasq.d 的值，则执行：
uci add_list dhcp.@dnsmasq[0].confdir=/etc/dnsmasq.d
uci commit dhcp

uci get dhcp.@dnsmasq[0].cachesize  //获取缓存条数
如果返回值为 uci: Entry not found ，则执行（缓存条数酌情设置）：
uci add_list dhcp.@dnsmasq[0].cachesize=10000
uci commit dhcp
如果返回值是一个数字，说明设置过该选项，但如果感觉小了，运行如下命令修改该值：
uci set dhcp.@dnsmasq[0].cachesize=10000
uci commit dhcp

opkg install coreutils-base64 ca-certificates ca-bundle curl

cd ~
# China-List
curl -L -o generate_dnsmasq_chinalist.sh https://github.com/cokebar/openwrt-scripts/raw/master/generate_dnsmasq_chinalist.sh
chmod +x generate_dnsmasq_chinalist.sh
# GfwList
curl -L -o gfwlist2dnsmasq.sh https://github.com/cokebar/gfwlist2dnsmasq/raw/master/gfwlist2dnsmasq.sh
chmod +x gfwlist2dnsmasq.sh

# China-list  114可以换成ISP的dns,这样运营商分配最近的服务器
sh generate_dnsmasq_chinalist.sh -d 114.114.114.114 -p 53 -o /etc/dnsmasq.d/accelerated-domains.china.conf
# GfwList
sh gfwlist2dnsmasq.sh -d 127.0.0.1 -p 5311 -o /etc/dnsmasq.d/dnsmasq_gfwlist.conf
# Restart dnsmasq
/etc/init.d/dnsmasq restart
完成后可自行查看 /etc/dnsmasq.d/accelerated-domains.china.conf 和文件，如有不需要的域名，注释掉或者删除即可

PS：路由性能不好的，慎用China-List。

---------------------------------
note:如果遇到gfwlist下载不下来请参考：https://github.com/cokebar/gfwlist2dnsmasq
OpenWRT Usage
( For LEDE 17.01/ OpenWrt 18.06 and later)
To download gfwlist curl or wget is needed. Because the connection is HTTPS, if you use busybox wget, you need to install libustream-openssl or libustream-mbedtls to support it, otherwise use GNU wget.
Because gfwlist is encoded by BASE64, base64 is needed to decode.

# curl
opkg update
opkg install curl coreutils-base64
# busybox wget (default by OpenWrt)
opkg update
opkg install libustream-mbedtls coreutils-base64
# GNU wget
opkg update
opkg install wget coreutils-base64

--------------------------------至此已经够用了
后面部分为自定义chinalist和gfwlist
这部分需要用dnsmasq-full替换掉dnsmasq
opkg remove dnsmasq && opkg install dnsmasq-full


验证dnsmasq配置以及其他优化：
------------------------------
修改/etc/dnsmasq.conf, 在文件末尾追加conf-dir=/etc/dnsmasq.d
可知直接在/etc/dnsmasq.conf里添加一行设置这个值，单位是秒：
min-cache-ttl=1800
建议不要过大，3600以内吧，否则可能会有副作用

/etc/dnsmasq.d目录下有两个文件：
accelerated-domains.china.conf  dnsmasq_gfwlist.conf

/etc/resolv.conf    //设置本地DNS
nameserver 127.0.0.1

其他配置
----------------------
1.设置wifi定时任务
2.设置更新ipk定时任务
3.设置更新chinadns,gfwlist等定时任务
4.脚本记得加执行权限chmod +x /root/ss_watchdog.sh


定时更新ipk的脚本：
autoupgrade.sh
-----------------
http://www.dammit.hk/opkg-%E5%85%A8%E9%83%A8%E6%9B%B4%E6%96%B0
opkg list-upgradable | awk -F ' - ' '{print $1}' | xargs opkg upgrade > /tmp/upgrade.log

https://cokebar.info/archives/930
#!/bin/sh 
opkg update
for ipk in $(opkg list-upgradable | awk '$1!~/^kmod|^Multiple/{print $1}'); do
  opkg upgrade $ipk
done

# 文件格式说明
#  ——分钟 (0 - 59)
# |  ——小时 (0 - 23)
# | |  ——日   (1 - 31)
# | | |  ——月   (1 - 12)
# | | | |  ——星期 (0 - 7)（星期日=0或7）
# | | | | |
# * * * * * 被执行的命令
  0 3 * * 6 /root/autoupgrade.sh


ss重连接脚本：
ss_watchdog.sh
-----------------
https://cokebar.info/archives/850
#!/bin/sh

LOGTIME=$(date "+%Y-%m-%d %H:%M:%S")
wget --spider --quiet --tries=1 --timeout=10 https://www.facebook.com/
if [ "$?" == "0" ]; then
	echo '['$LOGTIME'] No Problem.'
	exit 0
else
	wget --spider --quiet --tries=1 --timeout=10 https://www.baidu.com/
	if [ "$?" == "0" ]; then
		echo '['$LOGTIME'] Problem decteted, restarting shadowsocks.'
		/etc/init.d/shadowsocks restart >/dev/null
	else
		echo '['$LOGTIME'] Network Problem. Do nothing.'
	fi
fi  
///////////////////////////////////////////////////////////////////  ssr结束



///////////////////////////////////////////////////////////////////  linux操作

linux常用：
--------------------------------

root@captain:~# 
cat /etc/shadowsocks.json     // ss json配置
vim /etc/shadowsocks.json

!cat  :上次的cat命令
cat id_rsa.pub | pbcopy       // copy 对应文件内容

查看ssh的服务是否开启
netstat -lntp | grep -i sshd
获取sshd
apt-get install openssh-server  //apt, wget:下载

/etc/init.d/shadowsocks start   // start ss
/etc/init.d/shadowsocks restart  // 重启ss
/etc/init.d/iptables stop    //关闭防火墙（iptables）  
service firewalld stop     // 关闭防火墙


查看系统版本：
lsb_release -a

cat /etc/issue      

操作系统位数：
getconf LONG_BIT     

查看内存:
free
free -m

查看文件属性：
> ll
> ll /etc/sh    // 类似ls


> du 
-------------------
查看文件的可视大小：-h可视， -a:所有
> du -ah :个别文件的值
> du -sh :加和的总值


> virsh list --all: //查看运行的虚拟机 


shell sleep：
-------------------
https://blog.csdn.net/tiwoo/article/details/51094913
#!/bin/sh
command 1
output=`command 2`
command 3


ip地址：
-------------------
ip addr  :ip地址。ifconfig    // mac
curl ip.cn : 当前ip地址
curl cip.cc


> watch 
-------------------
http://www.cnblogs.com/peida/archive/2012/12/31/2840241.html
watch -n 1 -d netstat -ant  // 每隔1s高亮显示网络链接数的变化情况
切换终端: ctrl + x
退出watch: ctrl + g
watch -n 1 -d 'pstree|grep http' // 每隔一秒高亮显示http链接数的变化情况,监听内容用引号括起来
watch 'netstat -an | grep:21 | \ grep<模拟攻击客户机的IP>| wc -l'  // 实时查看模拟攻击客户机建立起来的连接数
watch -d 'ls -l|grep scf'  // 监测当前目录中 scf' 的文件的变化
watch -n 10 'cat /proc/loadavg' //10秒一次输出系统的平均负载


wangsirlemon@c77:~$ watch -h

Usage:
 watch [options] command

Options:
  -b, --beep             beep if command has a non-zero exit
  -c, --color            interpret ANSI color and style sequences
  -d, --differences[=<permanent>]
                         highlight changes between updates
  -e, --errexit          exit if command has a non-zero exit
  -g, --chgexit          exit when output from command changes
  -n, --interval <secs>  seconds to wait between updates
  -p, --precise          attempt run command in precise intervals
  -t, --no-title         turn off header
  -x, --exec             pass command to exec instead of "sh -c"

 -h, --help     display this help and exit
 -v, --version  output version information and exit


> netstat
-----------------------
tcp：电话
udp: 发短信

netstat -tlun ：查看监听的端口
netstat -an  ：查看正在建立连接的端口
netstat -rn  :查看网关地址

https://linux.cn/article-2434-1.html

netstat -tnlup | grep 端口号         //查看tcp,udp端口和进程业务
netstat -lntp          //查看正在监听端口情况
netstat -nltp
netstat –apn | grep 8080  // 8080为端口号
netstat -lntpu   
netstat -ltpe   //tcp监听的拥有者
netstat -rn     //禁用路由解析的路由信息, -r为路由,查看本机路由表
netstat -i     //打印网络接口信息
netstat -atnp | grep ESTA  //获得active状态的链接
watch -d -n0 "netstat -atnp | grep ESTA"  //配合watch命令监听active状态的链接

端口号位1024以上的端口都是随机分配的端口

/*
netstat - 打印网络连接、路由表、连接的数据统计、伪装连接以及广播域成员。
-a: 所有
-u: udp
-t: tcp
-l: listen,正在监听
-n: 禁用域名解析，即：查找每个ip地址对应主机名
-p: 进程名pid
-e: 进程拥有者，相比查看进程，进程拥有者更有用 user ,
-ep: e一般配合p使用
note: -n, -e一起使用，user列的属性是用户的id号，不是用户名
-r: 打印内核路由信息
-i: 打印网络接口信息
-ie： i一般配合e使用，可以输出用户友好的信息,信息和ifconfig内容一致；
-c: 持续输出信息
-g: 输出ipv4,ipv6的多播组信息

service network restart :重启网络服务
*/ 


> grep
-----------------------
cat vsftpd.conf | grep -v '^#'   // 查看xx.conf文件中首字符不是#的行

grep -v '^$' /etc/rsyslog.conf | grep -v '^#'
1、-v是grep排除的参数，例如查询除了包含ABC的行，例如cat a.txt|grep -v 'ABC'
2、^代表行首，$代表行尾。 ^$是空行的意思
3、^#表示首字母为#的行，linux里的文件，#号开头一般都是注释内容
4、grep -v '^$' /etc/rsyslog.conf | grep -v '^#'
查询/etc/rsyslog.conf文件，但是不包含空行和注释行
5、-n输出行号
6、--color==auto  搜索出的关键词用颜色显示
7、-i标识不区分大小写
grep -i multiuser /etc/inittab      grep是在文件的内容中查找，查找multiuser， -i是不区分大小写，

> grep lili /etc/passwd
lili:x:502:502::/home/lisi:/bin/bash    显示lili的ID为502

8、grep ".*" testfile 搜索所有字符
9、grep "a\{n,m\}" testfile 匹配a字符n到m次
10、grep "a\{n,\}"匹配至少n次
11、grep "a\{n\}"匹配n次
12、ls | grep  -n "a[b|d]b"  支持竖线
13、ls | grep  -n "^a\w"


grep正则表达式扩展
-----------------
https://www.cnblogs.com/pythonbz/p/6284190.html
-E, egrep
支持字符+,?
ls -a | grep -E "ab\w+" 
ls -a | egrep  "abb+"    egrep不带高亮
ls -a | grep -E "a[d|c]"   egrep或者-E也支持竖线


> sed, awk, cut, xargs
---------------------------
https://blog.csdn.net/he643042156/article/details/53197516
>: adb shell ps | grep monkey                   
shell     13870 579   1905284 28952          0 7f9987c1c8 R com.android.commands.monke
>: adb shell ps | grep monkey | awk '{print $2}'| sed -n '1p'| cut -c 1-5 | xargs adb shell kill


sed -n '2p' example.log  显示第二行
sed '/he/d' example.log  删除内容有he字符的行，这个是复制一个文件，然后删除，而不会删除原来的文件；

awk '{print $2}'是打印第2列的字符

echo $PATH| cut -d ':' -f 1,3  以：进行域分割，然后输出第1，第3个的域
/Library/Java/JavaVirtualMachines/jdk1.8.0_152.jdk/Contents/Home/bin:/usr/local/opt/python@2/bin

cut -d
cut -c 1-5 取一个字符串的第2到第5个字符串
cut -c 2- 取字符串第2个到之后的字符串


> xargs
-----------------------
http://man.linuxde.net/xargs
http://www.cnblogs.com/wangqiguo/p/6464234.html
-n
cat test.txt | xargs 多行输出为单行
cat test.txt | xargs -n3 每行为3个的多行，-n表示多行

-d
echo "nameXnameXnameXname" | xargs -dX  -d为自定义字符界，结果为name name name name
echo "nameXnameXnameXname" | xargs -dX -n2  的结果为：
name name
name name

-E/e
echo '11 22 33 44 55' | xargs -E '33' echo 
输出:(-E或者-e,'33'以前的参数，不能与-d混用，不然无效)
11 22

-p
adb shell ps | grep "worker"|xargs -p adb shell kill  -p表示确认，输入y才继续执行，否则不执行
echo '11@22@33' | xargs -p -d '@'  echo 

-I {}
复制所有图片文件到/data/images 目录下:
ls *.jpg | xargs -n1 -I cp {} /data/images  
rm删除多文件，可能有错误信息，用xargs去避免，xargs -0将\0作为定界符。
find . -type f -name "*.log" -print0 | xargs -0 rm -f
统计一个源代码目录中所有php文件的行数： 
find . -type f -name "*.php" -print0 | xargs -0 wc -l
查找所有的jpg 文件，并且压缩它们：
find . -type f -name "*.jpg" -print | xargs tar -czvf images.tar.gz
下载一个文件的所有连接
cat url-list.txt | xargs wget -c

-0
-0表示以 '\0' 为分隔符，即是在结尾追加'\0'，在一行中显示，一般与find结合使用
find . -name "*.txt"
输出：
./2.txt
./3.txt
./1.txt

find . -name "*.txt" -print0
输出：
./2.txt./3.txt./1.txt

删除文件路径中有空格的文件，比如a 3.txt, gg 4.txt, 因为空格会被rm拆分为两个两个文件。我们用\0来追加在字符的后面
find ./desktop/test -name '*.txt' -print0 | xargs -0 rm  

find /Users/captain/Desktop/test -name '*.txt'|cut -c 29- |xargs  echo
输出
arg1.txt arg2.txt arg3.txt

xargs当做参数传递：
1.kill `ps -ef | grep 'ddd'`
2.for procid in $(ps -aux | grep "some search" | awk '{print $2}'); do kill -9 $procid; done
3.ps -ef | grep 'ddd' | xargs kill
xargs命令可以通过管道接受字符串，并将接收到的字符串通过空格分割成许多参数(默认情况下是通过空格分割) 然后将参数传递给其后面的命令，作为后面命令的命令行参数


查看进程：
-----------------------
https://www.cnblogs.com/liuzhengliang/p/4609632.html

1、ps 命令用于查看当前正在运行的进程。
grep 是搜索
例如： ps -ef | grep java
表示查看所有进程里 CMD 是 java 的进程信息


2、ps -aux | grep java
ps-aux 显示所有状态
ps -aux | grep xx
ps -aux | grep java，或者直接：
ps -aux | grep pid 查看


3. kill 命令用于终止进程
例如： kill -9 [PID]
-9 表示强迫进程立即停止
通常用 ps 查看进程 PID ，用 kill 命令终止进程


> top
-----------------------
信息比ps更全
man top


> ps
-----------------------
https://www.cnblogs.com/fnng/archive/2012/05/20/2510641.html
-aux
-a：显示所有用户的进程
-u：显示用户名和启动时间
-x：显示 没有控制终端的进程
-e：显示所有进程，包括没有控制终端的进程
-l：长格式显示
-w：宽行显示，可以使用多个w进行加宽显示
PID :　    　进程号
PPLD：　　 父进程的进程号
TTY ：　　  进程启动的终端
STAT ：　　进程当前状态（S休眠状态，D不可中断的休眠状态，R运行状态，Z僵死状态，T停止）
NI ：　　      进程优先级
TIME：　　   进程自从启动以后启用CPU的总时间
COMMAND/CMD：进程的命令名
USER：　　  用户名
%CPU：　　 占用CPU时间和总时间的百分比
%MEM：　　占用内存与系统内存总量的百分比


> kill
-----------------------
kill -l

关闭进程：
kill -s 9 [进程号]　　（强行关闭）
kill -9   [进程号]　　（强行关闭）

重启进程：
kill -1  [进程号]　　（重启进程）
# kill -1 3567 　　 重启PID为3567的进程

关闭图形程序：

关闭图形程序： xkill
当你在终端下输入这个命令时，你的鼠标会变成一个小叉子，你只去点你想要关闭的窗口就可以关闭了

其它：
结束所有进程：    killall
查找服务进程号：  pgrep  [服务名称]
关闭进程：       pkill    [进程名称]



启动和关闭服务：
-----------------------
启动服务：(sudo下：)  https://www.cnblogs.com/Berryxiong/p/6193281.html
1.service+服务名称 + start/stop/restart     对服务进行启动
2.直接执行某个服务自己的管理脚本 + start/stop/restart

NO.1:
[berry@berry:practice] service vpnagentd status
vpnagentd is stopped 
[berry@berry:practice] sudo service vpnagentd start
Starting up Cisco AnyConnect Secure Mobility Client Agent
[berry@berry:practice] service vpnagentd status
vpnagentd (pid 7000) is running
[berry@berry:practice] service vpnagentd restart
Shutting down Cisco AnyConnect Secure Mobility Client Agent
Starting up Cisco AnyConnect Secure Mobility Client Agent
[berry@berry:practice] service vpnagentd status
vpnagentd (pid 7020) is running


NO.2:
/etc/init.d/vpnagentd start
/etc/init.d/vpnagentd stop
/etc/init.d/vpnagentd restart


linux下：
/etc/rc.d/init.d/httpd start
service http start  // 红帽系统的专用

源码包用service管理
RPM包只能用绝对路径启动服务


> df
查看磁盘空间占用情况：
-----------------------
df
df -lh :可视图看大小
df -h :可视图看大小
df -ah: 全部文件系统的使用情况
df -i: 显示inode信息
df -k: 以字节显示区块的占用情况
df -m: 以MB来显示文件的系统信息
df -T: 查看文件类型-type
df -t ext4: 只查看ext4这种文件类型
df -x ext4: 查看排除ext4类型外的其他类型文件
df -T -x ext4
df -T -t ext4
df --help:


> scp
-----------------------
1、从服务器上下载文件
scp username@servername:/path/filename /var/www/local_dir（本地目录）

 例如scp root@192.168.0.101:/var/www/test.txt  把192.168.0.101上的/var/www/test.txt 的文件下载到/var/www/local_dir（本地目录）


2、上传本地文件到服务器
scp /path/filename username@servername:/path   

例如scp /var/www/test.php  root@192.168.0.101:/var/www/  把本机/var/www/目录下的test.php文件上传到192.168.0.101这台服务器上的/var/www/目录中

 
3、从服务器下载整个目录
scp -r username@servername:/var/www/remote_dir/（远程目录） /var/www/local_dir（本地目录）

例如:scp -r root@192.168.0.101:/var/www/test  /var/www/  


4、上传目录到服务器
scp  -r local_dir username@servername:remote_dir
例如：scp -r test  root@192.168.0.101:/var/www/   把当前目录下的test目录上传到服务器的/var/www/ 目录



ftp服务器搭建：
-----------------------
也可见：onenote笔记 /linux/ftp
win:  https://blog.csdn.net/EXLsunshine/article/details/29181465
linux:  http://www.cnblogs.com/chenmh/p/5365274.html
        https://www.jianshu.com/p/4f988e70e85b
centos:  https://blog.csdn.net/zyw_java/article/details/75212608
默认启动端口为21：

****安装ftp****
which vsftpd #检测是否已经安装vsftpd
sudo apt-get install vsftpd
或者：
yum install -y vsftpd

netstat -lntp | grep 21  // ftp启动后都在21端口监听

此时ftp已经可以访问了： ftp://35.234.7.119

****更改启动状态****
sudo service vsftpd start #开启ftp服务
service vsftpd status #查看FTP的状态
sudo service vsftpd stop #停止ftp服务
sudo service vsftpd restart #重启ftp服务
sudo /etc/init.d/vsftpd restart #倘若上面的不行就使用路径的形式直接执行
sudo pkill vsftpd #有时候停止失败就干掉吧


wangsirlemon@c77:/$ cat /etc/vsftpd.conf | grep -v '^#'
listen=NO
listen_ipv6=YES
anonymous_enable=NO   #允许匿名用户
local_enable=YES   #允许使用本地账号登录
dirmessage_enable=YES
use_localtime=YES
xferlog_enable=YES
connect_from_port_20=YES
secure_chroot_dir=/var/run/vsftpd/empty
pam_service_name=vsftpd
rsa_cert_file=/etc/ssl/certs/ssl-cert-snakeoil.pem
rsa_private_key_file=/etc/ssl/private/ssl-cert-snakeoil.key
ssl_enable=NO


root@c77:~# useradd ftpuser  //创建一个用户
root@c77:~# usermod -s /sbin/nologin ftpuser  // 限制该用户只能ftp服务器访问，不能直接登录服务器
root@c77:~# passwd ftpuser   // 设置用户的访问密码
Enter new UNIX password: 
Retype new UNIX password: 
passwd: password updated successfully
root@c77:~# mkdir -p /data/ftp/pub      // 在/data中创建相关的目录,/data/ftp 为主目录, 该目录不可上传文件;/data/ftp/pub 文件只能上传到该目录下
root@c77:~# echo "Welcome to wangsirlemon FTP service." > /data/ftp/welcome.txt  //创建登录欢迎文件
root@c77:~# chmod a-w /data/ftp && chmod 777 -R /data/ftp/pub   // 设置访问权限
root@c77:~# usermod -d /data/ftp ftpuser  // 设置为用户的主目录



> traceroute
-----------------------
http://man.linuxde.net/traceroute
traceroute www.baidu.com          // 默认参数为-q, 默认三次探测数据包向每个网关发送三个数据包，网关响应返回的时间
traceroute www.google.com

-d：使用Socket层级的排错功能；
-f<存活数值>：设置第一个检测数据包的存活数值TTL的大小；
-F：设置勿离断位；
-g<网关>：设置来源路由网关，最多可设置8个；
-i<网络界面>：使用指定的网络界面送出数据包；
-I：使用ICMP回应取代UDP资料信息；
-m<存活数值>：设置检测数据包的最大存活数值TTL的大小；
-n：直接使用IP地址而非主机名称； 禁用DNS解析，以ip格式输出数据。
-p<通信端口>：设置UDP传输协议的通信端口；
-r：忽略普通的Routing Table，直接将数据包送到远端主机上。
-s<来源地址>：设置本地主机送出数据包的IP地址；
-t<服务类型>：设置检测数据包的TOS数值；
-v：详细显示指令的执行过程；
-w<超时秒数>：设置等待远端主机回报的时间；
-x：开启或关闭数据包的正确性检验。

traceroute -q 4 www.58.com // 向每个网关发送四个数据包，网关响应返回的时间



> lsof
-----------------------
http://www.cnblogs.com/peida/archive/2013/02/26/2932972.html

lsof: 列出当前系统打开的文件的工具
lsof [参数][文件]   // root用户执行
lsof -n | grep deleted  // 查看已经删除的文件，空间有没有释放，没有的话kill掉pid   // kill -9 pid

-a 列出打开文件存在的进程
lsof -c mysql = lsof | grep myself
-c<进程名> 列出指定进程所打开的文件 command
-g  列出GID号进程详情
-d<文件号> 列出占用该文件号的进程
+d<目录>  列出目录下被打开的文件
+D<目录>  递归列出目录下被打开的文件
-n<目录>  列出使用NFS的文件
-i<条件>  列出符合条件的进程。（4、6、协议、:端口、 @ip ）
lsof -p 1       // 通过某个进程号显示该进行打开的文件
lsof -p 1,2,3   // 列出多个进程号对应的文件信息
lsof -p ^1      // 列出除了某个进程号，其他进程号所打开的文件信息
-p<进程号> 列出指定进程号所打开的文件 pid:  
-u  列出UID号进程详情 user
-h 显示帮助信息
-v 显示版本信息
lsof -i: 端口号,列出所有的网络连接   
lsof -i tcp: 列出所有tcp 网络连接信息
lsof -i udp: 列出所有udp 网络连接信息
lsof -i :3306: 列出谁在使用某个端口
lsof -i udp:55: 列出谁在使用某个特定的udp端口
lsof -a -u root -i: 列出某个用户的所有活跃的网络端口
lsof -N: 列出所有网络文件系统
lsof -u: 域名socket文件
lsof -g 5555: 某个用户组所打开的文件信息
lsof -d description(like 2): 根据文件描述列出对应的文件信息
例如： lsof  -d  txt      lsof  -d  1     lsof  -d  2
// 0表示标准输入，1表示标准输出，2表示标准错误，从而可知：所以大多数应用程序所打开的文件的 FD 都是从 3 开始
lsof -d 2-3     // 根据文件描述范围列出文件信息
lsof -c sshd -a -d txt     // 列出COMMAND列中包含字符串" sshd"，且文件描符的类型为txt的文件信息
lsof -i 4 -a -p 1234    // 列出被进程号为1234的进程所打开的所有IPV4 network files
lsof -i @peida.linux:20,21,22,25,53,80  -r  3  
// 列出目前连接主机peida.linux上端口为：20，21，22，25，53，80相关的所有文件信息，且每隔3秒不断的执行lsof指令




/////////////////////////////////////////////////////////////////// 重拾linux

linux服务器踩点网站：
www.netcraft.com

必须分区：根分区，swap分区（最大为内存的2倍）
推荐分区：boot分区（200M左右）
给每个分区要分配挂载点
/dev/hd
/dev/sd
/dev/cdrom,sr0
/dev/fd：软盘
/dev/lp：打印机
/dev/usb/lp： usb打印机
/dev/mouse

ifconfig eth0 192.168.2.223 //配置eth0的ip

/bin/
/sbin/
/usr/bin/
/user/sbin/：超级用户
/boot/：启动文件
/dev/：设备文件
/etc/：配置文件
/home/
/lib/: 系统调用的函数库保存位置
/lost+found/:系统以外崩溃和关机，产生的碎片, fsck工具
/mnt/：挂载目录
/media/：挂载目录
/mnt/：挂载目录
/misc/：挂载目录
/opt/：三方安装软件保存位置，但一般放在/usr/local目录中
/proc/:虚拟文件系统，cpu,filesystem
/sys/:虚拟文件系统，内核相关的信息
/root/:超级用户目录
/srv/:服务数据目录
/tmp/:最好每次开机把改目录清空
/usr/: 类似于windows中windows目录
/var/:缓存，日志，

服务器：
1.不关机，只能重启，重启时应该关闭服务
2.访问高峰运行时，不要运行高负载命令
3.远程配置防火墙的时，不要把自己踢出服务器
4.ssh服务一般在22端口运行
5.密码规范并定期更新
6.合理分配权限
7.定期备份重要数据和日志


mkdir -p /tmp/little/bodu /tmp/little/cang: -p可以连续创建不存在的目录,可以连续跟进多个目录
mkdir -p tt/tt1
cd, pwd
..上一级目录，.是当前目录
rmdir:  删除空目录 (windows中的del )

cp -rp /tmp/bb  /tsd/kh: 
-r为复制目录, -p为复制文件的属性，也可以同时复制多个目录；复制目录同时可以更名
mv 源 目的: 更名

清除屏幕： ctrl + r或者clear 
rm -rf


查看文件：
---------------
touch "program files":创建文件最好不要空格，有空格则用引号引起来
nano:
cat -n
tac xx:倒序查看
more xx.txt:,q退出，只能往下翻，不能往回翻
less xx.txt:查看内容，也可以用向上，下，pageup,pagedown来查看，/来搜索关键词跟vi类似，q退出,n匹配下一个字符
head -n 10 xx.txt:前10行：默认查看10行
tail -n 7 xx.txt:后面10行:默认查看10行; -f:动态显示文件末尾内容
printenv
emacs
nano

locate .profile : 定位文件
df -lh
lsb_release -a
free -h:查看内存信息


> shutdown:
---------------
shutdown now  立刻关机
shutdown +5   5分钟后关机
shutdown 23:10  设置系统在23点10分时关机
shutdown -r now  立刻关闭系统并重新启动

shutdown -c :取消前一个关机命令
shutdown -h :关机
shutdown -r :重启    推荐使用shutdown 来重启

halt       关机
poweroff   直接断电
init 0     这些都是关机命令

shutdown now  立刻关机
shutdown +5   5分钟后关机
shutdown 23:10  设置系统在23点10分时关机
shutdown -r now  立刻关闭系统并重新启动


> reboot:
----------------
reboot  -f：强制重新开机，不调用shutdown指令的功能；
reboot  -i：在重开机之前，先关闭所有网络界面；
reboot  -n：重开机之前不检查是否有未结束的程序； 
reboot  -w：仅做测试，并不真正将系统重新开机，只会把重开机的数据写入/var/log目录下的wtmp记录文件
init 6 :重启


系统运行级别：
---------------
cat /etc/inittab
0  关机
1  单用户（通win的安全模式，启动最小的服务）
2  不完全多用户，不含NFS（网络文件系统）服务，类似：文件共享
3  完全多用户
4  未分配
5  图形界面
6  重启

id:3:initdefault:     //修改系统默认的运行级别
runlevel              //查询系统运行级别
wangsirlemon@c77:~$ runlevel
N 5                   // N为上一次运行的级别，N标识null, 5表示当前的运行级别
 

> grep
----------------
ls -al | more  且
ls -al && less  接着
lskk || pwd  或者


输入输出重定向：
-----------------
输出重定向：
ls -l /tmp > /tmp.msg   >  为写入
data >> /tmp.msg        >> 为追加

输入重定向:
wall < /etc/motd 将motd文件信息进行广播

错误的输出重定向：
cp -R /usr /backup/usr.bak 2 >/back.error  将拷贝的错误信息存入到/back.error中


> file:
--------------------
判断文件类型
file test.test


> vi/vim
------------------------------
https://www.cnblogs.com/yangjig/p/6014198.html

visual模式：
-------------
按v/V键从normal模式进入；
使用j,k,h,l 或者方向箭头进行选择，9k或者9方向箭头移动9行，其他依次类推
ggVG 选中全部的文本， 其中gg为跳到行首，V选中整行，G末尾
Ctrl + v   从光标当前位置开始，选中光标起点和终点所构成的矩形区域，再按一下Ｃtrl + v结束。

选中之后可以进行：
d删,
y复制,
ctrl+v粘贴系统剪切板
p粘贴,（不选中，默认一行）
"+y    复制到系统剪贴板(也就是vim的+寄存器） 
"+p   从系统剪贴板粘贴 


insert模式：
-------------
i :当前字符追加
o :下面另起一行
O :上面另起一行 
a :当前字符后追加
A :当前行末追加
s :删除当前字符并进入insert
S :删除当前行并进入insert
:w filename  另存为
:wq!  文件所有者和root用户可以使用
:q!  丢弃所有修改并退出
:e! 丢弃所有修改并重新载入该文件
ZZ :保存当前文件并退出vim



光标定位:
--------
H,M,L  跳到第一行，中间行，结尾行
h,j,k,l,
9k,12j
使用j,k,h,l 或者方向箭头进行选择
9k或者9方向箭头移动9行，其他依次类推

0 行首 ^ 行首非空白字符, $行尾, 1$当前行, 2$下一行尾   ----单行
gg, G, XG   ---多行
(,)   ---句
{,}   ---段

fx 当前行上查找下一个字符x（向右方向）
Fx 当前行上查找下一个字符x（向左方向）
% 移动到与当前括号相匹配的括号
50% 跳到50%处， 90%跳到90%处
Ctrl + u/d/e/y   向上/下滚动半屏/一行

normal模式：
-------------
:set nu  行定位 
:set number 行定位 
:set ruler 右下角显示当前光标位置
:set nonu
:n      :定位到哪一行
nG      :定位到哪一行

ctrl + G 行定位
ctrl + g :统计行信息
g ctrl+g字数统计

u :撤销，U是撤销一行的全部操作
ctrl+r :重做
. :重复上一次动作


dd :删除行(准确为剪切),行内容
D :删除当前字符到行末的内容
33,56d  :删除33到56行
dG :删除当前行至文件尾的内容
dgg :删除当前行至文件头的内容
dd :剪切当前行
3dd :剪切当前行以下3行
p,P  :粘贴在当前光标所在行下或行上
pp :粘贴行

r : 改光标所在的字符
R : 一直处于替换模式,esc退出replace模式
x : 删除光标字符
X ：删除光标左边字符
S ：删除光标所在的列，并进入输入模式
J : 删除换行符


查找和替换：
---------------
https://harttle.land/2016/08/08/vim-search-in-file.html

/搜索   支持正则，/vim$ /vim\$
?搜索，往前搜  
n:下一个；N:上一个  3n：后面第三个 
注意查找回车应当用\n，而替换为回车应当用\r（相当于<CR>）
/Width\c  \c表示大小写不敏感，\C表示大小写敏感

set noignorecase 区分大小写

替换：
:s/foo/bar/g             :当前行
:%s/foo/bar/g            :全文，foo为搜索字符，bar为替换的值
:'<,'>s/foo/bar/g        :visual模式下选中的区域
:5,12s/foo/bar/g         :5到12行
:.,+2s/foo/bar/gci       :当前行.与接下来两行+2; g表示全局，c表示确认模式,i表示大小写不敏感，I表示大小写敏感

:1,4s/^/#/g         :为1-4添加#号
:1,4s/^#//g          :删除1-4行的行首的#号


replace with bar (y/n/a/q/l/^E/^Y)?
询问模式中：y表示替换，n表示不替换，a表示替换所有，q表示退出查找模式， l表示替换当前位置并退出。^E与^Y是光标移动快捷键


vim使用技巧：
--------------------------
:r /etc/issue/abc.txt       可以导入路径中abc的内容到光标的位置
:!which ls        在不退出vim的状况下查找命令,查找存放在哪一个目录下
:r !date          可以引入时间到文本中，可以直接导入命令的执行结果
:map ^P I#<esc>   定义快捷键，在每行的按ctrl+p可以用#注释这一行
:map ^B 0x        定义快捷键，在每行的按ctrl+b可以取消#注释     
（格式：map 快捷键 触发命令）录制命令时，先按ctrl+v,再输入快捷键
同样可以定义快捷键插入邮箱等信息
:ab mymail sample@example.com     那么以后输入mymail回车之后都会用后面的邮箱地址进行替换（insert模式）


mac配置vim
--------------------------
https://blog.csdn.net/yuanmengong886/article/details/52914714
https://www.jianshu.com/p/9fa9bedc259a
主题：https://vimcolors.com/
cp  /usr/share/vim/vimrc  ~/.vimrc
cp  /usr/share/vim/vimrc  ~/.vimrc

.vimrc中是永久生效的，普通用户在用户名目录下，root用户在root用户下

"如下为自定义设置
set autoindent        " 自动对齐
set number            " 显示行号
set hlsearch          " 高亮搜索结果
set wrap              " 自动换行
set incsearch         " 立即高亮显示当前匹配
set ignorecase        " 忽略大小写
set smartcase         " 如果有一个大写字母，则切换到大小写敏感查找  
set showmatch         " 高亮显示对应的括号
set ruler             " 设置右下坐标
set confirm           " 在处理未保存或只读文件的时候，弹出确认
set tabstop=4         " Tab键的宽度
set cursorline        " 突出显示当前行 
set cursorcolumn      " 突出显示当前列
set clipboard+=unnamed   " 共享剪贴板

" 语法高亮
syntax on          
set fileencodings=utf-8,gb2312,gbk,cp936,latin-1
set fileencoding=utf-8
set termencoding=utf-8
set fileformat=unix
set encoding=utf-8

" 配色方案
" default,delek,murphy
colorscheme default
" 指定配色方案是256色
set t_Co=256
set wildmenu

" C风格的对齐方式
set cindent
set completeopt=longest,menu

" 文件被改动时自动载入
set autoread
" 顶部底部保持3行距离
set scrolloff=3

" 代码补全
set completeopt=preview,menu
" 设置字体
set guifont=Menlo:h16:cANSI

"syntax enable         " 语法高亮
"set nu!               " 显示行号
"设置光标样式为竖线vertical bar
" Change cursor shape between insert and normal mode in iTerm2.app


> iptables
----------------------
防火墙：
http://man.linuxde.net/iptables
iptables -L -n -v: 查看已经添加的规则
INPUT链：处理输入数据包。
OUTPUT链：处理输出数据包。
PORWARD链：处理转发数据包。
PREROUTING链：用于目标地址转换（DNAT）。
POSTOUTING链：用于源地址转换（SNAT）。


> ln:
-----------------
link:
ln -s /etc/issue.bak issue.bak.soft 
软连接：类似win的快捷方式,文件以l开头,权限为lrwxrwxrwx,所有用户可读写执行,字节大小为一个快捷方式大小，很小；

ln /etc/issue.bak issue.bak.hard
硬连接：就是程序的执行,类似拷贝，即使原文件删除，依然可以访问 ,不能跨分区，不能对目录进行使用，文件属性与原文件保持一致,类似cp -p，会同步更新：一般做备份用,


> echo:
-----------------
echo "xxx" > /etc/host   : 写入文件
echo "xxx" >> /etc/host   : 在文件末尾进行追加

wanghaitao:~$: echo -e 'ab\bc'       :\b删除
ac
wanghaitao:~$: echo -e 'a\tb\tc\nd\te\tf'      :\t tab \n换行
a b c
d e f
wanghaitao:~$: echo -e '\x61\t\x62\t\x63\n\x64\t\x65\t\x66'    
a b c
d e f
:\x表示16进制，后面可以跟两位16进制数； \0表示8进制,后面可以跟3位8进制数据



> echo
---------------------
echo $PATH
echo $env



> ls -i:
-----------------
每一个文件有一个id, -i可以查看，如果是硬链接，则两个文件的id一致，更新一个文件的同时，也会更新另外一个文件


> chmod:
-----------------
chmod [ugoa][+-=][rwx] 文件目录： u:user, g:group, o:other, a:all
chmod g+w,o-r sys.bakfile: 同时操作多个权限 
chmod g=rwx sys.bak
chmod 700 sys.bak ：一般操作习惯用数字来表示
532： r-x-wx-w-
chmod -R 700 /tmp: -R为递归，包括目录和目录中的文件

note:
1.删除一个文件不是对一个文件有写的权限，而是对这个文件所在的目录有写的权限
2.一般rx的权限是成对出现的；写和非写的权限
3.r: ls;                       cat/more/less/head/tail
  w: touch/mkdir/rmdir/rm;     vim/vi
  x: cd;                       script cmd


chmod u(g)+s /bin/touch :给/bin/touch命令 设置userid或者groupid


> chown:
----------------
-R：递归
改变所有者
useradd   谁创建这个文件，谁就是这个文件的拥有者，组的缺省值为创建者owner


> chgrp:
---------------
改变所属组
groupadd


> umask:
---------------
$ :umask -S
u=rwx,g=rwx,o=rx    // linux默认文件创建权限：drwxr-xr-x
-rw-r--r--          // linux默认创建的文件是不具备执行的属性
$ :umask
0002    //777-002=755
umask 023        更改缺省值


> find:
-----------------
find[范围][条件]
find / -name init   //名字为init，为精准搜索， / 为根目录的意思
find /etc -name *init*    //文件名包含init，*为通配符，类正则
find /etc -name init？？？   //三个?代表三个字符，？为单个字符 
find /etc -iname *init*    //-iname不区分大小写


find  /etc -size +204800 
// 查找大于100M的文件，1个数据块为512字节，0.5k; 100M=102400KB=204800块，数据块为linux存储的最小字节；
// 数字前面+为大于，-为小于,等于前面没有符号

find /etc -user xxxx:按用户查找

find /etc -cmin -5  //查找5min内被修改过的文件和目录,-5为5分钟内，+5为超过5分钟
-amin   :访问时间access
-cmin   :文件属性changes
-mmin   :文件内容modify

find /etc -size +163840 -a -size -204800   : -a为连接符，且的关系；查找大于80M,小于100M的文件； -o为或

find /etc -name init -exec ls -l {} \;      :查看init文件并显示其详细信息 
-exec/-ok为执行，-ok的区别是会询问是否操作，用y,n来确认    {} \;是固定格式,  

find /etc -name init* -a -type d   :查看名字以init开头的目录
-type : 文件类型，f文件，d目录，l为链接文件

-inum: i节点查找
find . -inum 31531 -exec rm {} \; //以i节点查找然后删除，用于删除一些无法打印出来的奇怪字符的文件  


> locate:
---------------------
updatedb    :更新文件数据库，除开/tmp等存放临时文件的目录，不会收录
locate xx.txt : 定期进行更新文件列表，如果需要查找刚刚创建的文件，则需要updatedb一下；find是现在立即查找‘
locate -i xx :-i表示不区分大小写


> which/whereis:
---------------------
$ which cp
/bin/cp  除了可以查看文件路径，还可以查看文件别名；/bin为普通权限，/sbin为root权限
alias   :查看别名
alias rm='rm -i'  :设置别名，当重启或者登陆后，别名被删除，永久生效需要在主目录下配置.bashrc
unalias 别名   :删除别名,

如果cp命令有一个别名，如果要使用自己本来的意义则前面加一斜杠 \cp

wangsirlemon@c77:~$ which cp
/bin/cp
wangsirlemon@c77:~$ whereis cp
cp: /bin/cp /usr/share/man/man1/cp.1.gz     //后面为帮助文档，帮助文档一般在/usr/share目录下


> man:
-------------
man ls
man date
man services: 查看配置文件的帮助信息；这儿不用输入绝对路径：/etc/services,输入配置文件名就可以了；
man查看文件,如果遇到命令和服务名字相同的，1为命令的帮助，5为配置文件的帮助,如果不输入数字则默认查看命令的帮助文档
~$ man 1 passwd
~$ man 5 passwd
~$ man passwd
~$ whereis passwd    ://列出了命令，服务，以及对应的帮助文档
passwd: /usr/bin/passwd /etc/passwd /usr/share/man/man5/passwd.5.gz /usr/share/man/man1/passwd.1ssl.gz /usr/share/man/man1/passwd.1.gz


> whatis:
--------------
简略查看帮助信息
wangsirlemon@c77:~$ whatis passwd
passwd (1ssl)        - compute password hashes
passwd (1)           - change user password
passwd (5)           - the password file
wangsirlemon@c77:~$ whatis ls
ls (1)               - list directory contents


> apropos:
---------------
apropos services   :简略查看某个服务的帮助信息 //注意不用绝对路径


> --help:
---------------
touch --help


> info:
---------------
info info


> help:
---------------
help shell内置命令: ，如cd,umask
man cd/if/pwd: 可以查看内置的命令
help if
help umask


> history:
--------------
查看历史记录命令



查看当前用户
----------------
> who: 查看主机上的用户 
> w: 查看当前用户 -----查看用户的详细信息，比who更详细
> whoami: 查看当前登录的用户是谁
> lastlog | head -n 5: 查看主机上的用户
> uptime :连续运行多长的时间


用户管理命令：
useradd yangmi
passwd yangmi  //root用户可以设置简单密码，普通用户不能设置简单的密码，管理员可以更改任何人的密码

$ who   //查看当前登录的用户； 登录终端，tty本地终端，pts远程终端，另外可以看到登录时间，还有登录的ip,没有则为本地
captain  console  Aug  6 08:56 
captain  ttys000  Aug  6 14:36 
captain  ttys001  Aug  6 17:26 

wangsirlemon@c77:~$ who
wangsirlemon pts/0        2018-08-06 07:25 (182.150.28.13)

wangsirlemon@c77:~$ w
 09:30:25 up 6 days,  7:19,  1 user,  load average: 0.00, 0.00, 0.00     
USER     TTY      FROM             LOGIN@   IDLE   JCPU   PCPU WHAT
wangsirl pts/0    182.150.28.13    07:25    1.00s  0.11s  0.00s w

//up通uptime，表示连续运行的时间，load average表示负载平均值，分别表示1min,5min,15min
//IDLE表示空闲多久了
//PCPU：cpu当前的占用时间
//WHAT: 当前CPU在执行什么命令



压缩和解压：
==============================
.gz        gzip        gunzip(gzip -d)
.tar       tar -cf     tar -xf
.tar.gz    tar-zcf     tar -zxf
.zip       zip -r      unzip
.bz2       bzip2       bunzip2
.tar.bz2   tar -cjf    tar -xjf


> gzip:
-----------------
.gz .zip(最古老的)

rm -rf *   ：删除当前目录下所有文件

gzip xx.tar  ：只能压缩文件,不能压缩目录，跟win不一样，且不保存原文件
gzip test.tar

解压缩：
gunzip  xxx.xx
gzip -d  xxx.xx  


> tar:
-------------------------
压缩：
1.先用tar打包目录，再用gzip来打包
2.-z :打包和压缩一起做

tar -cvf 压缩后的名字.tar 目录    :-v表示详细信息，这个可以打包目录和文件,-c为打包的意思，-z就是打包和压缩一起做了
gzip  janpan.tar                :压缩janpan.tar，会生成一个压缩包

压缩：
tar -zcf janpan.tar.gz Japan : //打包和压缩一起做了,-v只能加在中间，不能加在末尾
tar -jcf janpan.tar.bz2 Japan  //用tar来压缩gz

解压：
tar -zxf xx.tar   :一般用这个命令比较多，不用显示详细信息
tar -jxf janpan.tar.bz2   //用tar来解压gz

参数：
-x :解包
-c :打包
-f :指定解压文件 
-z :打包/解包，压缩一起做
-v :详细信息
-j :打包成bzip2格式 


.tar.xz格式：
tar xf


.tar.xz
------------------------
创建tar.xz文件：
只要先 tar cvf xxx.tar xxx/ 这样创建xxx.tar文件先，然后使用 xz -z xxx.tar 来将 xxx.tar压缩成为 xxx.tar.xz

解压tar.xz文件：
先 xz -d xxx.tar.xz 将 xxx.tar.xz解压成 xxx.tar 然后，再用 tar xf xxx.tar来解包。


> zip:
------------------------
win,linux,mac都兼容; 会保留原文件
zip [-r] [压缩后的文件名] [文件和目录]   : -r表示压缩目录；

unzip 文件目录名字  ：打包；zip文件也可以用tar来解压, 和进行压缩


> bzip2:
-------------------
gzip的升级，压缩率很高，大文件一般推荐这种
-k :相对于gzip多了一个-k的选项，意思是保留原文件

压缩：
bzip2 [-k] test.tar.gz  : //他是压缩一个打包好的文件，不是目录
tar -cjvf janpan.tar.bz2 Japan  //用tar来压缩gz

解压：
bunzip2 [-k] janpan.tar.bz2
tar -xjvf janpan.tar.bz2   //用tar来解压gz,只能解压tar压缩后的gz



网络管理命令：
===================================
域名解析：（把域名解析成一个ip）


> whois
-----------------
whois .baidu.com


> nslookup
查询dns，解析结果
-----------------
nslookup domain [dns-server]
nslookup facebook.com 8.8.8.8  //157.240.13.35
nslookup -vc facebook.com 8.8.8.8 // -vc是强制使用tcp来查询DNS服务器

或者直接输入nslookup
nslookup baidu.com    //域名
nslookup 220.181.57.216  //ip


> ping
查询dns响应时间以及稳定性
--------------------
ping 114.114.114.114

> arping
类似ping,发送ARP报文
--------------------
ping www.baidu.com

> dig:
查询dns,解析结果，解析时间
--------------------
比nslookup好用
@<服务器地址>：指定进行域名解析的域名服务器；
-b<ip地址>：当主机具有多个IP地址，指定使用本机的哪个IP地址向域名服务器发送域名查询请求；
-f<文件名称>：指定dig以批处理的方式运行，指定的文件中保存着需要批处理查询的DNS任务信息；
-P：指定域名服务器所使用端口号；
-t<类型>：指定要查询的DNS数据类型；
-x<IP地址>：执行逆向域名查询；
-4：使用IPv4；
-6：使用IPv6；
-h：显示指令帮助信息。

dig www.facebook.com @8.8.8.8 +short  //通过指定DNS解析得到的最终域名157.240.13.35

dig +trace www.scnu.edu.com    
// 跟踪域名解析； https://blog.csdn.net/a583929112/article/details/66499771
// https://blog.csdn.net/crazw/article/details/8986504
// https://blog.csdn.net/jiajiren11/article/details/80071312
当域名不存在的时候，返回一条SOA记录

dig www.baidu.com  // CNAME是别名；A是address,ip; NS是服务器的主机名;在AUTHORITY SECTION里面的服务器主机名，都会在ADDITIONAL SECTION里给出该主机的IP地址。
dig -t soa www.baidu.com  //解析域名的主从关系  soa:start of authority
dig youtube.com @8.8.8.8 +tcp    //使用tcp查询dns,但很多地方这种查询方式会被拦截
dig @192.168.10.1 -p 5353 google.com  //确认开启udp转发，ip为路由ip,端口为ss-tunnel端口

DNS 完美查询的流程就是： dnsmasq -> ChinaDNS -> ss-tunnel -> 国外DNS服务器(e.g: 8.8.8.8)。


> trace:
--------------------
源码位于：\kernel\trace\trace.c

> traceroute:
--------------------

通信命令：
write:
--------------------
write lingzhiling
给用户发信息，ctrl + D 结束，用户在线才能发信息,可以用w查看谁登陆了


> wall:
--------------------
(write all):发送广播信息
wall shengchao is a honest man!
给所有用户发信息，所有用户都能收到，包括自己。


> ping
-------------------
ping -c xxx
ifconfig

ifconfig eth0 192.168.2.223 //配置eth0的ip


> mail:
----------------
mail 用户: 发邮件，可以用户不在线,ctrl + D结束并发送
用户登陆，并输入mail可以查看邮件列表； 输入序列号查看邮件内容； 删除邮件：d 序列号；重查看邮件列表 h； 退出mail,q键


> last, lastlog, history
----------------
last:查看所有用户的登陆信息
lastlog:知道每个用户(包括没有登录过的用户)的最后一次登陆的信息
lastlog -u uid(用户的uid):可以查看指定用户的信息


> setup:
---------------
在redhat系列的linux上面才可用，unix不能用


> mount:
---------------
mount [-t 文件系统] 设备文件名 挂载点
mkdir  /mnt/cdrom    :挂载的前一步一般会先在mnt目录下创建一个空目录
mount -t iso9660  /dev/sr0 /mnt/cdrom    ：光盘的系统一般都为iso9660
umount /dev/sr0    :退出挂载的目录，然后再执行卸载光盘


mkdir /mnt/cdrom
mount /dev/cdrom /mnt/cdrom
cd /mnt/cdrom


> logout:
-----------------
退出登录
服务器操作完或者远程登录后，一定要logout


> rpm,yum
------------------
一个为本地，一个为在线安装

1.先挂载安装镜像
2.进入目录：rpm -ivh xxxx.rpm
3.升级： rpm -Uvh xxxx.rpm
4.卸载： rpm -e  httpd(包名) //只写包名，不用写全名；不会卸载依赖
rpm -q httpd   //查看httpd安装没有，并列出信息
rpm -qa  //显示所有的安装包
rpm -qi httpd  // 显示安装包的详细信息
rpm -ql httpd   //显示安装的位置
rpm -V httpd   //校验指定的包中文件


安装：
[root@localhost ~]# rpm -ivh sudo-1.7.2pl-5.el5. 5.el5 .rpm    
-i  安装所选择的一个或多个软件包
-H  用“#”显示完成的进度
-q  查询软件包系统或所选择的一个或多个软件包 
-e 删除所有选择的一个或多个软件包 
-u 把一个已经安装好的软件包升级到新版本 
-v 验证已安装或已选择的一个或多个软件包
[root@localhost ~]# rpm -ivh sudo   查询sudo软件包是否被安装
 
其他选项：
--excludedocs
不安装软件包中的文档文件
--prefix PATH
将软件包安装到由PATH指定的路径下
--test
只对安装时行测试，并不实际安装
--replacepkgs 
覆盖安装，假如我们不小心删除掉了安装包里的某些软件，这个参数就非常有用了
-U 
在参数中加入大写的U可以对软件进行升级
[root@localhost ~]# rpm -Uvh sudo-1.7.2pl-5.el5. 5.el5 .rpm
 
卸载：
注意：如果其它软件包有依赖关系，卸载时会产生提示信息，可使用--nodeps强行卸载
[root@localhost ~]# rpm -e --nodeps sudo   但是一般不推荐这样用，我们可以先卸载依赖的软件包然后再卸载。


本地和在线安装包都可以用yum 来进行管理


> yum:
---------------------------
readhat系列(centos)有setup命令
service network restart :重启网络服务
yum list：列出安装
yum -y update 包名：更新
yum -y remove 包名：卸载
yum grouplist
yum groupinstall 组名：
yum groupremove 组名：
yum install          安装
yum check-update     检测升级
yum update           升级
yum list             软件包查询
yum info             软件包信息
yum remove           卸载
yum -help 
man yum              帮助 

源码包
保存位置：/usr/local/src
安装位置：/usr/local

上传文件在win中往linux传： wincp软件(ssh + scp)
./configure 软件配置与检查

> make
------------------
make :编译
make install :编译安装
make clean :清空编译文件


> webmin
----------------
webmin是linux中的图形文件管理后台  



用户组：
---------------
/etc/passwd
/etc/shadow是存放用户密码的（密文形式存放）

UID:
0:超级用户
1-499：系统用户(伪用户)
500-65535：普通用户

/home/用户名:普通用户
/root/：超级用户

/bin/bash/    :shell
/bin/touch    :touch



切换用户：
---------------------
su root             临时提权到root用户
su – root           切换到root用户
su -- lili          切换到lili用户
su -- root          切换到root用户

su -- wangsirlemon

setUID=4
# chmod  u+s /bin/touch       给touch设置一个UID
# chmod  4755 /bin/touch      
# chmod  u-s /bin/touch       取消UID
# chmod  755  /bin/touch      

setGID=2
[root@localhost ~]# chmod  g+s /bin/touch  
[root@localhost ~]# chmod  2755  /bin/touch

站着位：
t=1
粘着位的授权方式：
[root@localhost test]# chmod  o+t abc  
[root@localhost test]# chmod  1755  abc



/proc
---------------------
这个目录在内存中，所有进程都动态存放在这个目录
cat /proc/cpuinfo       //cpu信息
cat /proc/meminfo       //内存信息
cat /proc/partitions    //分区信息


进程优先级
---------------------
取值范围（-20,19）   -20为最高优先级，启动一个进程，默认优先级为0

nice命令 
指定程序的运行优先级
格式：nice -n command
例如：nice --5 command

renice 命令
改变一个正在运行的进程的优先级
格式： renice n pid
例如：renice -5 777

[root@bogon cron]# ps -le
[root@bogon cron]# renice -20  [PID]



进程中止（挂起）和终止
---------------------
挂起（ctrl+z）即：stopped
终止（ctrl+c）
系统中有两种运行的进程，我们在前台是看不到的。一种是后台执行的命令，一种就是被暂停的;

查看被挂起的进程（jobs）

进程的恢复：
恢复到前台继续运行（fg）
恢复到后台继续运行（bg）



计划任务：
---------------------
at  　　 安排作业在某一时刻执行一次
batch   安排作业在系统负载不重时执行一次
cron    安排周期性运行的作业crontab


at格式：
at 5:30pm
at 17:30
at 17:20 today
at now+3 hours
at now+180 minutes
at 17:30 12.1.11
at 17:30 1.11.12

[root@bogon ~]# at now+5 minutes    5min后执行
at> /usr/bin/wall < /etc/motd 　　做一个广播，把etc/motd 文件广播出去
at> 　　　　　　　　　　　　　　    可以继续写其它的计划，用命令时最好写绝对路径，为了安全
at> <EOT>
job 2 at 2012-05-20 13:43 　　   ctrl+d保存计划并退出


是否还担心我们的计划是否启动，通过下面两个命令查看at进程是否正常启动
[root@bogon test]# at -l
3 2012-05-20 13:57 a root
[root@bogon test]# atq
3 2012-05-20 13:57 a root

如果真的没有启动的话，可以通过手工方式重新启动一下
[root@bogon ~]# /etc/rc.d/init.d/atd start

删除at计划任务
[root@bogon test]# at -d

查看at计划任务
[root@bogon test]# ls /var/spool/at/

batch用法通at
 


crontab:
---------------------
案例：在上学的时候都有上机课，周一到周五，下午5点30上课结束。我们需要在5点30发一个通知，5点45自动关机。设定计划任务需要分两步完成，第一步提醒，第二步关机
分钟　　 小时 　　 天　　 月　　  星期 　　 命令/脚本
30　　   17 　　   * 　　 * 　　 1-5 　　 /usr/bin/wall < /hzh/test/guanji.wall
45 　　  17　　    * 　　 * 　　 1-5 　　 /usr/bin/shudown -h now

操作方法:
[root@bogon test]#  crontab -e 　　 回车会进入一个vi文本中
　　根据我上面介绍格式编写内容，然后保存退出
crontab: installing new crontab 表示创建计划成功

通过下面方式进行查看计划：
[root@bogon test]# cd /var/spool/cron
[root@bogon cron]# ls
root
[root@bogon cron]# cat root
30 17 * * 1-5 /usr/bin/shudown -h now


> zsh
---------------------
chsh -s /bin/zsh         进入zsh,完全退出终端，再打开
chsh -s /bin/bash        切回bash
cat /etc/shells          查看装了哪些shell

zsh语法高亮：
https://www.cnblogs.com/weixuqin/p/7029177.html
https://www.jianshu.com/p/19c0a8890fe0
  
1. brew install zsh-syntax-highlighting
2. 根目录下vim .zshrc              
3. 在.zshr中添加 source /usr/local/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
4. 添加：source ~/.bash_profile
5. source ~/.zshrc


.zshrc
---------------------
https://www.jianshu.com/p/19c0a8890fe0
http://blog.sina.com.cn/s/blog_71539d240101fh8s.html

source /usr/local/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
source ~/.bash_profile
#PROMPT='wanghaitao:%c$: '       # c表示绝对路径，d表示相对路径
PROMPT="%* %c: "

%u 用户名
%c 目录的base
%d 完整目录
%% 为了显示%，需要用%进行转义。
%t %T时间

#开启颜色
autoload -U colors && colors       
#配置提示符模式。。 其实配置之前的PS1也是可以的 但是为了尊重说明文档。。。
PROMPT="%{$fg[red]%}%n%{$reset_color%}@%{$fg[blue]%}%m %{$fg[green]%}%1|%~ %{$reset_color%}%#>"        
#在行末显示上一命令的返回状态
RPROMPT="[%{$fg_bold[yellow]%}%?%{$reset_color%}]"


> source
---------------------


> wc
---------------------
格式：
wc [选项]文件...
wc -c list.txt
grep -o wall list | wc -l         //在list文件中只匹配wall字符出现的次数

参数：
-c 统计字节数。
-l 统计行数。
-m 统计字符数。这个标志不能与 -c 标志一起使用。
-w 统计字数。一个字被定义为由空白、跳格或换行字符分隔的字符串。
-L 打印最长行的长度。
--help 显示帮助信息
--version 显示版本信息

ctrl+alt+F1   命令行全屏模式


.bash .zsh
> $PS1 $PS2
---------------------
https://www.cnblogs.com/cuoreqzt/p/5848209.html
https://blog.csdn.net/dangyt123/article/details/53234273

1. 打印现在所用的输出
echo $PS1   默认 \h:\W \u\$
echo $PS2   默认 >

2.设置终端前缀的输出内容（一次性）
PS1="\t\W"
可用格式：
\d–现在的系统日期
\t–现在的系统时间
\h–主机名
\\# – 命令号（Comannd Number）
\u–用户名
\W–当前所在的路径
\w–当前所在的完整路径

2. 在.bash_profile中配置 export PS1="\u \w$"（永久）


> pushd, popd
---------------------
cd, pushd, popd

[root@localhost etc]# pushd ~/Desktop/shell_test/
~/Desktop/shell_test    /etc
[root@localhost shell_test]# 

[root@localhost shell_test]# pushd 
/etc    ~/Desktop/shell_test
[root@localhost etc]#

[root@localhost etc]# popd
~/Desktop/shell_test
[root@localhost shell_test]#



> 历史命令调用
---------------------
上下箭头
!n     冲突第n条历史命令
!!     重复上一条命令
!str   重复最后一条以str开头的命令


> bash常用快捷键
---------------------
ctrl + A :移动光标到开头
ctrl + E :移动光标到结尾
ctrl + R :在历史记录中搜索

ctrl + C（终止）, + D（退出）, + L（清屏）
ctrl + U（剪切光标之前的命令）, + K（剪切光标之后的命令）
ctrl + Y (粘贴ctrl+U或 ctrl+R的内容)


sumblime快捷键
---------------------
ctrl + shift + d：快速复制
ctrl + shift + k: 快速删除一行
ctrl + shift + l: 竖线模式编辑
ctrl + l: 快速选中
ctrl + shift + 上下箭头：快速移动


查看ios log
--------------------------
http://www.cocoachina.com/ios/20170719/19933.html

brew install libimobiledevice --HEAD
idevicesyslog

idevicesyslog >> iphone.log & 重定向文件
用tail -f和grep查看log
tail -f iphone.log
tail -f iphone.log | grep 'QQ’  # 查看包含QQ的行

Warning: libimobiledevice HEAD-3a37a4e_2 is already installed and up-to-date
To reinstall HEAD_3, run `brew reinstall libimobiledevice`


class-dump
---------------------
http://stevenygard.com/projects/class-dump/
https://www.jianshu.com/p/1e3fe0a8c048

1.download
2.open /usr/local/bin
3.复制 dmg中的文件到/usr/local/bin
4.sudo chmod 777 /usr/local/bin/class-dump
5.usage:class-dump --help

class-dump 3.5 (64 bit)
Usage: class-dump [options] <mach-o-file>

  where options are:
        -a             show instance variable offsets
        -A             show implementation addresses
        --arch <arch>  choose a specific architecture from a universal binary (ppc, ppc64, i386, x86_64)
        -C <regex>     only display classes matching regular expression
        -f <str>       find string in method name
        -H             generate header files in current directory, or directory specified with -o
        -I             sort classes, categories, and protocols by inheritance (overrides -s)
        -o <dir>       output directory used for -H
        -r             recursively expand frameworks and fixed VM shared libraries
        -s             sort classes and categories by name
        -S             sort methods by name
        -t             suppress header in output, for testing
        --list-arches  list the arches in the file, then exit
        --sdk-ios      specify iOS SDK version (will look in /Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS<version>.sdk
        --sdk-mac      specify Mac OS X version (will look in /Developer/SDKs/MacOSX<version>.sdk
        --sdk-root     specify the full SDK root path (or use --sdk-ios/--sdk-mac for a shortcut)

6. class-dump -H /Users/mac/Desktop/Payload/Kt.app -o /Users/mac/Desktop/Payload



3800刷不死uboot：
----------------------------------
1.winscp登录路由器，放wndr3800.bin文件的temp文件下
2.putty登录路由器
3.cd /tmp，执行mtd -r write wndr3800.bin u-boot
4.重启
5.断电，按住复位键，插电，等10s以上进入不死界面


3800刷原厂：
----------------------------------
1.直接在不死界面更新uboot.bin文件
2.或者在路由器终端中执行mtd -r write uboot.bin u-boot


+-------------------------------------------------------------------------
3800配置:
RAM:16M
ROM:128M

openwrt:
凡包含factory字样的，是在原机界面上直接刷机用的，
包含sysupgrade字样的，是在op系统里的界面，更新固件用的。

tftp固件是用tftp方式 刷机用的。网件和巴法络都支持tftp方式 刷机，这个方式相当于不死uboot.
另网件用如果用tftp方式刷机，要选择img格式的固件。

tar格式的固件是不支持mtd方式来刷机的。另tar格式是直接在界面上传刷机，不需要解压，在刷机的时候它自动在路由里进行解压。


mtd:
-----------------
mtd:上传文件到路由刷机，这种方法只适用于openwrt和dd等第三方系统，原厂是不可以的。
操作方法是ssh登录路由，或者用winscp、putty等软件来登录到路由，把固件上传到路由的/tmp里,比如你的固件名称为xxxxx.bin。就执行如下命令：

mtd -r write xxxx.bin firmware

-r是刷完机后重启的意思。

用这个方法也可以刷uboot和art，前提得是这个openwrt固件是没我锁定uboot和art分区的，openwrt官方的固件是全部锁定的，mtd刷uboot和art是不行的。明月系列TP固件解锁了uboot的 ，为了安全，没有解锁art。因此，在这系列固件里可以用这种方法刷uboot。如果uboot名为xxxx.bin，则命令如下：

mtd -r write xxxx.bin  u-boot

mtd刷机方法不常用，主要用来刷其它型号的固件，比如tp的4310/4300/3600,这三个型号的路由是一样的硬件，只要硬件一样，固件就可以通用。但我们用第一种方法是不可以直接刷入的。在浏览器刷机会校验固件头，那里有固件的型号，和路由当前系统对不上，会限制刷机。但用mtd方法，则可以突破这种限制，可以使用其它硬件完全相同的固件。
+-------------------------------------------------------------------------


/////////////////////////////////////////////////////////////////

openwrt wifi toggle scheduled
refer to :
https://wiki.openwrt.org/doc/howto/cron

on.sh
----------
#!/bin/sh
uci set wireless.@wifi-device[0].disabled=0
uci set wireless.@wifi-device[1].disabled=0
wifi
uci commit


off.sh
------------
#!/bin/sh
uci set wireless.@wifi-device[0].disabled=1
uci set wireless.@wifi-device[1].disabled=1
wifi
uci commit


scheduled input:
------------------

mine:

0 1 * * 1-5 /etc/wifi/wifioff.sh
0 7 * * 1-5 /etc/wifi/wifion.sh
30 8 * * 1-5 /etc/wifi/wifioff.sh
0 19 * * 1-5 /etc/wifi/wifion.sh
0 2 * * 6,0 /etc/wifi/wifioff.sh
0 7 * * 6,0 /etc/wifi/wifion.sh


0 1 * * 1-5 wifi down
0 7 * * 1-5 wifi up
0 9 * * 1-5 wifi down
0 19 * * 1-5 wifi up
0 2 * * 6,0 wifi down
0 7 * * 6,0 wifi up


notice:
1.There should be a end-of-line character on the last line of the crontab file. If in doubt, just leave an empty line at the end.

2.f there is no crontab defined (i.e. /etc/crontabs/ is empty), then cron won't start! Make sure you already defined cron jobs before trying to start cron.

/etc/init.d/cron start
/etc/init.d/cron enable


test:
---------------
16 21 * * 1-5 /etc/wifi/wifioff.sh
18 21 * * 1-5 /etc/wifi/wifion.sh

00 1 * * * wifi down
30 7 * * * wifi up  


/////////////////////////////////////////////////////////////////

mac app反编译
-------------------
hopper disassembler


thunder:
---------
refer to :
http://bbs.iosre.com/t/hopper-mac/1428
http://bbs.iosre.com/t/hopper-mac/1428

a.搜索：
 is
b.定位文件，选择第一行汇编代码：执行：Modify -> Assemble Instruction，输入：mov eax, 0x1
c.下一步输入ret,然后同样执行其他文件：

//在x86汇编里，函数的返回值存放在eax寄存器里。1对应BOOL类型的YES
//ret为return的意思
1. -[LocalTask isValidLixianTask]
2. -[UserController isVip]
3. -[UserController isPlatinum]
4. -[UserController isDiamond]

d.定位：[AppDelegate applicationWillFinishLaunching:]直接在第一行执行ret
e.File -> Produce New Executable


QQmusic:
---------
refer to :
https://blog.csdn.net/pureszgd/article/details/73527714
-[UrlAudioData currentSongRateType] ret 0
-[DownloadTask currentSongRateType] ret 0
-[DownloadInfo haveCheckDownloadRight] ret 1
-[DownloadInfo haveDownloadRight] ret 1
-[SongInfo isActionBitSet:forSwitch:] ret 1
